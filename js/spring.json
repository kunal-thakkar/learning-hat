var spring=[{"q":"Declaring Beans using:-","opt":["Static field","Object Properties","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Beans can be declared from static fields as well as Object properties."},{"q":"Ways to declare bean from a static field?","opt":["FieldRetrievingFactoryBean","util:contant","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"To declare a bean from a static field, you can make use of either the built-in factory bean FieldRetrievingFactoryBean, or the util:constant tag in Spring 2.x."},{"q":"Declaring a bean from a static field requires a built-in factory bean FieldRetrievingFactoryBean and fully qualified field name or instance field is specified in the list property.","opt":["True","False"],"ans":"b","explanation":"StaticField property is used to specify instance field name."},{"q":"A)<br>      public abstract class Product {<br>\tpublic static final Product AAA = new Battery(\"AAA\", 2.5);<br>\tpublic static final Product CDRW = new Disc(\"CD-RW\", 1.5);<br>\t...<br>      }<br>      <beans ...><br>\t<bean id=\"aaa\" class=\"org.springframework.beans.factory.config.<br>\tFieldRetrievingFactoryBean\"><br>\t<property name=\"staticField\"><br>\t<value>com.shop.Product.AAA<\/value><br>\t<\/property><br>\t<\/bean><br>\t<bean id=\"cdrw\" class=\"org.springframework.beans.factory.config.<br>\tFieldRetrievingFactoryBean\"><br>\t<property> name=\"staticField\"<br>\tvaluecom.shop.Product.CDRW/value<br>\t<\/property><br>\t<\/bean><br>     <\/beans><br>Â <br>   B) Product aaa = com.shop.Product.AAA;<br>      Product cdrw = com.shop.Product.CDRW;","opt":["A and B are equivalent","A and B provides different functionality","Runtime Error in A","Exception in B"],"ans":"a","explanation":"StaticField method fills up the static fields with the provided property values."},{"q":"As an alternative to specifying the field name in the staticField property explicitly, you can set it as the bean name of FieldRetrievingFactoryBean.","opt":["True","False"],"ans":"a","explanation":"Bean name may get rather long and verbose."},{"q":"Is this bean configuration metadata correct?<br>   <beans ...><br>\tbean id=\"com.shop.Product.AAA\"<br>\tclass=\"org.springframework.beans.factory.config.<br>\tFieldRetrievingFactoryBean\" /<br>\tbean id=\"com.shop.Product.CDRW\"<br>\tclass=\"org.springframework.beans.factory.config.<br>\tFieldRetrievingFactoryBean\" /<br>   <\/beans>","opt":["Yes","No"],"ans":"a","explanation":"This is an alternate method of using staticField in property attributes."},{"q":"Which tag is also allowed by static field?","opt":["util:constant","list","set","constructor-args"],"ans":"a","explanation":"Spring 2 and later allow you to declare a bean from a static field by using the util:constant tag."},{"q":"Is this bean configuration correct?<br>    <beans xmlns=\"http://www.springframework.org/schema/beans\"<br>\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"<br>\txmlns:util=\"http://www.springframework.org/schema/util\"<br>\txsi:schemaLocation=\"http://www.springframework.org/schema/beans<br>\thttp://www.springframework.org/schema/beans/spring-beans-3.0.xsd<br>\thttp://www.springframework.org/schema/util/spring-util-3.0.xsd\"<br>\tutil:constant id=\"aaa\"<br>\tstatic-field=\"com.shop.Product.AAA\" /><br>\tutil:constant id=\"cdrw\"<br>\tstatic-field=\"com.shop.Product.CDRW\" /><br>  <\/beans>","opt":["Yes","No"],"ans":"b","explanation":"Schema for util:constant needs to be included using this link: http://www.springframework.org/schema/util."},{"q":"Declaring bean form object properties can be done using:-","opt":["PropertyPathFactoryBean","util:constant","None of the mentioned","All of the mentioned"],"ans":"a","explanation":"To declare a bean from an object property or a property path, you can make use of either the built-in factory bean PropertyPathFactoryBean or the util:property-path tag in Spring 2.x."},{"q":"Inner Bean can be retrieved by it\u2019s name.","opt":["True","False"],"ans":"b","explanation":"Since inner beans are local to another bean, so can\u2019t be accessed globally."},{"q":"PropertyPathFactoryBean declares a bean from an:-","opt":["Object Property","Property Path","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"The factory bean PropertyPathFactoryBean can be used to declare a bean from an object property or a property path."},{"q":"The propertyPath property of PropertyPathFactoryBean can accept only a single property name.","opt":["True","False"],"ans":"b","explanation":"The propertyPath property of PropertyPathFactoryBean can accept not only a single property name but also a property path with dots as the separators."},{"q":"Alternate way of PropertyPathFactoryBean to declare a bean.","opt":["util:property-path tag","util:constant tag","None of the mentioned","All of the mentioned"],"ans":"a","explanation":"Compared to using PropertyPathFactoryBean, it is a simpler way of declaring beans from properties."},{"q":"We can combine target Object and propertyPath properties as bean name/id of PropertyPathFactoryBean.","opt":["True","False"],"ans":"a","explanation":"In addition to specifying the targetObject and propertyPath properties explicitly, you can combine them as the bean name of PropertyPathFactoryBean. The downside is that your bean name may get rather long and verbose."},{"q":"The Spring Expression Language can be accessed by:-","opt":["XML configuration","Annotations","None of the mentioned","All of the mentioned"],"ans":"d","explanation":"The expression language is available via XML or annotations."},{"q":"Way to secure web app\u2019s URL.","opt":["servlet filters","refresh-check-delay","http servlet filters","none of the mentioned"],"ans":"a","explanation":"Spring Security enables you to secure a web application\u2019s URL access in a declarative way through simple configuration. It handles security by applying servlet filters to HTTP requests."},{"q":"Servlet filter registered in web deployment descriptor, which filters request in spring application context.","opt":["DelegatingFilter","DelegatingFilterProxy","DelegatingProxy","None of the mentioned"],"ans":"b","explanation":"As servlet filters must be registered in the web deployment descriptor to take effect, you have to register a DelegatingFilterProxy instance in the web deployment descriptor, which is a servlet filter that delegates request filtering to a filter in Spring\u2019s application context."},{"q":"Servlet APIs to access security information of web application.","opt":["HttpServletRequest.isUserInRole()","HttpServletRequest.getUserPrincipal()","None of the mentioned","All of the mentioned"],"ans":"d","explanation":"Servlet API integration: This allows you to access security information in your web application via standard Servlet APIs, such as HttpServletRequest.isUserInRole() and HttpServletRequest.getUserPrincipal()."},{"q":"To load root application context at the start up.","opt":["ContextListener","ContextLoader","ContextLoaderListener","ContextEventListener"],"ans":"c","explanation":"In the web deployment descriptor (i.e., web.xml), you register ContextLoaderListener to load the root application context at startup."},{"q":"To dispatch requests for web application.","opt":["DispatcherServlet","ViewHandler","ViewResolver","None of the mentioned"],"ans":"a","explanation":"Spring MVC DispatcherServlet is used to dispatch requests."},{"q":"The responsibility of DelegatingFilterProxy is simply to delegate HTTP request filtering to a Spring bean that implements the interface:-","opt":["java.util.logging.Filter","java.util.logging.net","java.util.logging.FilterHttp","none of the mentioned"],"ans":"a","explanation":"The responsibility of DelegatingFilterProxy is simply to delegate HTTP request filtering to a Spring bean that implements the java.util.logging.Filter interface."},{"q":"By default, DelegatingFilterProxy delegates to a bean whose name is the same as its filter-name property.","opt":["True","False"],"ans":"a","explanation":"By default, it delegates to a bean whose name is the same as its filter-name property, but you can override the bean name in its targetBeanName init parameter."},{"q":"Filter chain configured by Spring security, when web app security enabled.","opt":["springSecurityFilterChain","delegatingFilterProxy","none of the mentioned","all of the mentioned"],"ans":"a","explanation":"As Spring Security will automatically configure a filter chain with the name springSecurityFilterChain when you enable web application security, you can simply use this name for your DelegatingFilterProxy instance."},{"q":"The http auto-config=\u201dfalse\u201d element automatically configures the basic security services that a typical web application needs.","opt":["True","False"],"ans":"b","explanation":"The http auto-config=\u201dtrue\u201d element automatically configures the basic security services that a typical web application needs. You can fine-tune these services with the corresponding sub elements inside it."},{"q":"Element used to restrict access to a particular URL.","opt":["restrict-url","intercept-url","intercept-restrict","none of the mentioned"],"ans":"b","explanation":"Inside the http configuration element, you can restrict access to particular URLs with one or more intercept-url elements."},{"q":"Element which configures authentication services.","opt":["authentication-provider","authentication-manager","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"You can configure authentication services in the authentication-provider element, which is nested inside the authentication-manager element."},{"q":"Element which defines user details.","opt":["user-service","user-details","user-requirements","user-servicerequirements"],"ans":"a","explanation":"Spring Security also supports defining user details in user-service directly for simple security requirements. You can specify a"},{"q":"Which of the following way to provide authenticity of users is/are supported by Spring Security?","opt":["Authenticating against a database","LDAP repository","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Spring Security supports several ways of authenticating users, including authenticating against a database or an LDAP repository."},{"q":"The basic security services registered and configured by Spring Security.","opt":["Form-based login service","Logout Service","HTTP Basic authentication.","All of the mentioned"],"ans":"d","explanation":"Spring Security will automatically register and configure several basic security services, including the above mentioned."},{"q":"HTTP Basic authentication support is configured by:-","opt":["logout","http-basic","http-basicauth","none of the mentioned"],"ans":"d","explanation":"The HTTP Basic authentication support can be configured via the http-basic element. When HTTP Basic authentication is required, a browser will typically display a login dialog or a specific login page for users to log in."},{"q":"Form-based login is configured by:-","opt":["servlet filters","refresh-check-delay","form-login","none of the mentioned"],"ans":"c","explanation":"The form-based login service will render a web page that contains a login form for users to input their login details and process the login form submission. It\u2019s configured via the form-login element."},{"q":"Action URL can be customized using form-login.","opt":["True","False"],"ans":"a","explanation":"Note that the form action URL and the input field names are Spring Security\u2013specific. However, the action URL can be customized with the login-url attribute of form-login."},{"q":"Attribute used to display custom login page.","opt":["login-url","custom-login","login-custom","custom-login"],"ans":"a","explanation":"In order for Spring Security to display your custom login page when a login is requested, you have to specify its URL in the login-page attribute."},{"q":"Attribute which specifies redirection URL on login error.","opt":["authentication-failure-url","authentication-failure_login-url","authentication-login-url","none of the mentioned"],"ans":"a","explanation":"If you specify a custom login page, you will have to configure the authentication-failure-url attribute to specify which URL to redirect to on login error."},{"q":"Session scope attribute to display error message.","opt":["SPRING_SECURITY_FIRST_EXCEPTION","SPRING_SECURITY_LAST_EXCEPTION","SPRING_SECURITY_EXCEPTION","SPRING_SECURITY_LAST_ERROR"],"ans":"b","explanation":"If an error has occurred, you will have to display the error message by accessing the session scope attribute SPRING_SECURITY_LAST_EXCEPTION, which stores the last exception for the current user."},{"q":"Logout service is configured by:-","opt":["logout","login","logout-basic","logout_basic"],"ans":"a","explanation":"The logout service provides a handler to handle logout requests. It can be configured via the logout element."},{"q":"Element which redirects to a specific URL on logout.","opt":["logout-success","logout-success_url","logout-url","logout-success-url"],"ans":"d","explanation":"By default, a user will be redirected to the context path root when the logout succeeds, but sometimes, you may wish to direct the user to another URL."},{"q":"Anonymous login services can be configured by:-","opt":["anonymous-basic","anonymous","anonymous-target","none of the mentioned"],"ans":"b","explanation":"The anonymous login service can be configured via the anonymous element."},{"q":"Default values of customized Username and authorities are anonymousUser and ROLE_ANONYMOUS respectively.","opt":["True","False"],"ans":"a","explanation":"You can customize the username and authorities of an anonymous user, whose default values are anonymousUser and ROLE_ANONYMOUS."},{"q":"Remember-me support can be configured by:-","opt":["remember-me","remember-me-basic","remember-basic","none of the mentioned"],"ans":"a","explanation":"Remember-me support can be configured via the remember-me element."},{"q":"By default, Remember-me encodes the username, password, remember-me expiration time, and a private key as a token, and stores it as a cache in the user\u2019s browser.","opt":["True","False"],"ans":"b","explanation":"Remember-me stores as cookie in the user\u2019s browser not as cache."},{"q":"Spring Security algorithms to secure password.","opt":["MD5","SHA","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Spring Security supports several algorithms for encoding passwords (including MD5 and SHA) and provides built-in password encoders for these algorithms."},{"q":"Connection of database with Apache derby server requires.","opt":["Derby client.jar","Spring JDBC support","None of the mentioned","All of the mentioned"],"ans":"d","explanation":"To connect to a database in the Apache Derby server, you need the Derby client .jars, as well as the Spring JDBC support."},{"q":"You can specify the statements for querying a user\u2019s information and authorities in the users-by-username-query and authorities-by-username-query attributes.","opt":["True","False"],"ans":"a","explanation":"Spring Security also supports using custom SQL statements to query a legacy database for user details."},{"q":"Utility to calculate MD5 digests for your password.","opt":["CheckSum","BeanShell","Jacksum","None of the mentioned"],"ans":"c","explanation":"Jacksum, which you can download from http://sourceforge.net/projects/jacksum/ and extract to a directory of your choice. Then execute the following command to calculate a digest for a text:"},{"q":"Element used to secure methods.","opt":["security:intercept-methods","global-method-security","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"First, you can embed a security:intercept-methods element in a bean definition to secure its methods. Alternatively, you can configure a global global-method-security element to secure multiple methods."},{"q":"@Secured annotation is used to secure methods implemented by beans.","opt":["True","False","security:protect","security:intercept","security:intercept-security","none of the mentioned"],"ans":"a","explanation":"In a bean\u2019s security:intercept-methods, you can specify multiple security:protect elements to specify access attributes for this bean\u2019s methods."},{"q":"Attribute used to specify custom access decision manager.","opt":["access-decision-manager-ref","access-decision-ref","access-decision","none of the mentioned"],"ans":"a","explanation":"If you would like to use a custom access decision manager, you can specify it in the access-decision-manager-ref."},{"q":"JSP technology is also used to handle security of JSP views.","opt":["True","False"],"ans":"a","explanation":"Spring Security provides a JSPtag library for you to handle security in JSP views."},{"q":"Tag which displays user\u2019s Authentication object.","opt":["security:tag","security_Tag","security:authentication","none of the mentioned"],"ans":"c","explanation":"The security:authentication tag exposes the current user\u2019s Authentication object for you to render its properties."},{"q":"Tag which renders the granted authorities one by one.","opt":["c:for","c:forEach","c:doWhile","c:while"],"ans":"b","explanation":"You can store the authorities property, which contains the authorities granted to the user, in the JSP variable authorities, and render them one by one with a c:forEach tag."},{"q":"Tag used to render view contents conditionally.","opt":["security:authorize","security:authority","security:authenticate","none of the mentioned"],"ans":"a","explanation":"If you would like to render view contents conditionally according to a user\u2019s authorities, you can use the security:authorize tag."},{"q":"Attribute used to render enclosed content.","opt":["ifGranted","if_Granted","ifAllGranted","none of the mentioned"],"ans":"c","explanation":"If you want the enclosing content to be rendered only when the user has been granted certain authorities at the same time, you have to specify them in the ifAllGranted attribute."},{"q":"Module that allows each domain to have it\u2019s own access.","opt":["access share list","access common list","access control list","access list"],"ans":"c","explanation":"Spring Security provides a module named ACL that allows each domain object to have its own access control list (ACL)."},{"q":"ACL(Access control list) consists of:-","opt":["object identity","access control entities","none of the mentioned","all of the mentioned"],"ans":"a","explanation":"An ACL contains a domain object\u2019s object identity to associate with the object, and also holds multiple access control entries (ACEs)."},{"q":"ACEs(Access control entries) core consists of:-","opt":["Permissions","Security Identity","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Multiple access control entries (ACEs), each of which contains the above mentioned two core parts."},{"q":"Which of the following is/are part of BasePermission class:-","opt":["CREATE","READ/WRITE","DELETE","All of the mentioned"],"ans":"d","explanation":"The BasePermission class predefines five basic permissions as constant values for you to use: READ (bit 0 or integer 1), WRITE (bit 1 or integer 2), CREATE (bit 2 or integer 4), DELETE (bit 3 or integer 8), and ADMINISTRATION (bit 4 or integer 16)."},{"q":"SID(Security Identity) associates with permission using.","opt":["principal(PrincipalSid)","authority (GrantedAuthoritySid)","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"Each ACE contains permissions for a particular SID. An SID can be a principal (PrincipalSid) or an authority (GrantedAuthoritySid) to associate with permissions."},{"q":"Interfaces that defines operation of an ACL service.","opt":["AclService","MutableAclService","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"In Spring Security, there are two interfaces that define operations of an ACL service: AclService and MutableAclService. AclService defines operations for you to read ACLs."},{"q":"Element which secures web flows.","opt":["secured","security","sec","none of the mentioned"],"ans":"a","explanation":"With Spring Security configured properly, you can simply secure a flow, a state, or a transition by embedding the secured element with required access attributes specified."},{"q":"To secure web flows with Spring Security.","opt":["DelegatingFilter","DelegatingFilterProxy","DelegatingProxy","None of the mentioned"],"ans":"b","explanation":"To secure web flows with Spring Security, you first have to configure a DelegatingFilterProxy filter in the web deployment descriptor (i.e., web.xml)."},{"q":"Group id to add spring security using Maven.<br><dependency><br>   <groupId><\/groupId><br>   <artifactId>spring-security-core<\/artifactId><br>   <version>3.0.2.RELEASE<\/version><br><\/dependency>","opt":["org.springframework.secure","org.springframework.security","org.springframework.securedflow","none of the mentioned"],"ans":"b","explanation":"org.springframework.secur is used to secure web flows with Spring Security."},{"q":"auto-config provides only default form-based login service.","opt":["True","False"],"ans":"b","explanation":"HTTP auto-config, which provides a default form-based login service, an anonymous login service, and so on."},{"q":"To enable Spring security for web flows.","opt":["SecurityFlowExecutionListener","SecurityFlowExecution","FlowSecurity","SecurityFlowListener"],"ans":"a","explanation":"You have to register the flow execution listener SecurityFlowExecutionListener in the flow executor to enable Spring Security for web flow."},{"q":"Which of the following class should replace \u2018?\u2019.<br><beans ...><br>...<br>  <webflow:flow-executor id=\"flowExecutor\"><br>  <webflow:flow-execution-listeners><br>  <webflow:listener ref=\"securityFlowExecutionListener\" /><br>  <\/webflow:flow-execution-listeners><br>  <\/webflow:flow-executor><br>  <bean id=\"securityFlowExecutionListener\" class=\"?\" /><br><\/beans>","opt":["org.springframework.webflow.security.SecurityFlow","org.springframework.webflow.SecurityFlowExecutionListener","org.springframework.webflow.security.SecurityFlowExecutionListener","org.springframework.security.SecurityFlowExecutionListener"],"ans":"c","explanation":"You have to register the flow execution listener SecurityFlowExecutionListener in the flow executor to enable Spring Security for web flow."},{"q":"Which attribute is used to access security element of web flow.","opt":["attribute","attributes-security","attributes","none of the mentioned"],"ans":"c","explanation":"You can specify multiple access attributes required for accessing this web flow in the attributes attribute, separated by commas."},{"q":"Spring web flow supports integration with.","opt":["JSF","Hibernate","JPA","All of the mentioned"],"ans":"d","explanation":"Spring Web Flow 2.0 comes with support for JPA and Hibernate."},{"q":"To integrate JPA with Spring Web flows.","opt":["JpaFlowExecutionListener","HibernateFlowExecutionListener","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"To have Spring Web Flow manage the persistence contexts for your web flows, you have to register a flow execution listener (e.g., JpaFlowExecutionListener for JPA."},{"q":"To integrate Hibernate with Spring Web flows.","opt":["JpaFlowExecutionListener","HibernateFlowExecutionListener","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"To have Spring Web Flow manage the persistence contexts for your web flows, you have to register a flow execution listener (e.g., HibernateFlowExecutionListener for Hibernate."},{"q":"HibernateFlowExecutionListener and JpaFlowExecutionListener both belongs to which of the package.","opt":["org.springframework.web.persistence package","org.springframework.persistence package","org.springframework.webflow package package","org.springframework.webflow.persistence package"],"ans":"d","explanation":"JpaFlowExecutionListener for JPA and HibernateFlowExecutionListener for Hibernate, both of which belong to the org.springframework.webflow.persistence package) in the flow executor."},{"q":"JpaFlowExecutionListener and Hibernate Listener binds to flow scope.","opt":["True","False"],"ans":"a","explanation":". When a new flow starts, this listener creates a new persistence context (e.g., a JPA entity manager or a Hibernate session) and binds it to the flow scope."},{"q":"Libraries used to integrate Hibernate with JPA.","opt":["Hibernate 3","Hibernate 3 Entity Manager","JPA API","All of the mentioned"],"ans":"d","explanation":"To use Hibernate as the JPA engine, you have to add Hibernate 3, the Hibernate 3 EntityManager, the JPA API, and ehcache."},{"q":"To configure JPA vendor-specific information.","opt":["JPA vendor adaptor","Data source","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"you can configure a JPA entity manage factory by providing a data source and a JPA vendor adaptor, where you can configure JPA vendor-specific information."},{"q":"You have to register a flow execution listener in the flow executor.","opt":["True","False"],"ans":"a","explanation":"To have Spring Web Flow manage the persistence contexts for your web flows, you have to register a flow execution listener in the flow executor."},{"q":"Servlet listener which loads application context.","opt":["Security:intercept-methods","global-method-security","ContextLoaderListener","None of the mentioned"],"ans":"c","explanation":"A web application can load Spring application context by registering the servlet listener ContextLoaderListener."},{"q":"Method to retrieve Spring Applicationcontext.","opt":["WebApplicationContextUtils.getRequiredWebApplicationContext()","WebApplicationContextUtils.getRequiredWeb()","WebApplicationUtils.getRequiredWebApplicationContext()","None of the mentioned"],"ans":"a","explanation":"As Spring applicationcontext is stored in the servlet context, you can retrieve it through the WebApplicationContextUtils.getRequiredWebApplicationContext() method by passing in a servlet context."},{"q":"Class used to have full access to the Spring context\u2019s life cycle machinery and dependency injection.","opt":["DelegatingFilterProxy","WebApplicationContextUtils.getRequiredWeb()","WebApplicationUtils.getRequiredWebApplicationContext()","None of the mentioned"],"ans":"a","explanation":"If you want to implement filter-like functionality but want to have full access to the Spring context\u2019s life cycle machinery and dependency injection, use the DelegatingFilterProxy class."},{"q":"In order to leverage Spring application context machinery and configuration.","opt":["HttpRequestHandlerJNDI","HttpRequestHandlerServlet","HttpRequestHandler","None of the mentioned"],"ans":"b","explanation":"Suppose we wanted to rewrite the servlet functionality to leverage Spring application context machinery and configuration. The HttpRequestHandlerServlet will handle this for us."},{"q":"Interface implemented by object instantiated by HttpRequestHandlerServlet.","opt":["HttpRequestHandlerJNDI","HttpRequestHandlerServlet","HttpRequestHandler","None of the mentioned"],"ans":"c","explanation":"In the servlet example, the HttpRequestHandlerServlet delegated to another object that implemented an interface\u2014HttpRequestHandler\u2014that was considerably simpler than that of a raw servlet."},{"q":"Attribute used to look up and delegate a particular root bean.","opt":["filter","filter-name","filtername","none of the mentioned"],"ans":"b","explanation":"the filter-name attribute is used to determine which bean in the root Spring application context to look up and delegate to."},{"q":"ActionSupport class provides a method to access spring application context.","opt":["getWebApplicationContext()","getWebApplication()","getApplicationContext()","contextEventListener()"],"ans":"a","explanation":"Spring provides the ActionSupport class, a subclass of the Action base class that has a convenient getWebApplicationContext() method for you to access Spring application context."},{"q":"Struts servlet used to handle web requests.","opt":["ActionServlet","Action","ActionSupport","ActionStruts"],"ans":"a","explanation":"In the web deployment descriptor (i.e., web.xml) of a Struts application, you have to register the Struts servlet ActionServlet to handle web requests."},{"q":"Struts plugin used to integrate with spring.","opt":["ContextLoaderListener","ContextLoaderPlugin","ContextLoaderListenerPlugin","None of the mentioned"],"ans":"b","explanation":"Another way is to register the Struts plug-in ContextLoaderPlugin in the Struts configuration file."},{"q":"Integration of JSF with Spring Application Context.","opt":["ContextLoaderListener","DelegatingVariableResolver","SpringBeanFacesELResolver","All of the mentioned"],"ans":"d","explanation":"Due to the similarity between Spring and JSF bean models, it\u2019s very easy to integrate them by registering the Spring-provided JSF variable resolver DelegatingVariableResolver (for JSF 1.1) or the SpringBeanFacesELResolver (for JSF 1.2 and greater)."},{"q":"To handle web requests in JSF.","opt":["FacesServlet","JavaFacesServlet","Faces-Servlet","None of the mentioned"],"ans":"a","explanation":"In the web deployment descriptor (i.e., web.xml) of a JSF application, you have to register the JSF servlet FacesServlet to handle web requests."},{"q":"Component of JSF, for user\u2019s input in a form.","opt":["h:form","h:commandButton","h:outputText","h:inputText"],"ans":"a","explanation":"h:form component for users to fill form."},{"q":"Tag used to provide result of web requests and is read only.","opt":["h:form","h:commandButton","h:outputText","h:inputText"],"ans":"c","explanation":"The distance result is defined using an h:outputText component because its value is read-only."},{"q":"Tag which triggers server side requests.","opt":["h:form","h:commandButton","h:outputText","h:inputText"],"ans":"b","explanation":"You define an h:commandButton component whose action will be triggered on the server side when you click it."},{"q":"Tag used to integrate Spring with DWR.","opt":["dwr:integrate","dwr:remote","dwr:action","none of the mentioned"],"ans":"b","explanation":"You can simply configure which beans to expose for remote invocation by embedding the tag without involving the DWR configuration file."},{"q":"Spring supports web flows by:-","opt":["Java","XML","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Spring supports defining a flow either by java or XML."},{"q":"Spring manages UI as flows.","opt":["True","False"],"ans":"a","explanation":"Spring Web Flow allows you to model UI activities as flows."},{"q":"Stated related to Spring Web flows.","opt":["view","action","decision","all of the mentioned"],"ans":"d","explanation":"Spring Web Flow builds in several state types, including view state, action state, decision state, subflow state, and end state."},{"q":"Once a state has completed its tasks, it fires an event.","opt":["True","False"],"ans":"a","explanation":"An event contains a source and an event ID, and perhaps some attributes."},{"q":"Required dependencies to manage web UI flows.","opt":["spring web flow distribution.","org.springframework.webflow","all of the mentioned","none of the mentioned"],"ans":"b","explanation":"To manage your web UI flows with Spring Web Flow, you need the Spring Web Flow distribution (e.g.,v2.0.8) on your CLASSPATH."},{"q":"Spring Web flow supports.","opt":["Unified EL","Object-Graph Navigation Language (OGNL)","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Spring Web Flow supports using Unified EL (used in JSF 1.2 and JSP 2.1) and Object-Graph Navigation Language (OGNL), which is used in Tapestry, WebWork, and other frameworks, as its expression language."},{"q":"Spring Web flow can enable both Unified EL and Object-Graph Navigation Language (OGNL).","opt":["True","False"],"ans":"b","explanation":"Spring Web Flow is able to detect the libraries of JBoss EL (as the default Unified EL implementation) and OGNL from the classpath. You can enable either of them (but not both) by including the corresponding JAR file in your classpath."},{"q":"To create URL path mappings from the ids of registered flow definitions.","opt":["FlowHandlerMapping","FlowHandler","FlowHandlerMappingRequest","None of the mentioned"],"ans":"a","explanation":"The FlowHandlerMapping follows a convention to create URL path mappings from the ids of registered flow definitions."},{"q":"XML Based flow definitions can be validated by:-","opt":["Spring Web Flow XSD","Spring IDE","SpringSource Tool Suite","All of the mentioned"],"ans":"d","explanation":"Spring Web Flow offers an XML\u2013based flow definition language that can be validated by Spring Web Flow XSD and supported by Spring IDE or SpringSource Tool Suite (STS)."},{"q":"Element to trigger an action for view module.","opt":["on-render","on-action","on-trigger","none of the mentioned"],"ans":"a","explanation":"You can use the on-render element to trigger an action for a view state before its view renders."},{"q":"Variable to trigger the flow execution.","opt":["${flowExecutionUrl}","${exec.flow}","${flowExecutionUrl.match}","none of the mentioned","Apache Tomcat 6.0","Jetty","None of the mentioned","All of the mentioned"],"ans":"d","explanation":"By default, Tomcat and Jetty (and the Maven Jetty plugin configured for this code) listen on port 8080."},{"q":"Interface which is used to persist instances sessions.","opt":["serializable","file.io","io.file.*","none of the mentioned"],"ans":"a","explanation":"Implement the Serializable interface, as its instances may need to be persisted in sessions."},{"q":"Class which assist Spring Web flow in handling form.","opt":["Form","FormAction","FormHandler","Form-Handler"],"ans":"b","explanation":"Spring Web Flow provides a FormAction class to assist you in handling forms."},{"q":"Property for action to instantiate form objects.","opt":["formObjectClass","formClass","objectClass","none of the mentioned"],"ans":"a","explanation":"A form action can bind form fields to a form object\u2019s properties of the same name. But you first have to specify the form object class in the formObjectClass property for this action to instantiate form objects."},{"q":"View Technologies to render Spring Web MVC view.","opt":["JSP","Tiles","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"By default, Spring Web Flow relies on Spring MVC view technologies (e.g., JSP and Tiles) to render its views."},{"q":"Submodules of Spring Web Flow to simplify use of JSF and javascript in Spring.","opt":["Spring Faces","Spring Javascript","None of the mentioned","All of the mentioned"],"ans":"d","explanation":"Spring Web Flow provides two submodules, Spring Faces and Spring JavaScript, to simplify using JSF and JavaScript in Spring."},{"q":"Spring Faces provides a set of client-side validation components for standard JSF input components.","opt":["True","False"],"ans":"a","explanation":"These components are provided as Facelets tags, so you have to use Facelets as your JSF view technology to use them."},{"q":"To use JSF Validation components provided by spring faces.","opt":["Faces","Spring Javascript","Facelets","None of the mentioned"],"ans":"c","explanation":"To use the JSF validation components provided by Spring Faces, you have to use Facelets to create your JSF views."},{"q":"Attribute used to handle web flow requests.","opt":["servlet-mapping","servlet-attr","servlet-flow","servlet-requests"],"ans":"a","explanation":"If you are going to use the legacy JSF request handling at the same time, you will have to specify that."},{"q":"JSF view handler to enable Facelets and a SpringBeanFacesELResolver to access Spring beans.","opt":["FaceletViewHandler","FaceletView","FaceletHandler","None of the mentioned"],"ans":"a","explanation":"You have to configure FaceletViewHandler as the JSF view handler to enable Facelets and a SpringBeanFacesELResolver to be able to access Spring beans through JSF expression language."},{"q":"To resolve Facelets views we configure:-","opt":["ViewFacelets","ViewResolver","View-resolver","View_Resolver"],"ans":"b","explanation":"We configure a ViewResolver to resolve Facelets views by conventions we dictate."},{"q":"File extension of a view state\u2019s name which is by default loaded by facelet page.","opt":[".xml",".hbm.xml",".xhtml","none of the mentioned"],"ans":"c","explanation":"The JSF flow builder services internally use a JSF view factory, which will, by default, load a Facelets page using a view state\u2019s name and .xhtml as the file extension."},{"q":"Navigation in traditional JSF applications is handled by:-","opt":["linking directly linking to a resource","commandLink","invoking an action","all of the mentioned"],"ans":"d","explanation":"Navigation in traditional JSF applications is handled by linking directly linking to a resource or by invoking an action (for example, on a commandLink)."},{"q":"For cross field validation or some sort of barrier to ensure state before you start a flow, we use.","opt":["FacesContext","FaceletContext","FacesResolver","All of the mentioned"],"ans":"a","explanation":"There are many reasons to want to use the FacesContext from the action."},{"q":"To use Spring Faces Components, we register which of the following?","opt":["Servlet API","ResourceServlet","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"Before you can use the Spring Faces components, you have to register ResourceServlet, which is provided by Spring JavaScript for accessing static resources in JAR files, in the web deployment descriptor."},{"q":"Resources retrieved by Spring Faces Component.","opt":["JavaScript","CSS","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Spring Faces components will retrieve static JavaScript and CSS resources from Spring JavaScript through this servlet."},{"q":"Component which additionally provides a pop-up date picker control for its enclosed input field.","opt":["clientDateValidator","clientValidator","dateValidator","validator"],"ans":"a","explanation":"The validation components enable client-side validation for the inputText components. You will see that the clientDateValidator component additionally provides a pop-up date picker control for its enclosed input field."},{"q":"Component which encloses command button.","opt":["validateAll","validateAllClick","validateAllInClick","validateAllOnClick"],"ans":"c","explanation":"When a command button enclosed by a validateAllInClick component is clicked, it will trigger all validators in the same page to validate their fields."},{"q":"Libraries provided by RichFaces an integration support for Spring web flow.","opt":["RichFaces","Slf-4j","Log-4j","All of the mentioned"],"ans":"a","explanation":"RichFaces actually provides two libraries that each serve very different purposes. One, called Ajax4JSF, provides the ability to augment existing components and page elements with Ajax functionality. The other, RichFaces, provides an advanced component set with Ajax functionality baked into the core."},{"q":"Design pattern implemented by Dispatcher Servlet.","opt":["jsp","tiles","front controller","none of the mentioned"],"ans":"c","explanation":"A Spring MVC controller\u2014often referred to as a Dispatcher Servlet\u2014implements one of Sun\u2019s core Java EE design patterns called front controller."},{"q":"Class used to give a class behavior of a Dispatcher Servlet.","opt":["AbstractController","Controller","Abstract Class","AbstractAction"],"ans":"a","explanation":"Prior to Spring 3.0 one of a series of classes, such as AbstractController, were used to give a class the behavior of a Dispatcher Servlet."},{"q":"Annotation for Controller Class.","opt":["@Before","@Controller","@After","@Exception"],"ans":"b","explanation":"When a @Controller annotated class (i.e., a controller class) receives a request, it looks for an appropriate handler method to handle the request."},{"q":"Handler method annotation.","opt":["@Before","@Controller","@After","@RequestMapping"],"ans":"d","explanation":"In order to do so, a controller class\u2019s methods are decorated with the @RequestMapping annotation, making them handler methods."},{"q":"Method arguments that can be used in handler methods using the @RequestMapping annotation.","opt":["HttpServletRequest or HttpServleResponse","@RequestParam","@ModelAttribute","All of the mentioned"],"ans":"d","explanation":"The above mentioned is only a partial list of valid argument types, just to give you an idea."},{"q":"Annotation which represents cookie values of requests.","opt":["HttpServletRequest or HttpServleResponse","@RequestParam","@Cookie","None of the mentioned"],"ans":"d","explanation":"Cookie values included in an incoming request, annotated with @CookieValue."},{"q":"To add attributes to the model.","opt":["Map","ModelMap","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Map or ModelMap, for the handler method to add attributes to the model."},{"q":"To access the binding and validation result for the command object.","opt":["Errors","BindingResult","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Errors or BindingResult, for the handler method to access the binding and validation result for the command object."},{"q":"To notify its completion of session processing.","opt":["Errors","BindingResult","SessionStatus","None of the mentioned"],"ans":"c","explanation":"SessionStatus, for the handler method to notify its completion of session processing."},{"q":"Controller Class renders the objects passed by the controller\u2019s handler method.","opt":["True","False"],"ans":"a","explanation":"Once the controller class has resolved a view name into a view implementation, per the view implementation design, it renders the objects (e.g., HttpServletRequest, Map, Errors, or SessionStatus) passed by the controller\u2019s handler method."},{"q":"Parameter used to specify a configuration file.","opt":["contextConfigLocation","contextConfigure","contextLocation","none of these"],"ans":"a","explanation":"By default, a look is made for a file by joining the servlet name with -servlet.xml as the file name. You can explicitly specify a configuration file in the contextConfigLocation servlet parameter."},{"q":"The @RequestMapping annotation can be applied to the class level only.","opt":["True","False"],"ans":"b","explanation":"The @RequestMapping annotation can be applied to the class level or the method level."},{"q":"Bean classes pre-registered in the web application context by default.","opt":["DefaultAnnotationHandlerMapping","AnnotationMethodHandlerAdapter","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Next, the DefaultAnnotationHandlerMapping and AnnotationMethodHandlerAdapter bean classes are pre-registered in the web application context by default."},{"q":"By default, @RequestMapping gets all the POST Requests.","opt":["True","False"],"ans":"b","explanation":"By default, @RequestMapping annotations assume all incoming requests are of the HTTP GET kind, which is the most common in web applications."},{"q":"Callback methods provided by HandlerInterceptor to implement.","opt":["preHandle()","postHandle()","afterCompletion()","all of the mentioned"],"ans":"d","explanation":"Each handler interceptor must implement the HandlerInterceptor interface, which contains three callback methods for you to implement: preHandle(), postHandle(), and afterCompletion()."},{"q":"Interface implemented by locale resolver.","opt":["localeResolver","tiles","front controller","none of the mentioned"],"ans":"a","explanation":"In a Spring MVC application, a user\u2019s locale is identified by a locale resolver, which has to implement the LocaleResolver interface."},{"q":"You can define a locale resolver by registering a bean of type LocaleResolver in the web application context.","opt":["True","False"],"ans":"a","explanation":"You must set the bean name of the locale resolver to localeResolver for DispatcherServlet to auto-detect."},{"q":"Default localeResolver used by Spring.","opt":["AcceptHeaderLocale","AcceptHeader","AcceptHeaderLocaleResolver","AcceptLocaleResolver"],"ans":"c","explanation":"The default locale resolver used by Spring is AcceptHeaderLocaleResolver."},{"q":"AcceptHeaderLocaleResolver esolves locales by inspecting the accept-language header of an HTTP request.","opt":["True","False"],"ans":"a","explanation":"This header is set by a user\u2019s web browser according to the locale setting of the underlying operating system."},{"q":"Alternative way to resolve locales.","opt":["AcceptHeaderLocale","AcceptHeader","AcceptHeaderLocaleResolver","SessionLocaleResolver"],"ans":"d","explanation":"Another option of resolving locales is by SessionLocaleResolver."},{"q":"Property which indicates how many seconds this cookie should be persisted.","opt":["cookieMaxAge","cookieName","cookieAge","none of the mentioned"],"ans":"a","explanation":"The cookieMaxAge property indicates how many seconds this cookie should be persisted."},{"q":"Method used to change user\u2019s locale.","opt":["set","setLocale","locale","set_locale"],"ans":"b","explanation":"Changing a user\u2019s locale by calling LocaleResolver.setLocale() explicitly."},{"q":"Property of LocaleChangeInterceptor used to customize parameter name.","opt":["localeResolver.setLocale","paramName","locale.parm","none of the mentioned"],"ans":"b","explanation":"Changing a user\u2019s locale by calling LocaleResolver.setLocale() explicitly."},{"q":"LocaleChangeInterceptor can only detect the parameter for the handler mappings that enable it.","opt":["True","False"],"ans":"a","explanation":"So, if you have more than one handler mapping configured in your web application context, you have to register this interceptor to allow users to change their locales in any of the URLs."},{"q":"Parameter which can change user\u2019s locale by any URL.","opt":["locale","languageURL","language","none of the mentioned"],"ans":"c","explanation":"Now a user\u2019s locale can be changed by any URLs with the language parameter."},{"q":"Interface used to resolve text messages.","opt":["Message","Message_Source","Language","MessageSource"],"ans":"d","explanation":"Spring is able to resolve text messages for you by using a message source, which has to implement the MessageSource interface."},{"q":"Tag used by view to resolve text messages.","opt":["spring:message","spring:language","spring:title","none of the mentioned"],"ans":"a","explanation":"Then your JSP files can use the spring:message tag, defined in Spring tag library, to resolve a message given the code."},{"q":"The ResourceBundleMessageSource implementation resolves messages for different locales.","opt":["True","False"],"ans":"a","explanation":"The ResourceBundleMessageSource implementation resolves messages from different resource bundles for different locales."},{"q":"cookieName is used by localeResolver to customize the cookie used.","opt":["True","False"],"ans":"a","explanation":"The cookie used by this locale resolver can be customized by setting the cookieName and cookieMaxAge properties."},{"q":"The cookieMaxAge value when browser is closed.","opt":["0","1","-1","true"],"ans":"c","explanation":"The value -1 indicates that this cookie will be invalid after the browser is closed."},{"q":"Interface for Dispatcher Servlet to auto detect view resolver beans.","opt":["localeResolver","tiles","ViewResolver","none of the mentioned"],"ans":"c","explanation":"Spring MVC comes with several ViewResolver implementations for you to resolve views using different strategies."},{"q":"ViewResolver which maps each view name tol an application\u2019s directory.","opt":["InternalViewResolver","InternalResourceViewResolver","InternalResolver","None of the mentioned"],"ans":"b","explanation":"The view resolver InternalResourceViewResolver maps each view name to an application\u2019s directory by means of a prefix and a suffix declaration."},{"q":"InternalResourceViewResolver resolves view names into view objects of type.","opt":["JstlView","Jst Library","View","None of the mentioned"],"ans":"a","explanation":"By default, InternalResourceViewResolver resolves view names into view objects of type JstlView if the JSTL library (i.e., jstl.jar) is present in the classpath."},{"q":"By default, XmlViewResolver loads view beans from /WEB-INF/views.xml which is final.","opt":["True","False"],"ans":"b","explanation":"This location can be overridden through the location property."},{"q":"View beans from a resource bundle is loaded by.","opt":["ResourceBundleViewResolver","ResourceBundleView","ResourceViewResolver","None of the mentioned"],"ans":"a","explanation":"ResourceBundleViewResolver loads view beans from a resource bundle in the classpath root."},{"q":"Views that can\u2019t be resolved by InternalResourceViewResolver.","opt":["redirect","redirect:prefix","redirect:suffix","all of the mentioned"],"ans":"a","explanation":"Now the resource bundle views.properties should only contain the views that can\u2019t be resolved by InternalResourceViewResolver (e.g., the redirect views)."},{"q":"Properties used to determine the correct content and type for a certain web requests.","opt":["The URL extension provided in a request","The HTTP Accept header","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"When a request is received for a web application, it contains a series of properties that allow the processing framework, in this case Spring MVC, to determine the correct content and type to return to the requesting party."},{"q":"Inspection of header is done by which of the following.","opt":["InternalViewResolver","ContentNegotiatingViewResolver","ContentNegotiating","InternalResolver"],"ans":"b","explanation":"Inspecting HTTP Accept headers in a controller can be a messy process. So Spring MVC supports the inspection of headers through the ContentNegotiatingViewResolver."},{"q":"ContentNegotiatingViewResolver resolver configuration sets up the resolver to have the highest priority among all resolvers.","opt":["True","False"],"ans":"a","explanation":"It\u2019s necessary to make the content negotiating resolver work."},{"q":"The ContentNegotiatingViewResolver resolver first determines the media type for a request based on which of the following criteria?","opt":["It checks a request path extension","If a request path has an extension but no match can be found in the default mediaTypes section of the ContentNegotiatingViewResolver bean","If no extension is present in a request path, the HTTP Accept header of the request is used","All of the mentioned"],"ans":"d","explanation":"It checks a request path extension (e.g., .html, .xml, or .pdf) against the default"},{"q":"In a Spring MVC application, you can register one or more exception resolver beans in the web application context to resolve uncaught exceptions.","opt":["True","False"],"ans":"a","explanation":"These beans have to implement the HandlerExceptionResolver interface for DispatcherServlet to auto-detect them."},{"q":"To configure the exception mappings in the web application context.","opt":["SimpleMappingExceptionResolver","ExceptionResolver","ExceptionViewResolver","None of the mentioned"],"ans":"a","explanation":"Spring MVC comes with the exception resolver SimpleMappingExceptionResolver for you to configure the exception mappings in the web application context."},{"q":"Annotation which allows a controller\u2019s field to be assigned using Spring Expression Language(SpEL)","opt":["@Value","@After","@Default","@None"],"ans":"a","explanation":"You can use the @Value annotation along with SpEL to query beans present in an application\u2019s context and extract values to help you initialize controller fields."},{"q":"SpEL statements are recognizable.","opt":["True","False"],"ans":"a","explanation":"They use a notation in the form \u201c#{ SpEL statement }\u201d."},{"q":"Tag, used to define a location in which to place errors in case a form.","opt":["form","form:GET","form:POST","form:errors"],"ans":"d","explanation":"You can find the form:errors tag, used to define a location in which to place errors in case a form does not meet the rules set forth by a controller."},{"q":"A bean can be requested by:-","opt":["getBean method","reference from another bean using autowiring, property etc","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"When a bean is requested by the getBean() method or a reference from other beans, Spring will decide which bean instance should be returned according to the bean scope."},{"q":"Which attribute is used to set the scope of the bean?","opt":["setScope","scope","getScope","none of the mentioned"],"ans":"b","explanation":"Scope attribute defines the scope of a bean."},{"q":"Which one is the default scope of the beans?","opt":["Prototype","Session","Request","Singleton"],"ans":"d","explanation":"This unique bean instance will be returned for all subsequent getBean() calls and bean references."},{"q":"Which scope creates a new bean instance each time when requested?","opt":["Singleton","Prototype","Session","Request"],"ans":"b","explanation":"Creates a new bean instance each time when requested."},{"q":"Session Creates a single bean instance per HTTP request, only valid in the context of a web application?","opt":["True","False"],"ans":"b","explanation":"Session Creates a single bean instance per HTTP session, only valid in the context of a web application."},{"q":"Which of the following are considered valid beans?","opt":["Singleton","Prototype","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"In Spring 1.x, singleton and prototype are the only two valid bean scopes, and they are specified by the singleton attribute (i.e., singleton=\u201dtrue\u201d or singleton=\u201dfalse\u201d), not the scope attribute."},{"q":"What will be the output?<br>public class ShoppingCart <br>{<br>    private List<Product> items = new ArrayList<Product>();<br>    public void addItem(Product item) <br>    {<br>       items.add(item);<br>    }<br>    public List<Product> getItems() <br>    {<br>       return items;<br>    }<br>}<br>Â <br>   <beans ...><br>\t<bean id=\"aaa\" class=\"com.shop.Battery\"><br>\t<property name=\"name\" value=\"AAA\" /><br>\t<property name=\"price\" value=\"2.5\" /><br>\t<\/bean><br>\t<bean id=\"cdrw\" class=\"com.shop.Disc\"><br>\t<property name=\"name\" value=\"CD-RW\" /><br>\t<property name=\"price\" value=\"1.5\" /><br>\t<\/bean><br>\t<bean id=\"dvdrw\" class=\"com.shop.Disc\"><br>\t<property name=\"name\" value=\"DVD-RW\" /><br>\t<property name=\"price\" value=\"3.0\" /><br>\t<\/bean><br>\t<bean id=\"shoppingCart\" class=\"com.shop.ShoppingCart\" /><br>   <\/beans><br>Â <br>   import org.springframework.context.ApplicationContext;<br>   import org.springframework.context.support.ClassPathXmlApplicationContext;<br>   public class Main <br>   {<br>\tpublic static void main(String[] args) {<br>\tApplicationContext context =<br>\tnew ClassPathXmlApplicationContext(\"beans.xml\");<br>\tProduct aaa = (Product) context.getBean(\"aaa\");<br>\tProduct cdrw = (Product) context.getBean(\"cdrw\");<br>\tProduct dvdrw = (Product) context.getBean(\"dvdrw\");<br>\tShoppingCart cart1 = (ShoppingCart) context.getBean(\"shoppingCart\");<br>\tcart1.addItem(aaa);<br>\tcart1.addItem(cdrw);<br>\tSystem.out.println(\"Shopping cart 1 contains \" + cart1.getItems());<br>\tShoppingCart cart2 = (ShoppingCart) context.getBean(\"shoppingCart\");<br>\tcart2.addItem(dvdrw);<br>\tSystem.out.println(\"Shopping cart 2 contains \" + cart2.getItems());<br>\t}<br>   }","opt":["Shopping cart 1 contains (AAA 2.5, CD-RW 1.5)","Shopping cart 1 contains (AAA 2.5, CD-RW 1.5)","BeanCreationException","None of the mentioned"],"ans":"a","explanation":"Since the default scope is singleton, so items added by first bean instantiated will be used again by same bean if instantiated again."},{"q":"In above question if scope of shoppingCart named bean is prototype, then what will be the output?<br>What will be the output?","opt":["Shopping cart 1 contains (AAA 2.5, CD-RW 1.5)","Shopping cart 1 contains (AAA 2.5, CD-RW 1.5)","BeanCreationException","None of the mentioned"],"ans":"b","explanation":"Since the default scope is prototype, so items added by first bean instantiated will be removed by same bean if instantiated again, and will add new items listed."},{"q":"Which interface is used to perform initialization of beans?","opt":["InitializingBean","Disposablebean","None of the mentioned","All of the mentioned"],"ans":"a","explanation":"Spring allows your bean to perform initialization callback methods afterPropertiesSet() by implementing the InitializingBean and interfaces."},{"q":"Which interface is used to perform destruction of beans?","opt":["InitializingBean","Disposablebean","None of the mentioned","All of the mentioned"],"ans":"b","explanation":"Spring allows your bean to perform destroy callback methods destroy() by implementing the DisposableBean and interfaces."},{"q":"Alternate way of initialization method is:-","opt":["init-method attribute","afterPropertiesSet","destroy-method attribute","none of the mentioned"],"ans":"a","explanation":"A better approach of specifying the initialization callback methods is by setting the init-method attributes in your bean declaration."},{"q":"Alternate way of destruction method is:-","opt":["init-method attribute","afterPropertiesSet","destroy-method attribute","none of the mentioned"],"ans":"c","explanation":"A better approach of specifying the destroy callback methods is by setting the destroy-method attributes in your bean declaration."},{"q":"Which annotation is used as a substitute of initialization method?","opt":["@PostConstruct","@PreDestroy","None of the mentioned","All of the mentioned","@PostConstruct","@PreDestroy","None of the mentioned","All of the mentioned"],"ans":"b","explanation":"Using JSR annotation."},{"q":"Which configuration can be used for Dependency Injection?","opt":["XML Configuration","Annotation Configuration","Java Based Configuration","All of the mentioned"],"ans":"d","explanation":"All of the above mentioned can be used for Dependency Injection."},{"q":"To validate Java beans in a web application using annotations.","opt":["XML","Java Based","JAR-303 standard","All of the mentioned"],"ans":"d","explanation":"You can validate Java beans in a web application using annotations based on the JSR-303 standard."},{"q":"JSR-303 or bean validation can access beans through annotations.","opt":["True","False"],"ans":"a","explanation":"JSR-303 or bean validation is a specification whose objective is to standardize the validation of Java beans through annotations."},{"q":"For validating beans Spring supports.","opt":["ad-hoc technique","jsr-303","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"This requires you to extend one of the Spring framework\u2019s classes to create a validator class for a particular type of Java bean."},{"q":"JSR-303 can\u2019t access java beans directly.","opt":["True","False"],"ans":"b","explanation":"The objective of the JSR-303 standard is to use annotations directly in a Java bean class."},{"q":"Annotation which indicates a field cannot be a null.","opt":["@NotNULL","@NotNull","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"The @NotNull annotation, which indicates a field cannot be null ."},{"q":"Annotation used to indicate a field has to have a minimum of 2 characters.","opt":["@NotNull","@Size","@MaxSize","@size"],"ans":"b","explanation":"@Size annotation used to indicate a field has to have a minimum of 2 characters."},{"q":"Annotation which receives a value in the form regexp=\u201d.+@.+\\\\.[a-z]+\u201d.","opt":["@Pattern","@EmailRecognizer","@Email","@Null"],"ans":"a","explanation":"@Pattern annotation receives a value in the form regexp=\u201d.+@.+\\\\.[a-z]+\u201d."},{"q":"A field named validator is of type.","opt":["javax.validation.Validator","javax.validation.ValidatorFactory","javax.validation.ValidatorFactor","none of the mentioned"],"ans":"a","explanation":"The first addition to the controller is a field named validator of the type javax.validation.Validator."},{"q":"Validator field is not assigned to any bean, but rather a factory class of the type.","opt":["javax.validation.Validator","javax.validation.ValidatorFactory","javax.validation.ValidatorFactor","none of the mentioned"],"ans":"b","explanation":"This is how JSR-303 validation works. The assignment process is done inside the controller\u2019s constructor."},{"q":"To hold any errors detected from validating the instance of beans.","opt":["javax.validation.Validator","javax.validation.ValidatorFactory","javax.validation.ValidatorFactor","javax.validation.ConstraintViolation"],"ans":"d","explanation":"Set of the type javax.validation.ConstraintViolation to hold any errors detected from validating the instance of the Person object."},{"q":"To use JSR-303 bean validation in a web application, dependencies to be added in maven.","opt":["javax.validation","org.hibernate","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"you must add above mentioned dependencies to an implementation to your CLASSPATH."},{"q":"Spring doesn\u2019t cope up with pdf and excel views.","opt":["True","False"],"ans":"b","explanation":"Spring integrates the generation of Excel and PDF files into its MVC framework."},{"q":"Spring MVC supports generating Excel files using which of the following libraries.","opt":["Apache POI library","JExcelAPI library","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Spring MVC supports generating Excel files using either the Apache POI library (http://poi.apache.org/) or the JExcelAPI library (http://jexcelapi.sourceforge.net/)."},{"q":"The view classes for Excel view is/are:-","opt":["AbstractExcelView","AbstractJExcelView","None of the mentioned","All of the mentioned"],"ans":"d","explanation":"The corresponding view classes are AbstractExcelView and AbstractJExcelView."},{"q":"Spring MVC supports generating PDF files using which of the following libraries.","opt":["iText library","iJText library","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"PDF files are generated by the iText library (http://www.lowagie.com/iText/), and the corresponding view class is AbstractPdfView."},{"q":"The endpoint URL attribute defines where service is mounted.","opt":["endpoint URL","endpoint","endpoint service","none of the mentioned"],"ans":"a","explanation":"The endpoint URL attribute defines where we should expect this service to be mounted."},{"q":"To keep our code as ready-to-deploy as possible.","opt":["parameterize the URL of the service in the client","add an entry to your /etc/hosts file on Unix derivatives or, on Windows, to your C:\\WINDOWS\\system32\\drivers\\etc\\hosts","none of the mentioned","all of the mentioned"],"ans":"d","explanation":"To keep our code as ready-to-deploy as possible, you should parameterize the URL of the service in the client. Alternatively, if you know the domain name for your application, you might add an entry to your /etc/hosts file on Unix derivatives or, on Windows, to your C:\\WINDOWS\\system32\\drivers\\etc\\hosts file mapping 127.0.0.1 to your target domain."},{"q":"Spring BlazeDS creates existing Spring beans as AMF endpoints.","opt":["True","False"],"ans":"a","explanation":"Spring BlazeDS lets you expose existing Spring beans as AMF endpoints."},{"q":"The service, which will simply fetch all the items that are for auction and return the description.","opt":["SpringBlaze DS","SpringFlex","EventSpring","All of the mentioned"],"ans":"a","explanation":"Use Spring BlazeDS to set up a simple service and demonstrate its invocation from the client\u2014a simple auction application that we\u2019ll build on in subsequent recipes."},{"q":"To keep the code simpler.","opt":["Hibernate","Backing datastore","ConcurrentSkipListSet","None of the mentioned"],"ans":"c","explanation":"We\u2019re not using Hibernate or any backing datastore to keep the code simpler. Instead, the service uses a ConcurrentSkipListSet instance variable."},{"q":"Method which takes parameters required to describe a bid and creates it.","opt":["bid","acceptBid","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"The bid method takes parameters required to describe a bid and creates it."},{"q":"To notify other viewers of any new items posted.","opt":["javax.jms.Topic","jms","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"We want to notify other viewers of any new items posted, we use JMS and a javax.jms.Topic."},{"q":"Method, which is called after the component\u2019s been configured by Spring","opt":["setupItems","setUp","setupFakeItems","all of the mentioned"],"ans":"c","explanation":"We spend some time constructing seed data in the setupFakeItems method, which is called after the component\u2019s been configured by Spring."},{"q":"To configure the standard Spring bean.","opt":["context:component-scan","context:scan","context:component","none of the mentioned"],"ans":"a","explanation":"There are two parts to the configuration: the standard services configuration, and the Spring BlazeDS configuration. We\u2019ve already gone a long way to configuring the standard Spring beans with the addition of the context:component-scan element."},{"q":"In Spring context XML for the message broker, we have.","opt":["flex","flex:message-broker","all of the mentioned","none of the mentioned"],"ans":"b","explanation":"Recall that in our Spring context XML for the message broker, we had a flex:message-broker element, in which we had a flex:message-service element."},{"q":"flex:message-service element had an attribute.","opt":["default-channels","default-channel","default","default-types"],"ans":"a","explanation":"The flex:message-service element had an attribute, default-channels."},{"q":"To use a different channel they\u2019d like to use when communicating with the server.","opt":["flex:remoting-destination","flex:remote","flex:destination","flex:default-channels"],"ans":"a","explanation":"If, however, you\u2019d like to use a different channel, then you may override it on the flex:remoting-destination element."},{"q":"In ActionScript, \u201cdynamic\u201d means that you can arbitrarily add or reference fields only.","opt":["True","False"],"ans":"b","explanation":"In ActionScript, \u201cdynamic\u201d means that you can arbitrarily add or reference fields and methods on an object without type information."},{"q":"ActionScript treats a class just like you could in the standard JavaScript.","opt":["True","False"],"ans":"a","explanation":"In the browser, this behavior is called expando properties and these are useful for us because Flash doesn\u2019t have any built-in way of knowing (and surfacing to tools like your IDE\u2019s auto-completion) the type information of the returned object."},{"q":"Spring BlazeDS works with Spring Integration to let you bind any arbitrary endpoint.","opt":["True","False"],"ans":"a","explanation":"Spring BlazeDS works with Spring Integration to let you bind any arbitrary endpoint (be it an e-mail server, a Twitter user\u2019s update feed, an FTP server, a file system, or anything for which you want to write an adapter) to the Spring BlazeDS messaging facilities."},{"q":"IntelliJ IDEA product, versions 8 and 9, supports:-","opt":["Flex","AIR","None of the mentioned","All of the mentioned"],"ans":"d","explanation":"Particularly, IntelliJ IDEA product, versions 8 and 9, support Flex and AIR development with aplomb."},{"q":"Flex is that it is, technically, a library implemented on top of the middleware.","opt":["True","False"],"ans":"b","explanation":"Flex is, technically, a library implemented on top of the Flash virtual machine."},{"q":"In Flash, the displayed area where animation and rendering occurs.","opt":["Stage","Animation","Stagery","State"],"ans":"a","explanation":"In Flash, the displayed area where animation and rendering occurs is called the stage."},{"q":"Flex uses a language called ActionScript 3.0.","opt":["True","False"],"ans":"b","explanation":"Flash uses a language called ActionScript 3.0."},{"q":"ActionScript code pages end in .as, and ActionScript binaries are .sf files.","opt":["True","False"],"ans":"b","explanation":"ActionScript code pages end in .as, and ActionScript binaries are .swf files."},{"q":"Linkable libraries have the extension.","opt":[".swc",".dll",".so","none of the mentioned"],"ans":"a","explanation":"You can use ActionScript tools to build linkable libraries, much like a .dll on Windows, or a .so on Linux. These linkable libraries have the extension .swc."},{"q":"The source artifacts of a Flex application are:-","opt":["ActionScript files (ending in .as)","ActionScript files (ending in .mxml)","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"The two source artifacts of a Flex application are the ActionScript files (ending in .as) and the .mxml files."},{"q":"XML variant that describe the UI components and provide a DOM.","opt":["AS files","MXML files","XML Files","All of the mentioned"],"ans":"b","explanation":"MXML files are an XML variant that describe the UI components and provide a DOM."},{"q":"MXML files support a limited form of expression language binding","opt":["True","False"],"ans":"a","explanation":"Limited when compared to the EL support in frameworks like Tapestry or JSF, anyway."},{"q":"Outermost tag in Flex.","opt":["mx:Application","mx:WindowedApplication","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"In the case of Flex applications, the outermost tag is the mx:Application tag."},{"q":"Outermost tag in AIR.","opt":["mx:Application","mx:WindowedApplication","all of the mentioned","none of the mentioned"],"ans":"b","explanation":"In the case of AIR applications, the outermost tag is the mx:WindowedApplication tag."},{"q":"As soon as the application has been loaded and all the objects configured, an event will be fired.","opt":["applicationEvent","applicationComplete","eventConfigure","eventComplete"],"ans":"b","explanation":"Just as you can in the browser, you have two choices for listening to events in Flex: programmatic registration and through MXML attributes on the component that fires the event."},{"q":"JavaScript library dynamically adds the plug-in content to the page.","opt":["True","False"],"ans":"a","explanation":"Because of this property, it triggered the \u201cDynamic Content\u201d warning in Internet Explorer 6 for a few years."},{"q":"JavaScript library dynamically generates.","opt":["object","plugin","FlashVars","all of the mentioned","flash.external.ExternalInterface","flash.external.External","flash.external.ExternalInterface","none of the mentioned"],"ans":"a","explanation":"To talk to the containing HTML page, you can use the flash.external.ExternalInterface class. This class defines two static methods, call() (which lets the Flex application talk to the host) and addCallback() (which lets the host talk to Flex)."},{"q":"Payload format for REST services.","opt":["RSS","Atom","JSON","All of the mentioned"],"ans":"d","explanation":"JSON, in addition to RSS and Atom, has blossomed into a favorite payload format for REST services."},{"q":"All REST service payloads rely on XML markup.","opt":["True","False"],"ans":"b","explanation":"JSON is different in the sense that its content is a special notation based on the JavaScript language."},{"q":"Class that forms part of Spring to apply JSON content.","opt":["MappingJacksonJsonView","MappingJsonView","MappingJacksonJson","JsonView"],"ans":"a","explanation":"In addition to relying on Spring REST support, we will also use the MappingJacksonJsonView class that forms part of Spring to facilitate the publication of JSON content."},{"q":"The MappingJacksonJsonView class depends on Jackson JSON processor library.","opt":["org.codehaus.jackson","jackson-mapper-asl","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"The MappingJacksonJsonView class depends on the presence of the Jackson JSON processor library which can be downloaded at http://wiki.fasterxml.com/JacksonDownload."},{"q":"Information you wish to publishas a JSON Object can be located in a RDBMS or text file, accessed through JDBC or ORM.","opt":["True","False"],"ans":"a","explanation":"This information can be located in a RDBMS or text file, accessed through JDBC or ORM, inclusively be part of a Spring bean or some other type of construct."},{"q":"JSON payload consists of text and separators like.","opt":["{ , }","( , )",":","All of the mentioned"],"ans":"d","explanation":"a JSON payload consists of text and separators like { , }, ( , ), : and \u201c."},{"q":"To access JSON in a Spring application, library used is:-","opt":["JSON-LIB","SpringJSON-lib","JSON-lib","None of the mentioned"],"ans":"a","explanation":"Though it\u2019s technically possible to access JSON in a Spring application (i.e., on the server side), using a third-party Java library like JSON-LIB (http://json-lib.sourceforge.net/ )."},{"q":"You are often better served accessing and manipulating REST services with XML payloads in Spring applications.","opt":["True","False"],"ans":"a","explanation":"The Java platform\u2019s native support for XML, in addition to the fact that XML is more intuitive and does not have the same processing limitations as browsers."},{"q":"Class which is capable of performing a multitude of operations on REST services.","opt":["RestTemplate","XPathTemplate","XMLTemplate","JavaTemplate"],"ans":"a","explanation":"Spring RestTemplate class is capable of performing a multitude of operations on REST services in order for their payloads to be used inside Spring applications, processing elaborate XML responses requires using a set of approaches beyond those of this last class."},{"q":"XML query language for selecting nodes from an XML document.","opt":["XPathTemplate","XPath","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"XPath\u2014an XML query language for selecting nodes from an XML document\u2014 knowledge about Spring HttpConverterMessage, as well as supporting facilities like Spring XPathTemplate."},{"q":"The Handler method assigns the returning XML payload to a String.","opt":["True","False"],"ans":"a","explanation":"The handler method makes use of the getForObject method of the RestTemplate class and assigns the returning XML payload to a String, which is then added to the handler method Model object."},{"q":"To extract and manipulate payloads in Spring REST in a format other than String.","opt":["HttpConverter","HttpMessage","HttpConverterMessage","None of the mentioned"],"ans":"c","explanation":"All objects that are returned and inclusively passed to the methods belonging to the RestTemplate class are converted to and from HTTP messages using a class which implements the HttpConverterMessage interface."},{"q":"To write your own converters relying on the MarshallingHttpMessageConverter interface that would allow the use of custom marshallers.","opt":["messageConverters","messageConvert","converters","convertersMessage"],"ans":"a","explanation":"Using custom converters requires registering them with the messageConverters bean property in a Spring application."},{"q":"To override the default implementations registered with the RestTemplate class.","opt":["messageConverters","messageConvert","converters","convertersMessage"],"ans":"a","explanation":"It\u2019s also possible to override the default implementations registered with the RestTemplate class using the same messageConverters bean property."},{"q":"To extract and manipulate the contents of a REST service payload.","opt":["messageConverters","StreamSource class","converters","convertersMessage"],"ans":"b","explanation":"It becomes easier to extract and manipulate the contents of a REST service payload since it can be done through the more flexible StreamSource class."},{"q":"To publish a REST service with Spring.","opt":["publishing an application\u2019s data as a REST service","accessing data from third-party REST services","none of the mentioned","all of the mentioned"],"ans":"d","explanation":"One involves publishing an application\u2019s data as a REST service, the other one involves accessing data from third-party REST services to be used in an application."},{"q":"Publishing an application\u2019s data as a REST service requires.","opt":["@RequestMapping","@PathVariable","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Publishing an application\u2019s data as a REST service revolves around the use of the Spring MVC annotations @RequestMapping and @PathVariable."},{"q":"Spring supports a series of mechanisms to generate a REST service payload.","opt":["True","False"],"ans":"a","explanation":"This recipe will explore the simplest mechanism, which involves the use of Spring\u2019s MarshallingView class."},{"q":"Annotation added as an input parameter to the handler method.","opt":["@PathVariable","@Path","@PathLocale","None of the mentioned"],"ans":"a","explanation":"The @PathVariable annotation is added as an input parameter to the handler method, per Spring\u2019s MVC conventions, in order for it to be used inside the handler method body."},{"q":"Notation for defining REST endpoints.","opt":["{ }","*","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"In addition to supporting the { } notation, it\u2019s also possible to use a wildcard * notation for defining REST endpoints."},{"q":"General-purpose class that allows a response to be rendered using a marshaller.","opt":["MarshallingView","Marshalling","View","All of the mentioned"],"ans":"a","explanation":"The membertemplate view is defined as a MarshallingView type, which is a general-purpose class that allows a response to be rendered using a marshaller."},{"q":"Marshalling is the process of transforming an in-memory representation of an object into a data format.a","opt":["True","False"],"ans":"a","explanation":"Therefore, for this particular case, a marshaller is charged with transforming a Member object into an XML data format."},{"q":"The marshaller used by MarshallingView belongs to one of a series of XML marshallers.","opt":["Jaxb2Marshaller","XmlBeansMarshaller","CastorMarshalle","All of the mentioned"],"ans":"d","explanation":"The marshaller used by MarshallingView belongs to one of a series of XML marshallers provided by Spring\u2014Jaxb2Marshaller. Other marshallers provided by Spring include CastorMarshaller, JibxMarshaller, XmlBeansMarshaller, and XStreamMarshaller."},{"q":"To configure Jaxb2Marshaller marshaller we require.","opt":["ClassesToBeBound","ContextPath","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"The Jaxb2Marshaller marshaller requires to be configured with either a property named classesToBeBound or contextPath."},{"q":"In the case of classesToBeBound, the classes assigned to this property, indicate the class (i.e., object) structure that is to be transformed into XML.","opt":["True","False"],"ans":"a","explanation":"The Jaxb2Marshaller marshaller requires to be configured with either a property named classesToBeBound or contextPath."},{"q":"Annotation which allows the Jaxb2Marshaller marshaller to detect a class\u2019s (i.e., object\u2019s) fields.","opt":["@XmlRootElement","@XmlRoot","@NotNull","None of the mentioned"],"ans":"a","explanation":"This annotation allows the Jaxb2Marshaller marshaller to detect a class\u2019s (i.e., object\u2019s) fields and transform them into XML data."},{"q":"Accessing a third-party REST service inside a Spring application.","opt":["RestTemplate Class","ViewResolver","InternalViewResolver","View"],"ans":"a","explanation":"Accessing a third-party REST service inside a Spring application revolves around the use of the Spring RestTemplate class."},{"q":"REST service end point comprises an address.","opt":["starts with http:// and ends with ?","starts with http:// and ends with &","no certain URL is specified","depends upon the platform used"],"ans":"a","explanation":"The structure of the REST service end point comprises an address, which starts with http:// and ends with ?, as well as a series of parameters that start with ? and are delimited by &, each represented by a key and value divided by =."},{"q":"XML tag which represents information related to a REST service request.","opt":["Result","Title","None of the mentioned","All of the mentioned"],"ans":"d","explanation":"The actual meaning of the payload is highly dependent on a REST service. In this case, the XML tags (e.g., Result, Title ) are definitions set forth by Yahoo, while the character data enclosed in each XML tag represents information related to a REST service request."},{"q":"RestTemplate class method which performs an HTTP HEAD operation.","opt":["headForHeaders(String, Object\u2026)","getForObject(String, Class, Object\u2026)","postForLocation(String, Object, Object\u2026)","postForObject(String, Object, Class, Object\u2026)"],"ans":"a","explanation":"headforHeaders() is a RestTemplate class method based on HTTP protocol request methods."},{"q":"Grails is a self-contained framework that comes with various scripts to automate the creation of Java applications.","opt":["True","False"],"ans":"a","explanation":"In this sense, you simply need to unpack the distribution and perform a few installation steps in order to create Java applications on your workstation."},{"q":"To invoke Grails operations from anywhere on your workstation.","opt":["GRAILS HOME","PATH","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"After you unpack Grails on your workstation, define two environment variables on your operating system: GRAILS HOME and PATH.This allows you to invoke Grails operations from anywhere on your workstation."},{"q":"To see Grails numerous commands.","opt":["grails help","grails -help","grails -h","help grails"],"ans":"a","explanation":"If you execute the command grails help from any directory on your workstation, you should see Grails numerous commands."},{"q":"To create a Grails application, command:-","opt":["grails create-app","grails create-app grailsappname","grails create-app default","none of the mentioned"],"ans":"b","explanation":"To create a Grails application, invoke the following command wherever you wish to create an application: grails create-app grailsappname."},{"q":"Working directories and files are placed under which directory.","opt":["User\u2019s home directory under the name.grails/grails version/.","WEB-APP","WEB-INF","None of the mentioned"],"ans":"a","explanation":"Grails also creates a series of working directories and files (i.e., not intended to be modified directly) for an application. These working directories and files are placed under a user\u2019s home directory under the name.grails/grails version/."},{"q":"Grails generates a series of files and directories which includes.","opt":["Apache Ant file(build.xml)","Apache Ivy file(ivy.xml)","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Grails generates a series of files and directories that are common in most Java applications. This includes, an Apache Ant file (build.xml) and an Apache Ivy file (ivy.xml), as well as common directories like src for placing source code files and a web-app."},{"q":"Used to define an application\u2019s properties.","opt":["application.properties","build.xml","manifest.xml","court.iml"],"ans":"a","explanation":"Used to define an application\u2019s properties, including the Grails version, servlet version, and an application\u2019s name."},{"q":"An Apache Ant script with a series of predefined tasks designed to create a Grails application.","opt":["application.properties","build.xml","manifest.xml","court.iml"],"ans":"b","explanation":"An Apache Ant script with a series of predefined tasks designed to create a Grails application."},{"q":"An XML file containing configuration parameters for an application.","opt":["application.properties","build.xml","manifest.xml","court.iml"],"ans":"d","explanation":"An XML file containing configuration parameters for an application, such as directory locations and treatment of JARs."},{"q":"An XML file containing configuration parameters for an application\u2019s deployment.","opt":["application.properties","build.xml","court.iws","court.iml"],"ans":"c","explanation":"An XML file containing configuration parameters for an application\u2019s deployment, such as web container port and project views."},{"q":"An XML file containing configuration parameters for an application\u2019s launch.","opt":["application.properties","build.xml","court.iws","court.launch"],"ans":"d","explanation":"An XML file containing configuration parameters for an application\u2019s launch, such as JVM arguments."},{"q":"An Apache Ivy configuration file used for defining repositories.","opt":["application.properties","ivysettings.xml","court.iws","court.launch"],"ans":"b","explanation":"An Apache Ivy configuration file used for defining repositories in order to download dependencies."},{"q":"A directory containing the core of an application.","opt":["application.properties","ivysettings.xml","court.iws","grails-app"],"ans":"d","explanation":"A directory containing the core of an application, which further"},{"q":"conf: A directory containing an application\u2019s configuration sources","opt":[]},{"q":"controllers: A directory containing an application\u2019s controllers files","opt":[]},{"q":"domain: A directory containing an application\u2019s domain files","opt":[]},{"q":"i18n: A directory containing an application\u2019s internationalization (i18n) files","opt":[]},{"q":"services: A directory containing an application\u2019s service files","opt":[]},{"q":"taglib: A directory containing an application\u2019s tag libraries","opt":[]},{"q":"utils: A directory containing an application\u2019s utility files","opt":[]},{"q":"views: A directory containing an application\u2019s view files","opt":[]},{"q":"An XML file containing configuration parameters for an application.","opt":["application.properties","ivysettings.xml","court.iml","court.launch"],"ans":"c","explanation":"An XML file containing configuration parameters for an application, such as directory locations and treatment of JARs."},{"q":"Some of the more popular Grails plugins follow:","opt":["App Engine","Quartz","Spring WS","All of the mentioned"],"ans":"d","explanation":""},{"q":"Classes used to describe an application\u2019s primary elements.","opt":["Domain Classes","Application","Context","View"],"ans":"a","explanation":"Domain classes are used to describe an application\u2019s primary elements and characteristics."},{"q":"In web applications, domain classes are generally the first things to be defined.","opt":["True","False"],"ans":"a","explanation":"Domain classes represent data that is saved for posterity\u2014in a permanent storage system\u2014so it interacts with controllers, as well as representing data displayed in views."},{"q":"In Grails, domain classes are placed under:-","opt":["/grails-app/WEB-INF/","/grails-app/domain/","/grails-app/domain/WEB-APP","/grails-app/"],"ans":"b","explanation":"In Grails, domain classes are placed under the /grails-app/domain/ directory."},{"q":"The creation of domain classes by executing a simple command which is:-","opt":["grails create-domain-class","grails create-domain-class domain class name","domain class name","none of the mentioned"],"ans":"b","explanation":"The creation of domain classes, like most other things in Grails, can be carried out by executing a simple command in the following form:"},{"q":"The command domain class name in creation of domain classes generates a file named domain class name.groovy.","opt":["True","False"],"ans":"a","explanation":"It generates a skeleton domain class file named domain class name.groovy inside the /grails-app/domain/ directory."},{"q":"Corresponding unit tests files are also generated for each domain class while creating domain classes.","opt":["True","False"],"ans":"a","explanation":"In addition, corresponding unit tests files are also generated for each domain class under an application\u2019s test/unit directory."},{"q":"Static field which defines constraints on the domain class.","opt":["static{}","static field{}","static constraint{}","static constraints{}"],"ans":"d","explanation":"static constraints = { }, defines constraints on the domain class."},{"q":"Declaration name which indicates that object\u2019s name field can\u2019t be blank.","opt":["blank:false","blank:true","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"The declaration name(blank:false) indicates that a Player object\u2019s name field cannot be left blank."},{"q":"A variety of constraints can be used to enforce a domain class\u2019s structure.","opt":["True","False"],"ans":"a","explanation":"Under certain circumstances, if a constraint is too elaborate, it\u2019s often incorporated within an application\u2019s controller prior to creating an object of a certain domain class."},{"q":"Command to generate the corresponding CRUD controller and views for an application\u2019s domain class.","opt":["grails create-domain-class domain class name","grails create-domain-class","grails generate-all domain class name","none of the mentioned"],"ans":"c","explanation":"You can execute the following command to generate the corresponding CRUD controller and views for an application\u2019s domain class:"},{"q":"Grails is capable of inspecting an application\u2019s domain classes and generating the corresponding controllers and views.","opt":["True","False"],"ans":"a","explanation":"Grails is capable of inspecting an application\u2019s domain classes and generating the corresponding controllers and views necessary to create, read, update, and delete instances belonging to an application\u2019s domain classes."},{"q":"Views corresponding to a controller class\u2019s CRUD operations.","opt":["create.gsp","edit.gsp","list.gsp","all of the mentioned"],"ans":"d","explanation":"Four views are created corresponding to a controller class\u2019s CRUD operations named create.gsp, edit.gsp, list.gsp, and show.gsp."},{"q":".gsp extension stands for:-","opt":["Groovy Server Pages","Groovy Service Pages","All of the mentioned","None of the mentioned"],"ans":"a","explanation":".gsp extension stands for \u201cGroovy Server Pages,\u201d which is equivalent to JavaServer Pages except it uses Groovy to declare programmatic statements instead of Java."},{"q":"Views are placed under which directory:-","opt":["app/views/","app/","grails-app/views/WEB-INF","grails-app/views/domain class"],"ans":"d","explanation":"These views are placed under an application\u2019s grails-app/views/domain class directory."},{"q":"Command to start the Grails application:-","opt":["grails run","grails start-app","grails run-app","none of the mentioned"],"ans":"c","explanation":"You can start the Grails application using grails run-app and work as an end user with the application."},{"q":"Grails applications are equipped to support internationalization.","opt":["True","False"],"ans":"a","explanation":"By default, all Grails applications are equipped to support internationalization."},{"q":"Where can you find series of *.properties files.","opt":["/grails-app/","/grails-app/i18n/","/grails-app/i18n/WEB-INF","/grails-app/i18n/WEB-APP"],"ans":"b","explanation":"Inside an application /grails-app/i18n/ folder, you can find series of *.properties files used to define messages in 12 languages."},{"q":"*.properties files allow Grails applications to display messages.","opt":["True","False"],"ans":"a","explanation":"The values declared in these *.properties files allow Grails applications to display messages based on a user\u2019s languages preferences or an application default language."},{"q":"Which locale (i.e., from an internationalization properties file) to use for a user is based on?","opt":["/grails-app/conf/spring/resource.groovy file","user\u2019s browser language preferences","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"Grails determines which locale (i.e., from an internationalization properties file) to use for a user based"},{"q":"There is no default configuration present in an application resource.groovy file.","opt":["True","False"],"ans":"a","explanation":"Since the explicit configuration of an application locale takes precedence over a user\u2019s browser language preferences, there is no default configuration present in an application resource.groovy file."},{"q":"If you want to coerce users into using a specific language locale.","opt":["/grails-app/conf/spring/resource.groovy file","/grails-app/resource.groovy file","/grails-app/spring/resource.groovy file","none of the mentioned"],"ans":"a","explanation":"You should define an explicit configuration inside an application /grails-app/conf/spring/resource.groovy file, only if you want to coerce users into using a specific language locale."},{"q":"JSP Tag which declares statements using the Groovy.","opt":["g:message","g:string","g:msg","none of the mentioned"],"ans":"a","explanation":"JSP page first imports the Groovy tag library and later declares statements using the Groovy g:message tag."},{"q":"Tag can also be used in GSP pages views.","opt":["g:message","g:string","g:msg","none of the mentioned"],"ans":"a","explanation":"The g:message tag can also be used in GSP pages views, but note that it\u2019s not necessary to import the tag library explicitly, since it\u2019s available by default on all Grails GSP pages."},{"q":"Grails uses RDBMS as a permanent storage system.","opt":["True","False"],"ans":"a","explanation":"Grails is designed to use a RDBMS as a permanent storage system."},{"q":"Grails comes preconfigured to use:-","opt":["MySql","PostgreSQL","Access","HSQLDB"],"ans":"d","explanation":"HSQLDB is a database that is automatically started by Grails upon deploying an application (i.e., executing grails run-app)."},{"q":"HSQLDB is a non-volatile database.","opt":["True","False"],"ans":"b","explanation":"Every time an application is restarted in development and testing environments, HSQLDB loses all its data since it\u2019s configured to operate in memory."},{"q":"Configure Grails to use another RDBMS by modifying:-","opt":["Data.groovy","DataSource.groovy","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"You can configure Grails to use another RDBMS by modifying an application DataSource.groovy file, located under the grails-app/conf directory."},{"q":"Grails relies on the standard Java JDBC notation to specify RDBMS.","opt":["True","False"],"ans":"a","explanation":"Grails relies on the standard Java JDBC notation to specify RDBMS connection parameters, as well as on the corresponding JDBC drivers provided by each RDBMS vendor, to create, read, update, and delete information."},{"q":"DataSource properties, Class name for the JDBC driver.","opt":["driverClassName","dataSource properties","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"dataSource properties for configuring a RDBMS.:-"},{"q":"Indicates whether to enable SQL logging.","opt":["driverClassName","dataSource properties","logSql","none of the mentioned"],"ans":"c","explanation":"dataSource properties for configuring a RDBMS.:-"},{"q":"To perform its logging operations.","opt":["Log4J","LogingJ","JLog","None of the mentioned"],"ans":"a","explanation":"Grails relies on Java Log4J to perform its logging operations."},{"q":"Log4J configuration parameters are specified inside:-","opt":["Config.groovy","Conf.groovy","Log.groovy","None of the mentioned"],"ans":"a","explanation":"Log4J configuration parameters are specified inside the Config.groovy file."},{"q":"Grails application logging can be configured using:-","opt":["creating custom appenders","logging levels","console output","all of the mentioned"],"ans":"d","explanation":"Given Log4J\u2019s logging versatility, a Grails application logging can be configured in various ways. This includes creating custom appenders, logging levels, console output, logging by artifacts and custom logging layouts."},{"q":"Any logging operation occurring at any of the cited packages will be logged.","opt":["True","False"],"ans":"a","explanation":"The notation follows the convention logging level \u2018package name\u2019. This implies that any logging operation occurring at any of the cited packages will be logged so long as it occurs within the specified logging level or a more severe level."},{"q":"In Log4J parlance, each package is known as:-","opt":["parlance","logger","all of the mentioned","none of the mentioned"],"ans":"b","explanation":"In Log4J parlance, each package is known as a logger."},{"q":"Log4J also has the following logging level:-","opt":["fatal","error","warning","all of the mentioned"],"ans":"d","explanation":"Log4J also has the following logging levels:"},{"q":"By default, all logging message are sent to the stacktrace.groovy file.","opt":["True","False"],"ans":"a","explanation":"By default, all logging message are sent to the stacktrace.log file located under an application\u2019s root directory."},{"q":"To offer versatile logging functionality:-","opt":["loggers","appenders","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"Log4J relies on appenders and loggers to offer versatile logging functionality."},{"q":"A location where logging information is sent.","opt":["appender","logger","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"An appender is a location where logging information is sent (e.g., a file or standard output)."},{"q":"A location where logging information is generated.","opt":["appender","logger","all of the mentioned","none of the mentioned"],"ans":"b","explanation":"A logger is a location where logging information is generated (e.g., a class or package)."},{"q":"The default Log4J logger can be customized in a Grails application.","opt":["True","False"],"ans":"a","explanation":"The default Log4J logger can be customized in a Grails application using the following statement within the log4j { } section of an application\u2019s Config.groovy file:"},{"q":"An appender that logs to a JDBC connection.","opt":["jdbc","console","file","rollingFile"],"ans":"a","explanation":"There are four types of appenders available by default:"},{"q":"Command for running tests in Grails.","opt":["grails test-app","grails test","grails test-app domain class","none of the mentioned"],"ans":"a","explanation":"Running tests in Grails is as simple as executing the grails test-app command from an application\u2019s root directory."},{"q":"Unit tests are designed to validate the logic contained in a single domain class.","opt":["True","False"],"ans":"a","explanation":"Because of this fact, besides automating the execution of such tests, Grails provides no type of bootstrapping properties for performing these type of tests."},{"q":"Method creates a mock object from a domain class.","opt":["mockForConstraintsTests","mockForConstraints","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"This method creates a mock object from a domain class that is used to access a class\u2019s dynamic methods (e.g., validate) needed to perform unit tests."},{"q":"A Grails view can contain:-","opt":["HTML Tags","GSP or JSTL Tags","Groovy or Java code","All of the mentioned"],"ans":"d","explanation":"A Grails view can contain display elements (e.g., HTML tags), business logic elements (e.g., GSP or JSTL tags) or straightforward Groovy or Java code to achieve its display objectives."},{"q":"A view can require a unique combination of display elements and business logic.","opt":["True","False"],"ans":"a","explanation":"To simplify the inclusion of such a combination and facilitate its reuse in multiple views a custom tag can be used."},{"q":"To create custom tags.","opt":["grails create tag","grails create-tag-lib tag-lib-name","all of the mentioned","none of the mentioned"],"ans":"b","explanation":"To create custom tags, you can use the grails create-tag-lib tag-lib-name command."},{"q":"grails create-tag-lib tag-lib-name command creates a custom tag library under:-","opt":["/grails-app/tag/","/grails-app/","/grails-app/tag-lib/","none of the mentioned"],"ans":"c","explanation":"This command creates a skeleton class for a custom tag library under an application\u2019s /grails-app/tag-lib/ directory."},{"q":"In order for this custom tag to function properly in JSP, it\u2019s necessary to add it to the corresponding Tag Library Definition (TLD) grails.tld.","opt":["True","False"],"ans":"a","explanation":"TLDs are located in an application\u2019s /web-app/WEB-INF/tld/ directory."},{"q":"Custom tags can also rely on input parameters.","opt":["True","False"],"ans":"a","explanation":"Custom tags can also rely on input parameters passed in as tag attributes to perform a backing class\u2019s logic."},{"q":"By default, Grails assigns custom tags to:-","opt":["g: namespace","f: namespace","j: namespace","all of the mentioned"],"ans":"a","explanation":"Finally, a word about the namespace used in Grails custom tags\u2014by default, Grails assigns custom tags to the g: namespace."},{"q":"By default, Grails applies a global layout to display an application\u2019s content.","opt":["True","False"],"ans":"a","explanation":"This allows views to have a minimal set of display elements (e.g., HTML, CSS, and JavaScript) and inherit their layout behavior from a separate location."},{"q":"Grails doesn\u2019t supports the concept of templates.","opt":["True","False"],"ans":"b","explanation":"Grails also supports the concept of templates, which serve the same purpose as layouts, except applied at a more granular level. In addition, it\u2019s also possible to use templates for rendering a controller\u2019s output, instead of a view as in most controllers."},{"q":"Where is subdirectory called layouts located, containing the layouts available to an application?","opt":["/grails-app/view/","/grails-app/","/grails-app/view/WEB-INF","none of the mentioned"],"ans":"a","explanation":"Inside the /grails-app/view/ directory of an application, you can find a subdirectory called layouts, containing the layouts available to an application."},{"q":"Tag is used to define the contents of a layout\u2019s title section.","opt":["g:layoutTitle","g:layoutHead","g:layoutBody","g:layoutMeta"],"ans":"a","explanation":"The g:layoutTitle tag is used to define the contents of a layout\u2019s title section."},{"q":"Tag is used to define the contents of a layout\u2019s head section.","opt":["g:layoutTitle","g:layoutHead","g:layoutBody","g:layoutMeta"],"ans":"b","explanation":"Any values declared in the head of a view head inheriting this layout are placed in this location upon rendering."},{"q":"Tag allows any view inheriting this layout automatic access to JavaScript libraries.","opt":["g:javascript library=\u201dapplication\u201d","g:layoutHead","g:layoutBody","g:layoutMeta"],"ans":"a","explanation":"Upon rendering, this element is transformed into the following: script type=\u201dtext/javascript\u201d src=\u201d/court/js/application.js\u201d /script."},{"q":"A view\u2019s body content is inside the:-","opt":["g:javascript library=\u201dapplication\u201d","g:layoutHead","g:layoutBody","g:layoutMeta"],"ans":"c","explanation":"Grails automatically sorts out the substitution process by placing a view\u2019s title content inside the g:layoutTitle tag, a view\u2019s body content inside the g:layoutBody / tag, and so on."},{"q":"GORM dynamic finder comparators:-","opt":["InList","LessThan","LessThanEquals","All of the mentioned"],"ans":"d","explanation":"GORM comparator Query"},{"q":"Method used to process bean before initialization callback","opt":["scope","postProcessAfterInitialization()","postProcessBeforeInitialization()","it\u2019s own constructor"],"ans":"c","explanation":"You can process every bean before initialization callback method by implementing the postProcessBeforeInitialization() and methods."},{"q":"Method used to process bean after initialization callback","opt":["scope","getBean","postProcessAfterInitialization()","it\u2019s own constructor"],"ans":"c","explanation":"You can process every bean after initialization callback method by implementing the postProcessAfterInitialization() and methods."},{"q":"Which method is used to gracefully shutdown all the bean processes after closing the spring container?","opt":["shutdownHook","destroy method","none of the mentioned","all of the mentioned"],"ans":"a","explanation":"ShutdownHook method gracefully shuts down each bean process before closing the container."},{"q":"Which method is used to register BeanPostProcessor?","opt":["addBeanPostProcessors","registerBeanPostProcessors","addBeanProcessors","none of the mentioned"],"ans":"a","explanation":"When using a bean factory as your IoC container, bean post processors can only be registered programmatically, or more accurately, via the addBeanPostProcessor() method."},{"q":"In application context, BeanPost Processors are registered using addBeanPostProcessors method","opt":["True","False"],"ans":"b","explanation":"Using an application context, the registration will be as simple as declaring an instance of the processor in the bean configuration file."},{"q":"Which Interface for bean Post Processor is used to distinguish between checked beans","opt":["StorageConfig","Marker","None of the mentioned","All of the mentioned"],"ans":"a","explanation":"First of all, for the bean post processor to distinguish which beans should be checked, you create a marker interface, StorageConfig, for your target beans to implement."},{"q":"Which method of bean post processors is used to check path existence","opt":["getPath","setPath","value","auto-wiring"],"ans":"a","explanation":"Moreover, for your bean post processor to check for path existence, it must be able to access the path property. This can be done by adding the getPath() method to this interface."},{"q":"It\u2019s possible to replace the original bean instance with a brand-new instance in your bean post processor","opt":["True","False"],"ans":"a","explanation":"Both the postProcessBeforeInitialization() and postProcessAfterInitialization() methods must return an instance for the bean being processed."},{"q":"PathCheckingBeanPostProcessor will not work properly in case of:-","opt":["XML Configuration","Java based Configuration","JSR Annotation","None of the mentioned"],"ans":"c","explanation":"This is because your bean post processor has a lower priority than CommonAnnotationBeanPostProcessor by default. As a result, the initialization method will be called before your path checking."},{"q":"Which bean factory post processor externalizes part of the bean configurations into a properties file","opt":["PropertyPlaceholderConfigurer","PropertyPlaceholderRegister","PropertyGetPath","None of the mentioned"],"ans":"a","explanation":"Spring comes with a bean factory post processor called PropertyPlaceholderConfigurer for you to externalize part of the bean configurations into a properties file."},{"q":"Which interface defines methods for resolving text messages","opt":["MessageSource","ApplicationListener","ApplicationContextListener","TextEvent"],"ans":"a","explanation":"MessageSource is an interface that defines several methods for resolving messages."},{"q":"Which interface is used to listen to certain events","opt":["ApplicationListener","ContextListener","EventListener","None of the mentioned"],"ans":"a","explanation":"For a bean to listen to certain events, it must implement the ApplicationListener interface and handle the events in the onApplicationEvent() method."},{"q":"Which method is used to publish your own custom event","opt":["contextPublish","publishEvent","applicationEventPublish","addEvent"],"ans":"b","explanation":"Any bean can publish an event by calling an application event publisher\u2019s publishEvent() method."},{"q":"Which of the following is a well known recognized event","opt":["ContextCloasedEvemt","ContextRefreshedEvent","RequestHandledEvent","All of the mentioned"],"ans":"d","explanation":"The application context itself will also publish container events such as ContextClosedEvent, ContextRefreshedEvent, and RequestHandledEvent."},{"q":"Which event is provoked when web request comes into action","opt":["ContextClosedEvent","ContextStoppedEvent","SessionEvent","RequestHandledEvent"],"ans":"d","explanation":"Web request events are handled by RequestHandledEvent."},{"q":"DispatcherServtlet dispatches portlet requests to appropriate handlers that handle the requests.","opt":["True","False"],"ans":"b","explanation":"DispatcherPortlet. It dispatches portlet requests to appropriate handlers that handle the requests. It acts as the front controller of Spring Portlet MVC, and every portlet request must go through it so that it can manage the entire request-handling process."},{"q":"Maps each request to a handler through one or more handler mapping beans.","opt":["DispatcherServlet","DispatcherPortlet","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"Once it has picked an appropriate handler, it will invoke this handler to handle the request."},{"q":"In portlets, there are URLs:-","opt":["render","action","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"In portlets, there are two types of URLs: render URLs and action URLs."},{"q":"When a user triggers a render URL, the portlet container will ask all the portlets in the same page to handle a render request to render its view.","opt":["True","False"],"ans":"a","explanation":"When a user triggers a render URL, the portlet container will ask all the portlets in the same page to handle a render request to render its view, unless the view\u2019s content has been cached."},{"q":"When a user triggers an action URL in a portlet, the portlet container will first ask the target portlet to handle an action request.","opt":["True","False"],"ans":"a","explanation":"A controller should return an object in response to a render request. However, when a user triggers an action URL in a portlet, the portlet container will first ask the target portlet to handle an action request. A controller needn\u2019t return anything for an action request."},{"q":"After Controller has finished handling a render request, it returns:-","opt":["model name","view name","view obect","all of the mentioned"],"ans":"d","explanation":"After a controller has finished handling a render request, it returns a model and a view name, or sometimes a view object, to DispatcherPortlet."},{"q":"DispatcherPortlet resolves a view name from one or more view resolver beans.","opt":["True","False"],"ans":"a","explanation":"DispatcherPortlet renders the view and passes in the model returned by the controller. Note that an action request doesn\u2019t need to render a view."},{"q":"portlet deployment descriptor file is:-","opt":["portlet.xml","portlet.config","portlet.xhtml","none of the mentioned"],"ans":"a","explanation":"The Java Portlet specification defines the valid structure of a portlet application, which is very similar to that of a web application, but with the addition of a portlet deployment descriptor (i.e., portlet.xml)."},{"q":"Servlet Listener to load the root application context at startup.","opt":["ContextLoader","ContextLoaderListener","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"In the web deployment descriptor (i.e., web.xml), you have to register the servlet listener ContextLoaderListener to load the root application context at startup."},{"q":"Unlike in a web application, you can\u2019t control URLs directly in a portlet.","opt":["True","False"],"ans":"a","explanation":"In the web deployment descriptor (i.e., web.xml), you have to register the servlet listener ContextLoaderListener to load the root application context at startup."},{"q":"You can chain multiple handler mapping annotations as required to portlet.","opt":["True","False"],"ans":"a","explanation":"Spring Portlet MVC comes with several strategies for you to map portlet requests."},{"q":"The preceding controller handles portlet requests:-","opt":["render requests","action requests","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"The preceding controller handles two types of portlet requests: render requests and action requests."},{"q":"When handling a render request, it gets the time zone attribute from the portlet preference.","opt":["True","False"],"ans":"a","explanation":"When handling a render request, it gets the time zone attribute from the portlet preferences and passes it to the view for editing."},{"q":"When handling an action request, it gets the time zone parameter from the portlet request.","opt":["True","False"],"ans":"a","explanation":"When handling an action request, it gets the time zone parameter from the portlet request and stores it in the portlet preferences as an attribute, which will override the existing one."},{"q":"The submission URL of this form should be a portlet action URL that will trigger an action request to the current portlet.","opt":["True","False"],"ans":"a","explanation":"In portlets, you have to construct an action URL with the portlet:actionURL tag defined in the portlet tag library."},{"q":"The plugin, which provides Maven support to Eclipse","opt":["m2eclipse","m2plugin","plugin","none of the mentioned"],"ans":"a","explanation":"The m2eclipse plugin, which provides Maven support to Eclipse (and thus to SpringSource Tool Suite), can do all the heavy lifting of importing your project since it is just a stock-standard Maven project."},{"q":"Spring Roo provides very powerful support to bootstrap most solutions.","opt":["True","False"],"ans":"a","explanation":"It\u2019s entirely possible there\u2019s a plugin that will do the job for you."},{"q":"A database and some sort of persistence mechanism using command:-","opt":["persistence setup \u2013database HYPERSONIC_IN_MEMORY \u2013provider HIBERNATE","persistence setup \u2013database HYPERSONIC_IN_MEMORY \u2013provider","persistence setup \u2013database HYPERSONIC_IN_MEMORY","persistence \u2013database HYPERSONIC_IN_MEMORY \u2013provider HIBERNATE"],"ans":"a","explanation":"Enter persistence setup as it suggests. On my console, I ended up entering the following command:"},{"q":"persistence setup \u2013database HYPERSONIC_IN_MEMORY \u2013provider HIBERNATE command creates files:-","opt":["src/main/resources/META-INF/persistence.xml","src/main/resources/META-INF/spring/database.properties","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"In my project, the command created two new files (src/main/resources/META-INF/persistence.xml and src/main/resources/META-INF/spring/database.properties), and it updated two files (src/main/resources/META-INF/spring/applicationContext.xml and pom.xml)."},{"q":"The file which contains useful configuration for Hypersonic in-memory database.","opt":["src/main/resources/META-INF/spring/database.properties","src/main/resources/META-INF/persistence.xml","src/main/resources/META-INF/pom.xml","none of the mentioned"],"ans":"a","explanation":"The file src/main/resources/META-INF/spring/database.properties contains useful configuration to facilitate connection to the Hypersonic in-memory database."},{"q":"The file which is the standard JPA configuration file to enable the Hibernate-based JPA implementation.","opt":["src/main/resources/META-INF/spring/database.properties","src/main/resources/META-INF/persistence.xml","src/main/resources/META-INF/pom.xml","none of the mentioned"],"ans":"b","explanation":"The file src/main/resources/META-INF/persistence.xml is the standard JPA configuration file to enable the Hibernate-based JPA implementation to do its work."},{"q":"Spring application context, src/main/resources/META-INF/spring/applicationContext.xml consists of:-","opt":["Data Source","JPA Transaction Manager","JPA entity manager factory","All of the mentioned"],"ans":"d","explanation":"Finally, the Spring application context, src/main/resources/META-INF/spring/applicationContext.xml, has been updated to have a data source, a JPA transaction manager, and a JPA entity manager factory."},{"q":"Command to create a Spring MVC controller that provides a UI:-","opt":["controller scaff \u2013class ~.web.CustomerController \u2013entity ~.domain.Customer","controller scaff \u2013class ~.web.CustomerController \u2013entity","none of the mentioned","all of the mentioned"],"ans":"a","explanation":"Type the following command to create a Spring MVC controller that provides a UI to manipulate Customer entities (and stand back!):"},{"q":"To deploy the application to a web container:-","opt":["mvn tomcat:run","mvn jetty:run","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"In the project directory, in the standard shell, run mvn tomcat:run or mvn jetty:run, and open http://localhost:8080 in your browser."},{"q":"Spring Roo\u2019s root folder (or any of the source packages) is:-","opt":["src/main/java, src/main/resources","src/test/java","src/test/resources","all of the mentioned"],"ans":"d","explanation":"The root folder (or any of the source packages, e.g., src/main/java, src/main/resources, src/test/java, or src/test/resources)."},{"q":"This encapsulates the context of a test\u2019s execution:-","opt":["Test context","Test context manager","Test context listener","Test execution listener"],"ans":"a","explanation":"This encapsulates the context of a test\u2019s execution, including the application context, test class, current test instance, current test method, and current test exception."},{"q":"This manages a test context for a test and triggers test execution listeners:-","opt":["Test context","Test context manager","Test context listener","Test execution listener"],"ans":"b","explanation":"This manages a test context for a test and triggers test execution listeners at predefined test execution points, including when preparing a test instance, before executing a test method (before any framework-specific initialization methods), and after executing a test method (after any framework-specific cleanup methods)."},{"q":"This defines a listener interface; by implementing this, you can listen to test execution events.","opt":["Test context","Test context manager","Test context listener","Test execution listener"],"ans":"d","explanation":"The TestContext framework provides several test execution listeners for common testing features, but you are free to create your own."},{"q":"Spring provides convenient TestContext support classes for:-","opt":["JUnit3","JUnit4","TestNG5","All of the mentioned"],"ans":"d","explanation":"Spring provides convenient TestContext support classes for JUnit 3, JUnit 4, and TestNG 5, with particular test execution listeners pre registered."},{"q":"JUnit 4 allows you to annotate your test methods with:-","opt":["@Test","@Autowire","@JTest","None of the mentioned"],"ans":"a","explanation":"JUnit 4 allows you to annotate your test methods with JUnit @Test annotation, so an arbitrary public method can be run as a test case."},{"q":"Usually, a test and its target class are located in the same package, but the source files of tests are stored in a separate directory.","opt":["True","False"],"ans":"a","explanation":"(e.g., test) from the source files of other classes (e.g., src)."},{"q":"Method to perform cleanup tasks:-","opt":["finalize","tearDown","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"You can override the tearDown() method to perform cleanup tasks, such as releasing permanent resources."},{"q":"The static assert methods is declared in the:-","opt":["org.junit.Assert","org.junit.*","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"You can override the tearDown() method to perform cleanup tasks, such as releasing permanent resources."},{"q":"Attribute which specifies the exception type:-","opt":["after","expected","before","test"],"ans":"b","explanation":"JUnit 4 offers a powerful feature that allows you to expect an exception to be thrown in a test case. You can simply specify the exception type in the expected attribute of the @Test annotation."},{"q":"Test data sets are provided by data providers, which are methods with the:-","opt":["@DataProvider","@Autowire","@JTest","None of the mentioned"],"ans":"a","explanation":"In TestNG, test data sets are provided by data providers, which are methods with the @DataProvider annotation."},{"q":"An object that simulates a dependent object:-","opt":["stub","mock","test","none of the mentioned"],"ans":"a","explanation":"A stub is an object that simulates a dependent object with the minimum number of methods required for a test."},{"q":"An Object which usually knows how its methods are expected to be called:-","opt":["stub","mock","test","none of the mentioned"],"ans":"b","explanation":"In contrast to a stub, a mock object usually knows how its methods are expected to be called in a test."},{"q":"Libraries that can help create mock objects:-","opt":["EasyMock","jMock","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"In Java, there are several libraries that can help create mock objects, including EasyMock and jMock."},{"q":"Test used to test several units in combination as a whole.","opt":["Integration tests","JUnit4","TestNG5","All of the mentioned"],"ans":"a","explanation":"Integration tests, in contrast, are used to test several units in combination as a whole."},{"q":"Spring supports web controller testing by providing Servlet API:-","opt":["MockHttpServletRequest","MockHttpServletResponse","MockHttpSession","All of the mentioned"],"ans":"d","explanation":"Spring supports web controller testing by providing a set of mock objects for the Servlet API (including MockHttpServletRequest, MockHttpServletResponse, and MockHttpSession)."},{"q":"Base class to access the managed application context through the inherited getApplicationContext() method.","opt":["AbstractSingleSpringContextTests","AbstractSingleSpring","Test context listener","Test execution listener"],"ans":"a","explanation":"With Spring JUnit 3 legacy support in releases prior to 2.5, your test class can extend the AbstractSingleSpringContextTests base class to access the managed application context through the inherited getApplicationContext() method."},{"q":"The TestContext framework provides two test execution listeners related to context management:-","opt":["DependencyInjectionTestExecutionListener","DirtiesContextTestExecutionListener","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"They will be registered with a test context manager by default if you don\u2019t specify your own explicitly."},{"q":"Interface which can provide access to the managed application context through the protected field applicationContext:-","opt":["ApplicationContextAware","ApplicationContext","ApplicationContextAwareContext","None of the mentioned"],"ans":"a","explanation":"These classes integrate with a test context manager and implement the ApplicationContextAware interface, so they can provide access to the managed application context through the protected field applicationContext."},{"q":"In JUnit 4, you can simply run your test with the test runner SpringJUnit4ClassRunner.","opt":["True","False"],"ans":"a","explanation":"In JUnit 4, you can simply run your test with the test runner SpringJUnit4ClassRunner to have a test context manager integrated. However, in TestNG, you have to integrate with a test context manager manually."},{"q":"Method to indicate that the application context is dirty.","opt":["getDirty()","setDirty()","all of the mentioned","none of the mentioned"],"ans":"b","explanation":"You can call the setDirty() method to indicate that the application context is dirty so that it will be reloaded automatically for the next test method."},{"q":"In JUnit4, to explicitly specify a Spring-specific test runner for running your test.","opt":["SpringJUnit4ClassRunner","SpringJUnit4Class","SpringJUnit4","None of the mentioned"],"ans":"a","explanation":"You have to explicitly specify a Spring-specific test runner for running your test\u2014SpringJUnit4ClassRunner."},{"q":"Annotation for SpringJUnit4ClassRunner:-","opt":["@Run","@RunWith","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"For this option, you have to explicitly specify a Spring-specific test runner for running your test\u2014SpringJUnit4ClassRunner. You can specify this in the @RunWith annotation at the class level."},{"q":"This class implements the ApplicationContextAware interface, so you can get access to the managed application context:-","opt":["AbstractJUnit38SpringContext","AbstractJUnit38Spring","AbstractJUnit38SpringContextTests","None of the mentioned"],"ans":"c","explanation":"This class implements the ApplicationContextAware interface, so you can get access to the managed application context via the protected field applicationContext."},{"q":"AbstractJUnit38SpringContext class also implements the ApplicationContextAware interface.","opt":["True","False"],"ans":"b","explanation":"AbstractTestNGSpringContextTests class also implements the ApplicationContextAware interface."},{"q":"Spring JUnit 3 legacy support in releases prior to 2.5, your test class can extend the:-","opt":["AbstractDependencyInjectionSpringContextTests","AbstractSingleSpringContextTests","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"When using Spring JUnit 3 legacy support in releases prior to 2.5, your test class can extend the AbstractDependencyInjectionSpringContextTests base class, which is a subclass of AbstractSingleSpringContextTests, to have its test fixtures injected automatically."},{"q":"AbstractDependencyInjectionSpringContextTests supports dependency injection.","opt":["auto-wires beans by type via setter methods","auto-wires beans by name via protected fields","none of the mentioned","all of the mentioned"],"ans":"c","explanation":"When using Spring JUnit 3 legacy support in releases prior to 2.5, your test class can extend the AbstractDependencyInjectionSpringContextTests base class, which is a subclass of AbstractSingleSpringContextTests, to have its test fixtures injected automatically."},{"q":"Test fixtures injected from the managed application context by annotating:-","opt":["@Autowired","@Resource","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"When using the TestContext framework to create tests, you can have their test fixtures injected from the managed application context by annotating a field or setter method with the @Autowired or @Resource annotations."},{"q":"TestContext support class AbstractJUnit4SpringContextTests, you can also have test fixtures injected from the managed application context.","opt":["True","False"],"ans":"a","explanation":"By extending the TestContext support class AbstractJUnit4SpringContextTests, you can also have test fixtures injected from the managed application context. In this case, you don\u2019t need to specify SpringJUnit4ClassRunner for your test, as it is inherited from the parent."},{"q":"Starting from Spring 2.5, the TestContext framework provides a test execution listener related to transaction management:-","opt":["TransactionalTestExecutionListener","TransactionalTestExecution","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"It will be registered with a test context manager by default if you don\u2019t specify your own explicitly."},{"q":"Annotation for TransactionalTestExecutionListener:-","opt":["@Transactional","@RunWith","@Run","None of the mentioned"],"ans":"a","explanation":"TransactionalTestExecutionListener: This handles the @Transactional annotation at the class or method level and has the methods run within transactions automatically."},{"q":"The main mission of Spring Roo is fundamentally and sustainably improve Java developer productivity without compromising engineering integrity or flexibility.","opt":["True","False"],"ans":"a","explanation":"This has a lot of implications. Applications built in Roo are Java applications that benefit from the mature Java language and platform."},{"q":"Library which helps Spring Roo in using of the command line shell.","opt":["JTag","JLine","JHib","None of the mentioned"],"ans":"b","explanation":"The shell is quite smart, featuring tab completion, line history, and much more. These features are surfaced pretty consistently on all platforms, thanks to the excellent JLine library (http://jline.sourceforge.net). JLine handles some features inconsistently, however, on Windows\u2014nothing fundamentally irresolvable, mind you, just nuisances like shell color differences and line history glitches. Proceed full speed ahead, but if you\u2019re not using a Unix-like operating system, be aware of the (ever diminishing) possibility of issues."},{"q":"To check version of Maven.","opt":["mvn \u2013v","mvn -v","mvn \u2013version","all of the mentioned"],"ans":"c","explanation":"Start a new shell session and confirm that you can issue the following command without error, in any directory on your system: mvn \u2013version."},{"q":"To confirm Roo version.","opt":["roo.sh","roo","roo quit","roo.sh quit"],"ans":"d","explanation":"Confirm that you saw output. On my system, the output looked like this:"},{"q":"The Spring Roo shell is a blank slate. It represents the ultimate user interface for Spring Roo to facilitate development.","opt":["True","False"],"ans":"a","explanation":"A custom command line shell to facilitate the developer. This shell can be intimidating to the uninitiated."},{"q":"Spring Roo supports tab completion.","opt":["True","False"],"ans":"a","explanation":"It supports tab completion, which will enable you to tab your way to a completely specified command."},{"q":"You can ask Roo questions using:-","opt":["tab","hint","all of the mentioned","none of the mentioned"],"ans":"b","explanation":"You can ask it questions using the hint command, and it does its best to direct you in response."},{"q":"Spring Roo file extension is:-","opt":[".xml",".xhtml",".roo",".groovy"],"ans":"c","explanation":"The Spring Roo shell is pretty darned handy, and even fun, but on the surface, it would appear to lack the reusability we developers have come to expect from our tools."},{"q":"To run the script:-","opt":["roo.sh script \u2013file ~/Desktop/myapp.roo","roo.sh \u2013file ~/Desktop/myapp.roo","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"To run the script, simply invoke the Roo shell as follows (changing the path of the file as appropriate):"},{"q":"Maven Directory to hold the non\u2013unit-test Java files for your application.","opt":["src/main/java","src/main/resources","src/main/webapp","src/test/java"],"ans":"a","explanation":"A directory to hold the non\u2013unit-test Java files for your application."},{"q":"Maven Directory which holds classpath resources that aren\u2019t Java class files.","opt":["src/main/java","src/main/resources","src/main/webapp","src/test/java"],"ans":"b","explanation":"Note, this is for classpath resources and is not appropriate, for example, for web application resources. For that you need src/main/webapp."},{"q":"Maven Directory which is used to hold the rest of a web application\u2019s structure.","opt":["src/main/java","src/main/resources","src/main/webapp","src/test/java"],"ans":"c","explanation":"If you were going to develop a web application, put everything except what you would put in WEB-INF/classes in this folder."},{"q":"This directory holds artifacts intended to test the Java classes under the src/main/java folder.","opt":["src/test/java","src/main/resources","src/main/webapp","src/test/java"],"ans":"a","explanation":"Typically, the package structures mirrors the package structure in src/main/java, allowing your tests to have package-friendly visibility to the classes under test."},{"q":"This directory holds resources needed by your test classes at test time.","opt":["src/test/java","src/test/resources","src/main/webapp","src/test/java"],"ans":"b","explanation":"This directory holds resources needed by your test classes at test time, in the same way that src/main/resources works."},{"q":"To package the project using the Roo shell.","opt":["perform package","roo.sh","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"spring Roo also lets you perform certain operations using Maven from within the Roo shell. To package the project using the Roo shell, launch it again (using roo.sh), and invoke the following command:"},{"q":"Spring supports most of the popular ORM (or data mapper) frameworks.","opt":["Hibernate","JDO","JPA","All of the mentioned"],"ans":"d","explanation":"Spring supports most of the popular ORM (or data mapper) frameworks, including Hibernate, JDO, iBATIS, and the Java Persistence API (JPA)."},{"q":"ORM which isn\u2019t supported by Spring:-","opt":["Hibernate","JDO","TopLink","All of the mentioned"],"ans":"d","explanation":"Classic TopLink isn\u2019t supported starting from Spring 3.0 (the JPA implementation still supported, of course)."},{"q":"An ORM framework persists your objects according to the mapping metadata you provide.","opt":["True","False"],"ans":"a","explanation":"XML- or annotation-based, such as the mappings between classes and tables, properties and columns, and so on."},{"q":"Database Engine which uses low memory consumption and easy configuration.","opt":["SQL","MySQL","Apache Derby","None of the mentioned"],"ans":"c","explanation":"Derby is an open source relational database engine provided under the Apache License and implemented in pure Java."},{"q":"Mode which Derby prefers to run in:-","opt":["embedded","client/server","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"Derby can run in either the embedded mode or the client/server mode."},{"q":"For testing purposes, the client/server mode is more appropriate.","opt":["True","False"],"ans":"a","explanation":"It allows you to inspect and edit data with any visual database tools that support JDBC\u2014for example, the Eclipse Data Tools Platform (DTP)."},{"q":"To start the Derby server in the client/server mode.","opt":["startNetworkServer java file","startNetworkServer script","startNetwork script","all of the mentioned"],"ans":"b","explanation":"To start the Derby server in the client/server mode, just execute the startNetworkServer script for your platform (located in the bin directory of the Derby installation)."},{"q":"JDBC Properties for Connecting to the Application Database.","opt":["Driver Class","URL","Username","All of the mentioned"],"ans":"d","explanation":"JDBC Properties for Connecting to the Application Database"},{"q":"The general purpose of the Data Access Object (DAO) pattern is to avoid these logic related problems by separating data access logic from business logic and presentation logic.","opt":["True","False"],"ans":"a","explanation":"This pattern recommends that data access logic be encapsulated in independent modules called data access objects."},{"q":"To access the database with JDBC:-","opt":["DAO interface","DAO Class","DataAccess interface","None of the mentioned"],"ans":"a","explanation":"Because your DAO implementation has to connect to the database to execute SQL statements, you may establish database connections by specifying the driver class name, database URL, username, and password."},{"q":"Standard interface defined by the JDBC specification that factories Connection instances.","opt":["javax.sql.DataAccess","javax.sql.DataSource","javax.sql.Data","javax.sql.DataSourceAccess"],"ans":"b","explanation":"The javax.sql.DataSource interface is a standard interface defined by the JDBC specification that factories Connection instances."},{"q":"Data source implementations provided by different vendors and projects.","opt":["C3PO","Apache Commons DBCP","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"C3PO and Apache Commons DBCP are popular open source options, and most applications servers will provide their own implementation."},{"q":"Spring also provides several convenient but less powerful data source implementations.","opt":["DriverManagerDataSource","DriverManagerData","DriverManagerDataAccess","DriverManagerDataSourceAccess"],"ans":"a","explanation":"The simplest one is DriverManagerDataSource, which opens a new connection every time one is requested."},{"q":"SingleConnectionDataSource (a DriverManagerDataSource subclass). As its name indicates, this maintains only a single connection.","opt":["True","False"],"ans":"a","explanation":"Another data source implementation provided by Spring is SingleConnectionDataSource (a DriverManagerDataSource subclass). As its name indicates, this maintains only a single connection that\u2019s reused all the time and never closed."},{"q":"Which DataSource is not stable in MultiThreaded Environment?","opt":["DriverManagerDataSource","SingleConnectionDataSource","All of the mentioned","None of the mentione"],"ans":"c","explanation":"As its name indicates, this maintains only a single connection that\u2019s reused all the time and never closed. Obviously, it is not suitable in a multithreaded environment."},{"q":"Class which declares a number of overloaded update() template methods to control the overall update process.","opt":["org.springframework.jdbc.core.JdbcTemplate","org.springframework.jdbc.core.*","org.springframework.jdbc.*","none of the mentioned"],"ans":"a","explanation":"The org.springframework.jdbc.core.JdbcTemplate class declares a number of overloaded update() template methods to control the overall update process."},{"q":"You implement this interface to override the statement creation task.","opt":["PreparedStatement","PreparedStatementCreator","PreparedCreator","None of the mentioned"],"ans":"b","explanation":"The first callback interface to introduce is PreparedStatementCreator. You implement this interface to override the statement creation task and the parameter binding task of the overall update process."},{"q":"When implementing the PreparedStatementCreator interface, you will get the database connection as the createPreparedStatement() method\u2019s argument.","opt":["True","False"],"ans":"a","explanation":"All you have to do in this method is to create a PreparedStatement object on this connection and bind your parameters to this object."},{"q":"It is better to implement the PreparedStatementCreator interface and other callback interfaces as inner classes if they are used within one method only.","opt":["True","False"],"ans":"a","explanation":"This is because you can get access to the local variables and method arguments directly from the inner class, instead of passing them as constructor arguments."},{"q":"PreparedStatementSetter, as its name indicates, create a PreparedStatement object on this connection the parameter as well as binding task of the overall update process.","opt":["True","False"],"ans":"b","explanation":"The second callback interface, PreparedStatementSetter, as its name indicates, performs only the parameter binding task of the overall update process."},{"q":"The JdbcTemplate class offers template method for batch update operations.","opt":["batchUpdate()","update()","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"It requires a SQL statement and a BatchPreparedStatementSetter object as arguments. In this method, the statement is compiled (prepared) only once and executed multiple times."},{"q":"The JdbcTemplate class declares a number of overloaded query() template methods to control the overall query process.","opt":["True","False"],"ans":"c","explanation":"You can override the statement creation (task 2) and the parameter binding by implementing the PreparedStatementCreator and PreparedStatementSetter interfaces, just as you did for the update operations."},{"q":"The primary interface that allows you to process the current row of the result set.","opt":["PreparedStatementSetter","PreparedStatementCreator","RowCallbackHandler","All of the mentioned"],"ans":"c","explanation":"RowCallbackHandler is the is the primary interface that allows you to process the current row of the result set."},{"q":"RowCallbackHandler purpose is to map a single row of the result set to a customized object.","opt":["True","False"],"ans":"b","explanation":"RowCallbackHandler is the is the primary interface that allows you to process the current row of the result set."},{"q":"Method of RowMapper interface in which, you have to construct the object that represents a row and return it as the method\u2019s return value.","opt":["mapRow()","query()","update()","none of the mentioned"],"ans":"a","explanation":"From the viewpoint of reuse, it\u2019s better to implement the RowMapper interface as a normal class than as an inner class. In the mapRow() method of this interface, you have to construct the object that represents a row and return it as the method\u2019s return value."},{"q":"RowMapper implementation which can automatically map a row to a new instance of the specified class.","opt":["BeanPropertyRowMapper","BeanPropertyRow","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"Note that the specified class must be a top-level class and must have a default or no-argument constructor. It first instantiates this class and then maps each column value to a property by matching their names."},{"q":"Method which provides list of maps.","opt":["queryForList()","update","query()","all of the mentioned"],"ans":"a","explanation":"Without the help of RowMapper, you can still call the queryForList() method and pass in a SQL statement. The returned result will be a list of maps. Each map stores a row of the result set with the column names as the keys."},{"q":"Spring JDBC framework offers a convenient class, to simplify your DAO implementation.","opt":["org.springframework.jdbc.core.support","org.springframework.jdbc.core.support.JdbcDaoSupport","all of the mentioned","none of the mentioned"],"ans":"b","explanation":"Spring JDBC framework offers a convenient class, org.springframework.jdbc.core.support.JdbcDaoSupport, to simplify your DAO implementation. This class declares a jdbcTemplate property, which can be injected from the IoC container or created automatically from a data source."},{"q":"The org.springframework.jdbc.core.support.JdbcDaoSupport class has a setDataSource() method and a setJdbcTemplate() method.","opt":["True","False"],"ans":"a","explanation":"Your DAO class can extend this class to have these methods inherited."},{"q":"Method to retrieve the JDBC template.","opt":["setJdbcTemplate()","getTemplate()","getJdbc()","getJdbcTemplate()"],"ans":"d","explanation":"In your DAO methods, you can simply call the getJdbcTemplate() method to retrieve the JDBC template. You also have to delete the dataSource and jdbcTemplate properties, as well as their setter methods, from your DAO class, because they have already been inherited. Again, for simplicity\u2019s sake, only the change to the insert() method is shown."},{"q":"JdbcTemplate that takes advantage of Java 1.5 features such as autoboxing, generics, and variable-length arguments to simplify its usage.","opt":["org.springframework.jdbc.core.JdbcTemplate","org.springframework.jdbc.core.simple.SimpleJdbcTemplate","org.springframework.jdbc.*","none of the mentioned"],"ans":"b","explanation":"org.springframework.jdbc.core.simple.SimpleJdbcTemplate is an evolution of JdbcTemplate that takes advantage of Java 1.5 features such as autoboxing, generics, and variable-length arguments to simplify its usage."},{"q":"JdbcTemplate require statement parameters to be passed as an object array.","opt":["True","False"],"ans":"a","explanation":"In SimpleJdbcTemplate, they can be passed as variable-length arguments; this saves you the trouble of wrapping them in an array."},{"q":"To use SimpleJdbcTemplate:-","opt":["instantiate it directly","retrieve its instance by extending the SimpleJdbcDaoSupport class","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"To use SimpleJdbcTemplate, you can either instantiate it directly or retrieve its instance by extending the SimpleJdbcDaoSupport class."},{"q":"SimpleJdbcTemplate offers a convenient batch update method in the form of:-","opt":["Vector","Set","Map","List"],"ans":"d","explanation":"SimpleJdbcTemplate offers a convenient batch update method for you to specify a SQL statement and a batch of parameters in the form of List so that you don\u2019t need to implement the BatchPreparedStatementSetter interface."},{"q":"Method has a warning from the Java compiler because of an unchecked conversion from List to List.","opt":["findAll()","query()","update()","batchUpdate()"],"ans":"a","explanation":"When using the classic JdbcTemplate, the findAll() method has a warning from the Java compiler because of an unchecked conversion from List to List. This is because the return type of the query() method is List rather than the type-safe List."},{"q":"The return type of the queryForObject() method will be determined by the class argument (e.g., String.class).","opt":["True","False"],"ans":"a","explanation":"So, there\u2019s no need for you to perform typecasting manually."},{"q":"Named SQL parameters are specified by name (starting with a colon) rather than by position.","opt":["True","False"],"ans":"a","explanation":"Another option when binding SQL parameters in the Spring JDBC framework is to use named parameters."},{"q":"Named parameters are supported only in SimpleJdbcTemplate.","opt":["True","False"],"ans":"a","explanation":"Named parameters are supported only in SimpleJdbcTemplate and NamedParameterJdbcTemplate."},{"q":"Implementations of the SqlParameterSource interface:-","opt":["MapSqlParameterSource","BeanPropertySqlParameterSource","none of the mentioned","all of the mentioned"],"ans":"d","explanation":"There are three implementations of the SqlParameterSource interface. The basic one is MapSqlParameterSource, which wraps a map as its parameter source."},{"q":"The Spring framework offers a consistent data access exception-handling mechanism for its data access module.","opt":["True","False"],"ans":"a","explanation":"In general, all exceptions thrown by the Spring JDBC framework are subclasses of org.springframework.dao.DataAccessException, a type of RuntimeException that you are not forced to catch."},{"q":"In your DAO methods, you neither need to surround the code with a try/catch block nor declare throwing an exception in the method signature.","opt":["True","False"],"ans":"a","explanation":"This is because DataAccessException (and therefore its subclasses, including DuplicateKeyException) is an unchecked exception that you are not forced to catch."},{"q":"The direct parent class of DataAccessException is:-","opt":["RuntimeException","NestedRuntimeException","Exception","Throwable"],"ans":"b","explanation":"A core Spring exception class that wraps another exception in a RuntimeException."},{"q":"Which concrete exception in the DataAccessException hierarchy should be thrown?","opt":["errorCode","SQLState properties of the caught SQLException","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"As a DataAccessException wraps the underlying SQLException as the root cause, you can inspect the errorCode and SQLState properties with the following catch block."},{"q":"Error code for The statement was aborted because it would have caused a duplicate key value in a unique or primary key constraint.","opt":["-1","0","23505","1"],"ans":"a","explanation":"SQL State Message Text"},{"q":"How does the Spring JDBC framework know that state 23505 should be mapped to DuplicateKeyException?","opt":["error code","SQL state","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"The error code and SQL state are database specific, which means different database products may return different codes for the same kind of error."},{"q":"Class which represents a real-world entity and its instances will be persisted to a database.","opt":["entity","persistent","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"Class is called an entity class or a persistent class because it represents a real-world entity and its instances will be persisted to a database."},{"q":"Each entity class to be persisted by an ORM framework, a default constructor with no argument is required.","opt":["True","False"],"ans":"a","explanation":"For each entity class, you must define an identifier property to uniquely identify an entity."},{"q":"If the identifier value is null, this entity will be treated as a new and unsaved entity.","opt":["True","False"],"ans":"a","explanation":"When this entity is persisted, an insert SQL statement will be issued; otherwise, an update statement will."},{"q":"To allow the identifier to be null, you should choose a primitive wrapper type:-","opt":["java.lang.Integer","java.lang.Long","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"To allow the identifier to be null, you should choose a primitive wrapper type like java.lang.Integer and java.lang.Long for the identifier."},{"q":"A set of persistent annotations for you to define mapping metadata.","opt":["JPA","JSR","XML","None of the mentioned"],"ans":"a","explanation":"JPA defines a set of persistent annotations for you to define mapping metadata in a standard format that is more likely to be reusable in other ORM frameworks."},{"q":"For mapping and persisting your objects with Hibernate and JPA.","opt":["Using the Hibernate API to persist objects with Hibernate XML mappings","Using the Hibernate API to persist objects with JPA annotations","Using JPA to persist objects with JPA annotations","All of the mentioned"],"ans":"d","explanation":"Hibernate also supports the use of JPA annotations to define mapping metadata, so there are"},{"q":"Core Programming Elements for Different Data Access Strategies.","opt":["Resource","Resource Factory","Session","All of the mentioned"],"ans":"d","explanation":"Core Programming Elements for Different Data Access Strategies"},{"q":"Interface whose instances can be obtained from a SessionFactory instance.","opt":["Session","Session Factory","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"In Hibernate, the core interface for object persistence is Session, whose instances can be obtained from a SessionFactory instance."},{"q":"Interface whose instances can be obtained from an EntityManagerFactory instance.","opt":["Entity","EntityManager","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"In JPA, the corresponding interface is EntityManager, whose instances can be obtained from an EntityManagerFactory instance."},{"q":"The exceptions thrown by Hibernate are of type HibernateException, while those thrown by JPA may be of type PersistenceException.","opt":["True","False"],"ans":"a","explanation":"Other Java SE exceptions like IllegalArgumentException and IllegalStateException."},{"q":"To accept a session factory via dependency injection.","opt":["HibernateCourseDao","HibernateCourse","HibernateDao","All of the mentioned"],"ans":"a","explanation":"Modify HibernateCourseDao to accept a session factory via dependency injection, instead of creating it directly with the native Hibernate API in the constructor."},{"q":"Property for factory bean to load the Hibernate configuration file.","opt":["config.xml","config","configLocation","none of the mentioned"],"ans":"c","explanation":"The configLocation property is of type Resource, but you can assign a string value to it."},{"q":"If you want to use this data source for your session factory, you can inject it into the dataSource property of LocalSessionFactoryBean.","opt":["True","False"],"ans":"a","explanation":"The data source specified in this property will override the database settings in the Hibernate configuration file."},{"q":"FactoryBean to create an entity manager factory in the IoC container.","opt":["LocalEntityManagerFactoryBean","LocalEntityManagerFactory","LocalEntityManager","All of the mentioned"],"ans":"a","explanation":"Spring provides a factory bean, LocalEntityManagerFactoryBean, for you to create an entity manager factory in the IoC container."},{"q":"It allows you to override some of the configurations in the JPA configuration file.","opt":["LocalEntityManagerFactoryBean","LocalContainerEntityManagerFactoryBean","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"Spring supports a more flexible way to create an entity manager factory by another factory bean, LocalContainerEntityManagerFactoryBean. It allows you to override some of the configurations in the JPA configuration file, such as the data source and database dialect."},{"q":"Spring HibernateTemplate can simplify your DAO implementation by managing sessions and transactions for you.","opt":["True","False"],"ans":"a","explanation":"However, using HibernateTemplate means your DAO has to depend on Spring API."},{"q":"An alternative to Spring HibernateTemplate is:-","opt":["HibernateContext","Hibernate contextual sessions","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"An alternative to Spring HibernateTemplate is to use Hibernate contextual sessions."},{"q":"Sessionfactory can manage contextual sessions for you and allows you to retrieve them by the:-","opt":["getSession() method","getCurrent() method","getCurrentSession() method","none of the mentioned"],"ans":"c","explanation":"In Hibernate 3, a sessionfactory can manage contextual sessions for you and allows you to retrieve them by the getCurrentSession() method on org.hibernate.SessionFactory."},{"q":"DAO methods require access to the session factory, which can be injected:-","opt":["a setter method","constructor argument","none of the mentioned","all of the mentioned"],"ans":"d","explanation":"To use the contextual session approach, your DAO methods require access to the session factory, which can be injected via a setter method or a constructor argument."},{"q":"DAO methods must be made transactional.","opt":["True","False"],"ans":"a","explanation":"This is required because Spring wraps the SessionFactory with a proxy that expects that Spring transaction management is in play when methods on a session are made."},{"q":"Annotation to find a transaction and then fail, complaining that no Hibernate session been bound to the thread.","opt":["@Transaction","@Transactional","@Transactions","None of the mentioned"],"ans":"b","explanation":"This ensures that the persistence operations within a DAO method will be executed in the same transaction and hence by the same session."},{"q":"In the bean configuration file for Hibernate (i.e., beans-hibernate.xml), you have to declare a HibernateTransactionManager instance for this application and enable declarative transaction via:-","opt":["tx:annotation","tx:annotationdriven","tx:annotation-driven","none of the mentioned"],"ans":"c","explanation":"In the bean configuration file for Hibernate (i.e., beans-hibernate.xml), you have to declare a HibernateTransactionManager instance for this application and enable declarative transaction management via tx:annotation-driven."},{"q":"HibernateTemplate will translate the native Hibernate exceptions into exceptions in Spring DataAccessException hierarchy.","opt":["True","False"],"ans":"a","explanation":"This allows consistent exception handling for different data access strategies in Spring."},{"q":"Annotation for Hibernate exceptions to be translated into Spring DataAccessException for consistent exception handling:-","opt":["@Translation","@Repo","@Repository","None of the mentioned"],"ans":"c","explanation":"If you want the Hibernate exceptions to be translated into Spring DataAccessException for consistent exception handling, you have to apply the @Repository annotation to your DAO class that requires exception translation."},{"q":"Instance to translate the native Hibernate exceptions into data access exceptions in Spring DataAccessException hierarchy.","opt":["PersistenceExceptionPostProcessor","PersistenceExceptionTranslation","PersistenceException","PersistenceExceptionTranslationPostProcessor"],"ans":"d","explanation":"This bean post processor will only translate exceptions for beans annotated with @Repository."},{"q":"You can assign a component name in this annotation and have the session factory autowired by the Spring IoC container with @Autowired.","opt":["True","False"],"ans":"a","explanation":"In Spring, @Repository is a stereotype annotation. By annotating it, a component class can be auto-detected through component scanning."},{"q":"Spring provides to simplify your DAO implementation by managing entitymanagers and transactions for you:-","opt":["HibernateTemplate","JpaTemplate","SpringTemplate","None of the mentioned"],"ans":"b","explanation":"Using Spring JpaTemplate means your DAO is dependent on Spring API."},{"q":"Annotation used for entity manager injection in EJB components.","opt":["@PersistenceContext","@Persistence","@PersistenceCon","None of the mentioned"],"ans":"a","explanation":"Spring can also interpret this annotation by means of a bean post processor."},{"q":"To use the context injection approach, you can declare an entity manager field in your DAO and annotate it with the @PersistenceContext annotation.","opt":["True","False"],"ans":"a","explanation":"Spring will inject an entity manager into this field for you to persist your objects."},{"q":"JpaTemplate will translate the native JPA exceptions into exceptions in Spring DataAccessException hierarchy.","opt":["True","False"],"ans":"a","explanation":"If you want JPA exceptions to be translated into Spring DataAccessException, you have to apply the @Repository annotation to your DAO class."},{"q":"Which of the following is used to convert property values to text Values?","opt":["property Editor","property setter","property getter","none of the mentioned"],"ans":"a","explanation":"A property editor is a feature of the JavaBeans API for converting property values to and from text values."},{"q":"Which property editor is used to specify a URL String for a property of the URL type?","opt":["java.net.*","java.io.*","java.net.URL","none of the mentioned"],"ans":"c","explanation":"Spring will automatically convert the URL string into a URL object and inject it into your property."},{"q":"Which interface is used to create your own property editors?","opt":["CustomEditorConfigurer","RegisterCustomEditor","PropertyEditorConfigurer","None of the mentioned"],"ans":"a","explanation":"The CustomEditorConfigurer is implemented as a bean factory post processor for you to register your custom property editors before any of the beans get instantiated."},{"q":"Which of the following property editors are registered by Spring?","opt":["CustomNumberEditor","FileEditor","CustomDateEditor","CustomNetEditor"],"ans":"b","explanation":"ClassEditor, FileEditor, LocaleEditor, and URLEditor are pre registered by Spring, so you don\u2019t need to register them again."},{"q":"What are the ways to create custom Property Editors?","opt":["implement PropertyEditor interface","extend PropertyEditorSupport Class","none of the mentioned","all of the mentioned"],"ans":"d","explanation":"You can write custom property editors by implementing the java.beans.PropertyEditor interface or extending the convenient support class java.beans.PropertyEditorSupport."},{"q":"Method which converts property into a string value","opt":["getAsText","setAsText","regText","None of the mentioned"],"ans":"a","explanation":"The getAsText() method converts a property into a string value."},{"q":"Method that converts string into a property value","opt":["getAsText","setAsText","regText","None of the mentioned"],"ans":"b","explanation":"The setAsText() method converts a string back into a property."},{"q":"The property value is retrieved by:-","opt":["getValue method","setValue method","none of the mentioned","all of the mentioned"],"ans":"d","explanation":"The property value is retrieved and set by calling the getValue() and setValue() methods."},{"q":"For a property editor to be searched correctly, it must be located in the same package as the target class, and the name must be Editor\u2019s name","opt":["True","False"],"ans":"b","explanation":"The name must be target class name with Editor as its suffix."},{"q":"Which package is used for periodic work","opt":["java.lang.Thread","java.util.TimerTask","java.util.Timer","java.util.concurrent"],"ans":"b","explanation":"Java 1.3 saw the introduction of java.util.TimerTask to support doing some sort of work periodically."},{"q":"Which subinterface provides functionality for managing Threads and their events","opt":["ExecutorService","ThreadService","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"ExecutorService, a subinterface, provides more functionality for managing threads and providing support for raising events to the threads, such as shutdown()."},{"q":"Method provided by ExectuorService which returns a Future < T >","opt":["submit","publish","addService","registerService"],"ans":"a","explanation":"ExecutorService, a subinterface, provides more functionality for managing threads and providing support for raising events to the threads, such as shutdown()."},{"q":"Which method provided by ExecutorService is used to check whether job is finished or cancelled","opt":["Future.isDone()","Future.isCancelled()","None of the mentioned","All of the mentioned"],"ans":"d","explanation":"You can call Future.isDone() or Future.isCancelled() to determine whether the job is finished or cancelled, respectively."},{"q":"The Quartz integration and message driven POJO container doesn\u2019t needs TaskExecutor Services","opt":["True","False"],"ans":"b","explanation":"The TaskExecutor interface is used quite a bit internally in the Spring framework."},{"q":"Which of the following class\u2019s instance is used by TimerTaskExecutor for managing jobs","opt":["java.util.Timer","java.util.Date","java.util.HashMap","none of the mentioned"],"ans":"a","explanation":"TimerTaskExecutor uses a java.util.Timer instance and manages jobs (java.util.concurrent.Callable or java.lang.Runnable instances) for you by running them on the Timer."},{"q":"Transactions can be described with key properties:-","opt":["Atomicity","Consistency","Isolation","All of the mentioned"],"ans":"d","explanation":"The concept of transactions can be described with four key properties: atomicity, consistency, isolation, and durability (ACID)."},{"q":"To access a database running on the Derby server, you have to add:-","opt":["Derby client library","Tomcat client library","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"To access a database running on the Derby server, you have to the Derby client library to your CLASSPATH."},{"q":"Spring\u2019s transaction support offers a set of technology-independent facilities, including transaction managers.","opt":["org.springframework.transaction.PlatformTransactionManager","org.springframework.transaction.support.TransactionTemplate","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"Spring\u2019s transaction support offers a set of technology-independent facilities, a transaction template (e.g., org.springframework.transaction.support.TransactionTemplate), and transaction declaration support to simplify your transaction management tasks."},{"q":"Spring\u2019s core transaction management abstraction is based on the interface:-","opt":["PlatformTransaction","PlatformTransactionManager","TransactionManager","PlatformManager"],"ans":"b","explanation":"It encapsulates a set of technology-independent methods for transaction management."},{"q":"The PlatformTransactionManager interface provides methods for working with transactions:","opt":["getTransaction(TransactionDefinition definition)","commit(TransactionStatus status)","rollback(TransactionStatus status)","all of the mentioned"],"ans":"d","explanation":""},{"q":"Spring has several built-in implementations of PlatformTransactionManager interface for use with different transaction management APIs.","opt":["True","False"],"ans":"a","explanation":""},{"q":"A transaction manager is declared in the Spring IoC container as a normal bean.","opt":["True","False"],"ans":"a","explanation":"For example, the following bean configuration declares a DataSourceTransactionManager instance. It requires the dataSource property to be set so that it can manage transactions for connections made by this data source."},{"q":"Method that allows you to start a new transaction (or obtain the currently active transaction).","opt":["getTransaction()","commit()","rollback()","all of the mentioned"],"ans":"a","explanation":"Spring\u2019s transaction manager provides a technology-independent API that allows you to start a new transaction (or obtain the currently active transaction) by calling the getTransaction() method."},{"q":"PlatformTransactionManager is an abstract unit for transaction management.","opt":["True","False"],"ans":"a","explanation":"Because PlatformTransactionManager is an abstract unit for transaction management, the methods you called for transaction management are guaranteed to be technology independent."},{"q":"Method to start a new transaction with that definition:-","opt":["getTransaction()","commit()","rollback()","none of the mentioned"],"ans":"a","explanation":"Once you have a transaction definition, you can ask the transaction manager to start a new transaction with that definition by calling the getTransaction() method."},{"q":"To help you control the overall transaction management process and transaction exception handling.","opt":["SpringTransactionTemplate","TransactionTemplate","Transaction","None of the mentioned"],"ans":"b","explanation":"Spring also provides a TransactionTemplate to help you control the overall transaction management process and transaction exception handling."},{"q":"You just have to encapsulate your code block in a callback class that implements the TransactionCallback interface and pass it to the TransactionTemplate execute method for execution. In this way, you don\u2019t need to repeat the boilerplate transaction management code for this block.","opt":["True","False"],"ans":"a","explanation":"In this way, you don\u2019t need to repeat the boilerplate transaction management code for this block."},{"q":"A TransactionTemplate can accept a transaction callback object that implements:-","opt":["TransactionCallback","TransactionCallbackWithoutResult class","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"A TransactionTemplate can accept a transaction callback object that implements either the TransactionCallback or an instance of the one implementer of that interface provided by the framework, the TransactionCallbackWithoutResult class."},{"q":"Spring (since version 2.0) offers a transaction advice that can be easily configured via the:-","opt":["rx:advice","bx:advice","tx:advice","none of the mentioned"],"ans":"c","explanation":"This advice can be enabled with the AOP configuration facilities defined in the aop saop schema."},{"q":"You can omit the transaction-manager attribute in the element if your transaction manager has the name transactionManager.","opt":["True","False"],"ans":"a","explanation":"This element will automatically detect a transaction manager with this name. You have to specify a transaction manager only when it has a different name."},{"q":"Spring-WS supports using XML marshalling technology to marshal and unmarshal objects to and from XML documents.","opt":["True","False"],"ans":"a","explanation":"This technology is also known as object/XML mapping (OXM) because you are actually mapping objects to and from XML documents."},{"q":"To implement endpoints with an XML marshalling technology, you have to extend the:-","opt":["AbstractMarshallingPayload","AbstractMarshalling","AbstractMarshallingPayloadEndpoint","None of the mentioned"],"ans":"c","explanation":"To implement endpoints with an XML marshalling technology, you have to extend the AbstractMarshallingPayloadEndpoint class and configure an XML marshaller for it."},{"q":"Marshaller for JAXB 1.0:-","opt":["org.springframework.oxm.jaxb.Jaxb1Marshaller","org.springframework.oxm.jaxb.Jaxb2Marshaller","org.springframework.oxm.castor.CastorMarshall","org.springframework.oxm.xmlbeans.XmlBeansMarshaller"],"ans":"a","explanation":"JAXB 1.0 org.springframework.oxm.jaxb.Jaxb1Marshaller."},{"q":"Marshaller for JAXB 2.0:-","opt":["org.springframework.oxm.jaxb.Jaxb1Marshaller","org.springframework.oxm.jaxb.Jaxb2Marshaller","org.springframework.oxm.castor.CastorMarshall","org.springframework.oxm.xmlbeans.XmlBeansMarshaller"],"ans":"b","explanation":"JAXB 2.0 org.springframework.oxm.jaxb.Jaxb2Marshaller."},{"q":"Marshaller for Castor:-","opt":["org.springframework.oxm.jaxb.Jaxb1Marshaller","org.springframework.oxm.jaxb.Jaxb2Marshaller","org.springframework.oxm.castor.CastorMarshall","org.springframework.oxm.xmlbeans.XmlBeansMarshaller"],"ans":"c","explanation":"Castor org.springframework.oxm.castor.CastorMarshaller."},{"q":"Marshaller for XMLBeans:-","opt":["org.springframework.oxm.jaxb.Jaxb1Marshaller","org.springframework.oxm.jaxb.Jaxb2Marshaller","org.springframework.oxm.castor.CastorMarshall","org.springframework.oxm.xmlbeans.XmlBeansMarshaller"],"ans":"d","explanation":"XMLBeans org.springframework.oxm.xmlbeans.XmlBeansMarshaller."},{"q":"Marshaller for JiBX:-","opt":["org.springframework.oxm.jaxb.Jaxb1Marshaller","org.springframework.oxm.jaxb.Jaxb2Marshaller","org.springframework.oxm.castor.CastorMarshall","org.springframework.oxm.jibx.JibxMarshaller"],"ans":"d","explanation":"JiBX org.springframework.oxm.jibx.JibxMarshaller."},{"q":"Marshaller for XStream:-","opt":["org.springframework.oxm.jaxb.Jaxb1Marshaller","org.springframework.oxm.jaxb.Jaxb2Marshaller","org.springframework.oxm.xstream.XStreamMarshaller","org.springframework.oxm.jibx.JibxMarshaller"],"ans":"c","explanation":"XStream org.springframework.oxm.xstream.XStreamMarshaller."},{"q":"Spring-WS supports various XML marshalling APIs.","opt":["Castor","JAXB 1.0","XMLBeans","All of the mentioned"],"ans":"d","explanation":"Spring-WS supports various XML marshalling APIs, including JAXB 1.0, JAXB 2.0, Castor, XMLBeans, JiBX, and XStream."},{"q":"For some marshalling APIs, the object model must be generated by them so that they can insert marshalling-specific information.","opt":["True","False"],"ans":"a","explanation":"Because Castor supports marshalling between XML messages and arbitrary Java objects, you can start creating the following classes by yourself."},{"q":"A marshalling endpoint requires:-","opt":["marshaller","unmarshaller","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"A marshalling endpoint requires both the marshaller and unmarshaller properties to be set. Usually, you can specify a single marshaller for both properties. For Castor, you declare a CastorMarshaller bean as the marshaller."},{"q":"Castor requires a mapping configuration file to know how to map objects to and from XML documents.","opt":["True","False"],"ans":"a","explanation":"You can create this file in the classpath root and specify it in the mappingLocation property (e.g., mapping.xml)."},{"q":"Spring-WS supports annotating an arbitrary class as a service endpoint by:-","opt":["@Endpoint","@End","@Point","None of the mentioned"],"ans":"a","explanation":"Spring-WS supports annotating an arbitrary class as a service endpoint by the @Endpoint annotation, without extending a framework-specific class."},{"q":"When you are using XML marshalling, WebServiceTemplate requires both the marshaller and unmarshaller properties to be set.","opt":["True","False"],"ans":"a","explanation":"You can also set them to WebServiceGatewaySupport if you extend this class to have WebServiceTemplate auto-created."},{"q":"A Spring-WS client can also marshall and unmarshal the request and response objects to and from XML messages.","opt":["True","False"],"ans":"a","explanation":"As an example, we will create a client using Castor as the marshaller so that you can reuse the object models."},{"q":"The concept of an endpoint in web services is much like that of a controller in web applications.","opt":["True","False"],"ans":"a","explanation":"The difference is that a web controller deals with HTTP requests and HTTP responses, while a service endpoint deals with XML request messages and XML response messages."},{"q":"Spring-WS provides various abstract endpoint classes for you to process the request.","opt":["org.springframework.ws.server.endpoint","org.springframework.ws.server","org.springframework.*","none of the mentioned"],"ans":"a","explanation":"Spring-WS provides various abstract endpoint classes for you to process the request and response XML messages using different XML processing technologies and APIs. These classes are all located in the org.springframework.ws.server.endpoint package."},{"q":"Endpoint Classes for DOM:-","opt":["AbstractDomPayloadEndpoint","AbstractJDomPayloadEndpoint","AbstractDom4jPayloadEndpoint","AbstractXomPayloadEndpoint"],"ans":"a","explanation":"Endpoint Classes for Different XML Processing Technologies/APIs"},{"q":"Endpoint Classes for JDOM:-","opt":["AbstractDomPayloadEndpoint","AbstractJDomPayloadEndpoint","AbstractDom4jPayloadEndpoint","AbstractXomPayloadEndpoint"],"ans":"b","explanation":"Endpoint Classes for Different XML Processing Technologies/APIs"},{"q":"Endpoint Classes for dom4j:-","opt":["AbstractDomPayloadEndpoint","AbstractJDomPayloadEndpoint","AbstractDom4jPayloadEndpoint","AbstractXomPayloadEndpoint"],"ans":"c","explanation":"Endpoint Classes for Different XML Processing Technologies/APIs"},{"q":"Endpoint Classes for XOM:-","opt":["AbstractDomPayloadEndpoint","AbstractJDomPayloadEndpoint","AbstractDom4jPayloadEndpoint","AbstractXomPayloadEndpoint"],"ans":"d","explanation":"Endpoint Classes for Different XML Processing Technologies/APIs"},{"q":"Endpoint Classes for SAX:-","opt":["AbstractDomPayloadEndpoint","AbstractSaxPayloadEndpoint","AbstractDom4jPayloadEndpoint","AbstractXomPayloadEndpoint"],"ans":"b","explanation":"Endpoint Classes for Different XML Processing Technologies/APIs"},{"q":"Endpoint Classes for Event-based StAX:-","opt":["AbstractDomPayloadEndpoint","AbstractSaxPayloadEndpoint","AbstractDom4jPayloadEndpoint","AbstractStaxEventPayloadEndpoint"],"ans":"d","explanation":"Endpoint Classes for Different XML Processing Technologies/APIs"},{"q":"Endpoint Classes for Streaming StAX :-","opt":["AbstractDomPayloadEndpoint","AbstractSaxPayloadEndpoint","AbstractStaxStreamPayloadEndpoint","AbstractStaxEventPayloadEndpoint"],"ans":"c","explanation":"Endpoint Classes for Different XML Processing Technologies/APIs"},{"q":"Endpoint Classes for XML marshalling :-","opt":["AbstractDomPayloadEndpoint","AbstractSaxPayloadEndpoint","AbstractStaxStreamPayloadEndpoint","AbstractMarshallingPayloadEndpoint"],"ans":"d","explanation":"Endpoint Classes for Different XML Processing Technologies/APIs"},{"q":"If you need to get access to the entire SOAP message, you should write an endpoint class by implementing:-","opt":["org.springframework.ws.server.endpoint.MessageEndpoint","org.springframework.ws","org.springframework.ws.server.endpoint","all of the mentioned"],"ans":"a","explanation":"If you need to get access to the entire SOAP message, you should write an endpoint class by implementing the org.springframework.ws.server.endpoint.MessageEndpoint org.springframework.ws.server.endpoint.MessageEndpoint interface."},{"q":"You can create a dom4j endpoint by extending the:-","opt":["AbstractDom4jPayloadEndpoint","AbstractDom4jPayload","AbstractDom4jEndpoint","None of the mentioned"],"ans":"a","explanation":"You can create a dom4j endpoint by extending the AbstractDom4jPayloadEndpoint class."},{"q":"In this method, you can access the request XML element, whose type is org.dom4j.Element, and the response document, whose type is org.dom4j.Document, as method arguments.","opt":["invoke","invokeInterval","invokeInternal","none of the mentioned"],"ans":"c","explanation":"The core method defined in this class that you must override is invokeInternal()."},{"q":"Web services can be invoked through the core template class:-","opt":["org.springframework.ws.client.core.WebServiceTemplate","JDBC Template","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"When using Spring-WS on the client side, web services can be invoked through the core template class org.springframework.ws.client.core.WebServiceTemplate."},{"q":"WebServiceTemplate provides a sendSourceAndReceiveToResult() method that accepts arguments:-","opt":["java.xml.transform.Source","java.xml.transform.Result","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"In the getTemperatures() method, you first build the request message using the dom4j API. WebServiceTemplate provides a sendSourceAndReceiveToResult() method that accepts a java.xml.transform.Source and a java.xml.transform.Result object as arguments."},{"q":"A web service contract is described using :-","opt":["Web Services Description Language","Web Services Description","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"In contract-last, you expose an existing service interface as a web service whose service contract is generated automatically."},{"q":"There are two approaches to developing a web service, depending on whether you define the contract first or last.","opt":["True","False"],"ans":"a","explanation":"A web service contract is described using Web Services Description Language (WSDL). In contract-last, you expose an existing service interface as a web service whose service contract is generated automatically. In contract-first, you design the service contract in terms of XML and then write code to fulfill it."},{"q":"In contrast, the contract-first approach encourages you to think of the service contract first in terms of :-","opt":["XML","XML Schema(.xsd)","WSDL","All of the mentioned"],"ans":"d","explanation":"In contrast, the contract-first approach encourages you to think of the service contract first, in terms of XML, using XML schema (.xsd) and WSDL."},{"q":"In some cases, it\u2019s also hard to map an object to XML (e.g., an object graph with cyclic references) because there\u2019s actually an impedance mismatch between an object model and an XML model.","opt":["True","False"],"ans":"a","explanation":"Just like that between an object model and a relational model."},{"q":"Service exporters that can export a bean as a remote service based on the :-","opt":["RMI","Hessian","Burlap","All of the mentioned"],"ans":"d","explanation":"Spring comes with several service exporters that can export a bean as a remote service based on the RMI, Hessian, Burlap, or HTTP Invoker remoting technologies."},{"q":"Spring comes with a service exporter that can export a bean as a SOAP web service.","opt":["True","False"],"ans":"b","explanation":"Spring doesn\u2019t come with a service exporter that can export a bean as a SOAP web service. We will use Apache CXF, which is the de facto successor to XFire."},{"q":"The standard for deploying web services on the Java EE platform as of Java EE 1.4:-","opt":["JAX-RPC","JAX","RPC","None of the mentioned"],"ans":"a","explanation":"The standard for deploying web services on the Java EE platform as of Java EE 1.4 was called JAX-RPC. It supported SOAP 1.0 and 1.1, but didn\u2019t support message-oriented web services."},{"q":"To send objects across the wire, beans need to be encoded using the Java Architecture for XML Binding (JAXB).","opt":["True","False"],"ans":"a","explanation":"JAXB supports many class types out of the box with no special support."},{"q":"If you are deploying into a Java EE 5 (or better) container, you may simply create a bean that is annotated with:-","opt":["javax.jws.WebService","javax.jws.WebServiceProvider","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"If you are deploying into a Java EE 5 (or better) container, you may simply create a bean that is annotated with javax.jws.WebService or javax.jws.WebServiceProvider and deploy that into a container in your web application."},{"q":"If you are using the JAX-RS Reference Implementation, this intermediary step will involve a tool called wsgen.","opt":["True","False"],"ans":"a","explanation":"It will generate the configuration (a file called sun-jaxws.xml) and wrapper beans required to expose your service."},{"q":"Spring provides a factory that can export beans annotated with:-","opt":["javax.jws.WebService","javax.jws.WebServiceProvider","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"Spring provides a factory that can export beans annotated with javax.jws.WebService or javax.jws.WebServiceProvider inside the Spring context and then publishes the services using the JAX-WS runtime."},{"q":"Exposing a stand-alone SOAP endpoint using the:-","opt":["SimpleJaxWsServiceExporter","JAX-WS","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Exposing a stand-alone SOAP endpoint using the SimpleJaxWsServiceExporter or the support for JAX-WS in a Java EE container in conjunction with Spring is simple, but these solutions ignore the largest cross-section of developers\u2014people developing on Tomcat."},{"q":"Tomcat doesn\u2019t support JAX-WS by itself.","opt":["True","False"],"ans":"a","explanation":"Tomcat doesn\u2019t support JAX-WS by itself, so we need to help it by embedding a JAX-WS runtime. There are many choices, and you\u2019re free to take your pick. Two popular choices are Axis2 and CXF, both of which are Apache projects."},{"q":"CXF represents the consolidation of the Celtix and XFire projects, which each had useful SOAP support.","opt":["True","False"],"ans":"a","explanation":"For our example, we\u2019ll embed CXF since it\u2019s robust, fairly well tested, and provides support for other important standards like JAX-RS, the API for REST-ful endpoints."},{"q":"Factory to use our Spring bean as the implementation:-","opt":["jaxws:end","jaxws:endpoint","all of the mentioned","none of the mentioned"],"ans":"b","explanation":"We tell the jaxws:endpoint factory to use our Spring bean as the implementation. We tell it at what address to publish the service using the address element."},{"q":"Interceptor to let Spring configure @Autowired elements on your EJB.","opt":["org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor","org.springframework.ejb.interceptor.SpringBeanAutowiring","org.springframework.ejb.interceptor.SpringBean","none of the mentioned"],"ans":"a","explanation":"Use the org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor interceptor to let Spring configure @Autowired elements on your EJB."},{"q":"A remote stateless session bean requires annotations:-","opt":["@Remote","@Stateless","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"A remote stateless session bean requires the @Stateless and @Remote annotations. In the @Remote annotation, you have to specify the remote interface for this EJB component."},{"q":"Proxying Spring services with EJB3s, injecting custom resources configured in Spring, or even using Spring to isolate your EJBs from acquiring references to other distributed resources such as a REST endpoint or an RMI endpoint.","opt":["SpringBeanAutowiringInterceptor","SpringBeanAutowiring","SpringBean","SpringBeanInterceptor"],"ans":"a","explanation":"To do this, use Spring\u2019s SpringBeanAutowiringInterceptor class to provide configuration for the EJB."},{"q":"Annotation which decorates the PostageServiceBean:-","opt":["@Interceptors","@Autowire","@Wire","@Mention"],"ans":"a","explanation":"This tells Spring to handle @Autowired injection points in the class."},{"q":"The interceptor obtains beans, by default, from a ContextSingletonBeanFactoryLocation.","opt":["True","False"],"ans":"a","explanation":"The interceptor obtains beans, by default, from a ContextSingletonBeanFactoryLocation, which in turn looks for an XML application context named beanRefContext.xml, which is presumed to be on the classpath."},{"q":"EJB interface is a simple Java interface whose methods don\u2019t throw RemoteException.","opt":["True","False"],"ans":"a","explanation":"EJB interface is a simple Java interface whose methods don\u2019t throw RemoteException, while the implementation class is a simple Java class annotated with EJB annotations."},{"q":"To declare a JNDI object reference in the Spring IoC container.","opt":["JndiObjectFactory","JndiObjectFactoryBean","JndiObject","JndiFactoryBean"],"ans":"b","explanation":"By using Spring\u2019s JndiObjectFactoryBean, you can easily declare a JNDI object reference in the Spring IoC container. You can use this factory bean to declare a reference to an EJB 3.0 component."},{"q":"The default JNDI name for a remote EJB 3.0 component is the EJB class name with Remote as its suffix .","opt":["True","False"],"ans":"a","explanation":"If you have chosen OpenEJB as your EJB container, the default JNDI name for a remote EJB 3.0 component is the EJB class name with Remote as its suffix (PostageServiceBeanRemote, in this case)."},{"q":"You can configure the JNDI details for factory bean in:-","opt":["jndiEnvironment","jndiName","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"You can configure the JNDI details for factory bean in the jndiEnvironment and jndiName properties."},{"q":"Lightweight remoting technologies developed by Caucho Technology.","opt":["Hessian","Burlap","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Hessian and Burlap are two simple lightweight remoting technologies developed by Caucho Technology (http://www.caucho.com/)."},{"q":"Spring framework itself also offers a remoting technology called HTTP Invoker.","opt":["True","False"],"ans":"a","explanation":"It also communicates over HTTP, but uses Java\u2019s object serialization mechanism to serialize objects."},{"q":"To expose a Hessian or Burlap service, you have to add the:-","opt":["Hessian library","Burlap library","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"To expose a Hessian or Burlap service, you have to add the Hessian library to your classpath."},{"q":"For a HessianServiceExporter instance, you have to configure a service object to export and its service interface.","opt":["True","False"],"ans":"a","explanation":"You can export any bean configured in the IoC container as a Hessian service, and HessianServiceExporter will create a proxy to wrap this bean."},{"q":"By default, BeanNameUrlHandlerMapping is preconfigured for a Spring MVC application.","opt":["True","False"],"ans":"a","explanation":"It maps requests to handlers according to the URL patterns specified as bean names."},{"q":"Invoking a Burlap service:-","opt":["HessianProxyFactoryBean","BurlapProxyFactoryBean","BurlapProxyFactory","BurlapProxy"],"ans":"b","explanation":"Invoking a Burlap service is very similar to Hessian. The only difference is that you should use BurlapProxyFactoryBean."},{"q":"Key technology in developing distributed applications, especially multi-tier enterprise applications.","opt":["Remoting","EJB","RMI","All of the mentioned"],"ans":"d","explanation":"Spring support for various remoting technologies, such as EJB, RMI, Hessian, Burlap, HTTP Invoker, and web services. Remoting is a key technology in developing distributed applications, especially multi-tier enterprise applications."},{"q":"Java-based remoting technology that allows two Java applications running in different JVMs to communicate with each other.","opt":["Burlap","EJB","RMI","All of the mentioned"],"ans":"c","explanation":"With RMI, an object can invoke the methods of a remote object. RMI relies on object serialization to marshall and unmarshall method arguments and return values."},{"q":"To expose a service through RMI, you have to create the service interface that extends:-","opt":["java.rmi.Remote","java.rmi.RemoteException","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"Considering the typical RMI usage scenario, to expose a service through RMI, you have to create the service interface that extends java.rmi.Remote and whose methods declare throwing java.rmi.RemoteException."},{"q":"To call the methods on a remote service:-","opt":["java.rmi.Remote","java.rmi.RemoteException","all of the mentioned","none of the mentioned"],"ans":"b","explanation":"However, to call the methods on a remote service, you must handle java.rmi.RemoteException in case any exception is thrown by the remote service."},{"q":"Spring remoting facilities can significantly simplify the RMI usage on both the server and client sides.","opt":["True","False"],"ans":"a","explanation":"On the server side, you can use RmiServiceExporter to export a Spring bean as an RMI service whose methods can be invoked remotely. It\u2019s just several lines of bean configuration without any programming. On the client side, you can simply use RmiProxyFactoryBean to create a proxy for the remote service."},{"q":"There are several properties you must configure for an RmiServiceExporter instance:-","opt":["service name","service interface","service object","all of the mentioned"],"ans":"d","explanation":"There are several properties you must configure for an RmiServiceExporter instance, including the service name, the service interface, and the service object to export."},{"q":"By default, RmiServiceExporter attempts to look up an RMI registry at localhost port 1099.","opt":["True","False"],"ans":"a","explanation":"If it can\u2019t find the RMI registry, it will start a new one."},{"q":"The Spring support classes facilitate building session beans:-","opt":["stateful session beans (SFSBs)","stateless session beans (SLSBs)","message-driven beans (MDBs)","all of the mentioned"],"ans":"d","explanation":"The Spring support classes facilitate building session beans\u2014stateful session beans (SFSBs) and stateless session beans (SLSBs)\u2014and message-driven beans (MDBs) with Spring."},{"q":"Spring EJB Support Classes for Different Types of EJB:-","opt":["AbstractStatelessSessionBean","AbstractStatefulSessionBean","AbstractMessageDrivenBean","All of the mentioned"],"ans":"d","explanation":"Spring EJB Support Classes for Different Types of EJB"},{"q":"EJB support classes provide access to the Spring IoC container for you to implement your business logic in POJOs and wrap them with EJB components.","opt":["True","False"],"ans":"a","explanation":"Because POJOs are easier to develop and test, implementing business logic in POJOs can accelerate your EJB development."},{"q":"OpenEJB 3.1.1 supports:-","opt":["EJB 2.x components","EJB 3.0 and EJB 3.1 components","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"To compile and build your EJB component, you have to include a library that contains standard EJB classes and interfaces in your classpath. OpenEJB 3.1.1 supports both legacy EJB 2.x components as well as newer EJB 3.0 and EJB 3.1 components, so we\u2019ll use its implementation library."},{"q":"If you want to expose EJB component for local access within an enterprise application, the preceding two interfaces should extend EJBLocalObject and EJBLocalHome.","opt":["True","False"],"ans":"a","explanation":"If you want to expose this EJB component for local access within an enterprise application, the preceding two interfaces should extend EJBLocalObject and EJBLocalHome instead, whose methods don\u2019t need to throw RemoteException. For simplicity\u2019s sake, we\u2019re omitting the local and local home interfaces here."},{"q":"The ejbCreate() method is the EJB hook for initialization of state, much as a JSR-250 annotated @PostConstruct() method or afterPropertiesSet() method work in Java EE 5 and Spring.","opt":["True","False"],"ans":"a","explanation":"Similarly, for each overloaded form of ejbCreate() on the SessionBean, there must be a create method with the same arguments on the EJBHome."},{"q":"To start the OpenEJB container, you first set environment variable:-","opt":["EJB_HOME","OPENEJB_HOME","Bashrc","None of the mentioned"],"ans":"b","explanation":"To start the OpenEJB container, you first set the OPENEJB_HOME environment variable to point to your OpenEJB installation directory."},{"q":"To use Spring EJB support for your EJB implementation classes, you have to include a few Spring framework JARs:-","opt":["spring-beans","spring-core","spring-context","all of the mentioned"],"ans":"d","explanation":"To use Spring EJB support for your EJB implementation classes, you have to include a few Spring framework JARs, including spring-beans, spring-core, spring-context, spring-asm, and spring-expression in the classpath of your EJB container."},{"q":"A transaction propagation behavior can be specified by the:-","opt":["propagation","consistency","isolation","All of the mentioned"],"ans":"a","explanation":"A transaction propagation behavior can be specified by the propagation transaction attribute."},{"q":"Transaction propagation behavior are defined in the:-","opt":["org.springframework.transaction.Transaction","org.springframework.transaction.TransactionDefinition","all of the mentioned","none of the mentioned"],"ans":"b","explanation":"These behaviors are defined in the org.springframework.transaction.TransactionDefinition interface."},{"q":"If there\u2019s an existing transaction in progress, the current method should run within this transaction.","opt":["Required","REQUIRES NEW","SUPPORTS","NOT SUPPORTED"],"ans":"a","explanation":"If there\u2019s an existing transaction in progress, the current method should run within this transaction. Otherwise, it should start a new transaction and run within its own transaction."},{"q":"The current method must start a new transaction and run within its own transaction.","opt":["Required","REQUIRES NEW","SUPPORTS","NOT SUPPORTED"],"ans":"b","explanation":"The current method must start a new transaction and run within its own transaction. If there\u2019s an existing transaction in progress, it should be suspended."},{"q":"If there\u2019s an existing transaction in progress, the current method can run within this transaction.","opt":["Required","REQUIRES NEW","SUPPORTS","NOT SUPPORTED"],"ans":"c","explanation":"Otherwise, it is not necessary to run within a transaction."},{"q":"The current method should not run within a transaction.","opt":["Required","REQUIRES NEW","SUPPORTS","NOT SUPPORTED"],"ans":"d","explanation":"The current method should not run within a transaction. If there\u2019s an existing transaction in progress, it should be suspended."},{"q":"The current method must run within a transaction.","opt":["Required","MANDATORY","SUPPORTS","NOT SUPPORTED"],"ans":"b","explanation":"The current method must run within a transaction. If there\u2019s no existing transaction in progress, an exception will be thrown."},{"q":"The current method should not run within a transaction. If there\u2019s an existing transaction in progress, an exception will be thrown.","opt":["Required","MANDATORY","SUPPORTS","NEVER"],"ans":"d","explanation":"The current method should not run within a transaction. If there\u2019s an existing transaction in progress, an exception will be thrown."},{"q":"If there\u2019s an existing transaction in progress, the current method should run within the nested transaction.","opt":["Required","MANDATORY","NESTED","NEVER"],"ans":"c","explanation":"If there\u2019s an existing transaction in progress, the current method should run within the nested transaction (supported by the JDBC 3.0 save point feature) of this transaction. Otherwise, it should start a new transaction and run within its own transaction."},{"q":"For two transactions T1 and T2, T1 reads a field that has been updated by T2 but not yet committed.","opt":["Dirty Read","Nonrepeatable read","Phantom read","Lost Updates"],"ans":"a","explanation":"Later, if T2 rolls back, the field read by T1 will be temporary and invalid."},{"q":"For two transactions T1 and T2, T1 reads a field and then T2 updates the field.","opt":["Dirty Read","Nonrepeatable read","Phantom read","Lost Updates"],"ans":"b","explanation":"Later, if T1 reads the same field again, the value will be different."},{"q":"For two transactions T1 and T2, T1 reads some rows from a table and then T2 inserts new rows into the table.","opt":["Dirty Read","Nonrepeatable read","Phantom read","Lost Updates"],"ans":"c","explanation":"Later, if T1 reads the same table again, there will be additional rows."},{"q":"For two transactions T1 and T2, they both select a row for update, and based on the state of that row, make an update to it.","opt":["Dirty Read","Nonrepeatable read","Phantom read","Lost Updates"],"ans":"d","explanation":"Thus, one overwrites the other when the second transaction to commit should have waited until the first one committed before performing its selection."},{"q":"Isolation Levels Supported by Spring:-","opt":["DEFAULT","READ COMMITTED","READ UNCOMMITTED","All of the mentioned"],"ans":"d","explanation":"Isolation Description"},{"q":"The exceptions that cause a transaction to roll back or not can be specified by attribute:-","opt":["rollback","commit","serialize","none of the mentioned"],"ans":"a","explanation":"Any exceptions not explicitly specified in this attribute will be handled by the default rollback rule (i.e., rolling back for unchecked exceptions and not rolling back for checked exceptions)."},{"q":"There are two main options for scheduling tasks on the Java platform:-","opt":["JDK Timer","Quartz Scheduler","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"JDK Timer offers simple task scheduling features that you can use conveniently because the features are bundled with JDK. Compared with JDK Timer, Quartz offers more powerful job scheduling features."},{"q":"Spring supports JMX by allowing you to export any beans in its IoC container as model MBeans.","opt":["True","False"],"ans":"a","explanation":"This can be done simply by declaring an MBeanExporter instance."},{"q":"Connectors to expose your MBeans for remote access over a specific protocol by using a factory bean.","opt":["MBeanExporter","JSR-160","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"In addition, Spring enables you to declare JSR-160 (Java Management Extensions Remote API) connectors to expose your MBeans for remote access over a specific protocol by using a factory bean. Spring provides factory beans for both servers and clients."},{"q":"Spring can also detect and export your MBeans automatically from beans declared in the IoC container and annotated with JMX-specific annotations defined by Spring.","opt":["True","False"],"ans":"a","explanation":"The MBeanExporter class exports beans, delegating to an instance of MBeanInfoAssembler to do the heavy lifting."},{"q":"Method, all files in the source directory will be replicated to the destination directory.","opt":["replicate","copy","rep","none of the mentioned"],"ans":"a","explanation":"Each time you call the replicate() method, all files in the source directory will be replicated to the destination directory. To avoid unexpected problems caused by concurrent replication, you declare this method as synchronized."},{"q":"To register an MBean, you need an instance of the interface :-<br>import java.lang.management.ManagementFactory;<br>import javax.management.Descriptor;<br>import javax.management.JMException;<br>import javax.management.MBeanServer;<br>import javax.management.ObjectName;<br>import javax.management.modelmbean.DescriptorSupport;<br>import javax.management.modelmbean.InvalidTargetObjectTypeException;<br>import javax.management.modelmbean.ModelMBeanAttributeInfo;<br>import javax.management.modelmbean.ModelMBeanInfo;<br>import javax.management.modelmbean.ModelMBeanInfoSupport;<br>import javax.management.modelmbean.ModelMBeanOperationInfo;<br>import javax.management.modelmbean.RequiredModelMBean;<br>import org.springframework.context.ApplicationContext;<br>import org.springframework.context.support.ClassPathXmlApplicationContext;<br>public class Main {<code><\/code><br>\tpublic static void main(String[] args) throws IOException {<br>\t\tApplicationContext context =<br>\t\t\tnew ClassPathXmlApplicationContext(\"beans-jmx.xml\");<br>\t\tFileReplicator documentReplicator =<br>\t\t(FileReplicator) context.getBean(\"documentReplicator\");<br>\t\ttry {<br>\t\t\tMBeanServer mbeanServer = ManagementFactory.getPlatformMBeanServer();<br>\t\t\tObjectName objectName = new ObjectName(\"bean:name=documentReplicator\");<br>\t\t\tRequiredModelMBean mbean = new RequiredModelMBean();<br>\t\t\tmbean.setManagedResource(documentReplicator, \"objectReference\");<br>\t\t\tDescriptor srcDirDescriptor = new DescriptorSupport(new String[] {<br>\t\t\t\"name=SrcDir\", \"descriptorType=attribute\",<br>\t\t\t\"getMethod=getSrcDir\", \"setMethod=setSrcDir\" });<br>\t\t\tModelMBeanAttributeInfo srcDirInfo = new ModelMBeanAttributeInfo(<br>\t\t\t\"SrcDir\", \"java.lang.String\", \"Source directory\",<br>\t\t\ttrue, true, false, srcDirDescriptor);<br>\t\t\tDescriptor destDirDescriptor = new DescriptorSupport(new String[] {<br>\t\t\t\"name=DestDir\", \"descriptorType=attribute\",<br>\t\t\t\"getMethod=getDestDir\", \"setMethod=setDestDir\" });<br>\t\t\tpublic static void main(String[] args) throws IOException {<br>\t\t\tApplicationContext context =<br>\t\t\tnew ClassPathXmlApplicationContext(\"beans-jmx.xml\");<br>\t\t\tFileReplicator documentReplicator =<br>\t\t\t(FileReplicator) context.getBean(\"documentReplicator\");<br>\t\t\tModelMBeanAttributeInfo destDirInfo = new ModelMBeanAttributeInfo(<br>\t\t\t\"DestDir\", \"java.lang.String\", \"Destination directory\",<br>\t\t\ttrue, true, false, destDirDescriptor);<br>\t\t\tModelMBeanOperationInfo getSrcDirInfo = new ModelMBeanOperationInfo(<br>\t\t\t\"Get source directory\",<br>\t\t\tFileReplicator.class.getMethod(\"getSrcDir\"));<br>\t\t\tModelMBeanOperationInfo setSrcDirInfo = new ModelMBeanOperationInfo(<br>\t\t\t\"Set source directory\",<br>\t\t\tFileReplicator.class.getMethod(\"setSrcDir\", String.class));<br>\t\t\tModelMBeanOperationInfo getDestDirInfo = new ModelMBeanOperationInfo(<br>\t\t\t\"Get destination directory\",<br>\t\t\tFileReplicator.class.getMethod(\"getDestDir\"));<br>\t\t\tModelMBeanOperationInfo setDestDirInfo = new ModelMBeanOperationInfo(<br>\t\t\t\"Set destination directory\",<br>\t\t\tFileReplicator.class.getMethod(\"setDestDir\", String.class));<br>\t\t\tModelMBeanOperationInfo replicateInfo = new ModelMBeanOperationInfo(<br>\t\t\t\"Replicate files\",<br>\t\t\tFileReplicator.class.getMethod(\"replicate\"));<br>\t\t\tModelMBeanInfo mbeanInfo = new ModelMBeanInfoSupport(<br>\t\t\t\"FileReplicator\", \"File replicator\",<br>\t\t\tnew ModelMBeanAttributeInfo[] { srcDirInfo, destDirInfo },<br>\t\t\tnull,<br>\t\t\tnew ModelMBeanOperationInfo[] { getSrcDirInfo, setSrcDirInfo,<br>\t\t\tgetDestDirInfo, setDestDirInfo, replicateInfo },<br>\t\t\tnull);<br>\t\t\tmbean.setModelMBeanInfo(mbeanInfo);<br>\t\t\tmbeanServer.registerMBean(mbean, objectName);<br>\t\t\t} catch (JMException e) {<br>\t\t\t...<br>\t\t\t} catch (InvalidTargetObjectTypeException e) {<br>\t\t\t...<br>\t\t\t} catch (NoSuchMethodException e) {<br>\t\t\t...<br>\t\t\t}<br>\t\t\tSystem.in.read();<br>\t}<br>}","opt":["javax.management.MBeanServer","javax.management","javax.management.MBean","none of the mentioned","ManagementFactory.getPlatform()","ManagementFactory.getPlatformMBeanServer()","ManagementFactory.getPlatformMBean()","All of the mentioned","ModelMBeanAttributeInfo","ModelMBeanOperationInfo","None of the mentioned","All of the mentioned"],"ans":"d","explanation":"From the preceding code, you can see that for each MBean attribute and MBean operation, you need to create a ModelMBeanAttributeInfo object and a ModelMBeanOperationInfo object for describing it."},{"q":"VM argument to enable local monitoring of this application.","opt":["-Dcom.sun.management.jmxremote","-Dcom.sun.management","-Dcom.sun.management.jmx","None of the mentioned"],"ans":"a","explanation":"You have to add the VM argument -Dcom.sun.management.jmxremote to enable local monitoring of this application. You should also include all other options for your command, such as the classpath, as necessary."},{"q":"However, in an environment with no MBean server available, you have to create one explicitly using:-","opt":["MBeanServerFactoryBean","MBeanServerFactory","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"To make your application portable to different runtime environments, you should enable the locateExistingServerIfPossible property so that this factory bean will create an MBean server only if none is available."},{"q":"Spring allows you to create a JMX connector server through:-","opt":["ConnectorServerFactoryBean","ConnectorServer","ConnectorServerFactory","All of the mentioned"],"ans":"a","explanation":"By default, ConnectorServerFactoryBean creates and starts a JMX connector server bound to the service URL service:jmx:jmxmp://localhost:9875, which exposes the JMX connector through the JMX Messaging Protocol (JMXMP)."},{"q":"? should be replaced by:-<br><beans ...><br>\t...<br>\t<bean id=\"rmiRegistry\"<br>\tclass=\"org.springframework.remoting.rmi.RmiRegistryFactoryBean\" /><br>\t<bean id=\"connectorServer\"<br>\tclass=\"org.springframework.jmx.support.ConnectorServerFactoryBean\"<br>\tdepends-on=\"rmiRegistry\"><br>\t<property name=\"serviceUrl\" value=? /><br>\t<\/bean><br><\/beans>","opt":["service:jmx:rmi://localhost/jndi/rmi://localhost:1099/replicator","service:jmx:rmi://localhost/jndi/rmi://localhost:1099/","service:jmx:rmi://localhost/jndi//localhost:1099/replicator","none of the mentioned"],"ans":"a","explanation":"To expose your JMX connector through a specific protocol, you just provide the service URL for it."},{"q":"If no RMI registry has been created externally, you should create one by using:-","opt":["RmiRegistryFactory","RmiRegistryFactoryBean","RmiRegistry","RmiRegister"],"ans":"b","explanation":"If no RMI registry has been created externally, you should create one by using RmiRegistryFactoryBean. The default port for this registry is 1099, but you can specify another one in its port property."},{"q":"The simplest MBean assembler in Spring is, which allows you to specify the names of the methods to export.","opt":["MethodNameBasedMBeanInfoAssembler","MethodNameBasedMBeanInfo","MethodNameBasedMBean","MethodNameBasedInfoAssembler"],"ans":"a","explanation":"The simplest MBean assembler in Spring is MethodNameBasedMBeanInfoAssembler, which allows you to specify the names of the methods to export."},{"q":"Spring allows your beans to publish JMX notifications through:-","opt":["NotificationPublisher","Notification","Notify","All of the mentioned"],"ans":"a","explanation":"Spring allows your beans to publish JMX notifications through the NotificationPublisher interface. You can also register standard JMX notification listeners in the IoC container to listen to JMX notifications."},{"q":"The core interface of Spring email support is:-","opt":["MailSender","EMail","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"Spring email support makes it easier to send email by providing an abstract and implementation-independent API for sending email. The core interface of Spring email support is MailSender."},{"q":"The JavaMailSender interface is a subinterface of MailSender that includes specialized JavaMail features:-","opt":["Multipurpose Internet Mail Extensions","Multipurpose Internet Mail","Multipurpose Internet Extensions","None of the mentioned"],"ans":"a","explanation":"The JavaMailSender interface is a subinterface of MailSender that includes specialized JavaMail features such as Multipurpose Internet Mail Extensions (MIME) message support. To send an email message with HTML content, inline images, or attachments, you have to send it as a MIME message."},{"q":"Before you implement the ErroNotifier interface in this way, you may need a local email server that supports the Simple Mail Transfer Protocol (SMTP) for testing purposes.","opt":["True","False"],"ans":"a","explanation":"Before you implement the interface in this way, you may need a local email server that supports the Simple Mail Transfer Protocol (SMTP) for testing purposes. We recommend installing Apache James Server (http://james.apache.org/server/index.html), which is very easy to install and configure."},{"q":"You can implement the interface to send email notifications in case of errors.","opt":["Notify","Error","ErrorNotifier","None of the mentioned"],"ans":"c","explanation":"You can implement the ErrorNotifier interface to send email notifications in case of errors."},{"q":"You send the email by making a call to:-","opt":["Transport.send()","Transport.sendTo()","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"You send the email by making a call to Transport.send()."},{"q":"The default port used by JavaMailSenderImpl is the:-","opt":["SMTP port 24","SMTP port 22","SSH port 22","SMTP port 25"],"ans":"d","explanation":"The default port used by JavaMailSenderImpl is the standard SMTP port 25, so if your email server listens on this port for SMTP, you can simply omit this property."},{"q":"If you have a JavaMail session configured in your Java EE application server, you can first look it up with the help of:-","opt":["JndiObjectFactory","JndiObjectFactoryBean","JndiObject","None of the mentioned"],"ans":"b","explanation":"If you have a JavaMail session configured in your Java EE application server, you can first look it up with the help of JndiObjectFactoryBean."},{"q":"MIME is supported by JavaMail through the:-","opt":["javax.mail.internet.Mime","javax.mail.internet.Message","javax.mail.internet.MimeMessage","javax.mail.internet.Mail"],"ans":"c","explanation":"To send email that contains HTML content, inline images, or attachments, you have to construct and send a MIME message instead. MIME is supported by JavaMail through the javax.mail.internet.MimeMessage class."},{"q":"The JavaMailSenderImpl instance you injected does implement this interface.","opt":["True","False"],"ans":"a","explanation":"The JavaMailSenderImpl instance you injected does implement this interface, so you needn\u2019t modify your bean configurations."},{"q":"Quartz supports several types of triggers:-","opt":["SimpleTrigger","CronTrigger","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Quartz supports two types of triggers: SimpleTrigger and CronTrigger."},{"q":"SimpleTrigger allows you to set trigger properties:-","opt":["start time","end time","repeat interval","all of the mentioned"],"ans":"d","explanation":"SimpleTrigger allows you to set trigger properties such as start time, end time, repeat interval, and repeat count."},{"q":"CronTrigger accepts a Unix cron expression for you to specify the times to run your job.","opt":["True","False"],"ans":"a","explanation":"For example, you can replace the preceding SimpleTrigger with the following CronTrigger to run your job at 17:30 every day:"},{"q":"Spring also offers MethodInvokingJobDetailFactoryBean for you to define a job that executes a single method of a particular object.","opt":["True","False"],"ans":"a","explanation":"This saves you the trouble of creating a job class."},{"q":"You can configure a Quartz SimpleTrigger object in Spring bean configuration file through:-","opt":["SimpleTrigger","SimpleTriggerBean","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"You can configure a Quartz SimpleTrigger object in Spring bean configuration file through SimpleTriggerBean, which requires a reference to a JobDetail object. This bean provides common default values for certain trigger properties, such as using the bean name as the job name and setting indefinite repeat count."},{"q":"Spring 3.0 debuts new support for configuring:-","opt":["TaskExecutors","TaskSchedulers","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Spring 3.0 debuts new support for configuring TaskExecutors and TaskSchedulers. This capability, coupled with the ability to schedule method execution using the @Scheduled annotation, makes Spring 3.0 very capable of meeting this challenge."},{"q":"Template which can send and receive JMS messages with much less code","opt":["JmsTemplate","EMail","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"With a JMS template (Spring framework class JmsTemplate), you can send and receive JMS messages with much less code."},{"q":"The template handles the boilerplate tasks for you and also converts the JMS API JMSException hierarchy into Spring runtime exception:-","opt":["org.springframework.jms.Jms","org.springframework.jms.JmsException","org.springframework.jms.JmsTemplate","none of the mentioned"],"ans":"b","explanation":"The translation converts exceptions to a mirrored hierarchy of unchecked exceptions."},{"q":"To address different JMS APIs, Spring provides :-","opt":["JmsTemplate","JmsTemplate102","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"To address different JMS APIs, Spring provides two JMS template classes, JmsTemplate and JmsTemplate102, for these two versions of JMS."},{"q":"Before you can send and receive JMS messages, you need to install a JMS message broker:-","opt":["Apache ActiveM","Apache Active","Apache MQ","Apache ActiveMQ"],"ans":"d","explanation":"Before you can send and receive JMS messages, you need to install a JMS message broker. For simplicity\u2019s sake, we have chosen Apache ActiveMQ (http://activemq.apache.org/) as our message broker, which is very easy to install and configure."},{"q":"In the preceding sendMail() method, you first create JMS-specific ConnectionFactory.<br>import javax.jms.Connection;<br>import javax.jms.ConnectionFactory;<br>import javax.jms.Destination;<br>import javax.jms.JMSException;<br>import javax.jms.MapMessage;<br>import javax.jms.MessageProducer;<br>import javax.jms.Session;<br>import org.apache.activemq.ActiveMQConnectionFactory;<br>import org.apache.activemq.command.ActiveMQQueue;<br>public class FrontDeskImpl implements FrontDesk {<br>\tpublic void sendMail(Mail mail) {<br>\t\tConnectionFactory cf =<br>\t\tnew ActiveMQConnectionFactory(\"tcp://localhost:61616\");<br>\t\tDestination destination = new ActiveMQQueue(\"mail.queue\");<br>\t\tConnection conn = null;<br>\t\ttry {<br>\t\t\tconn = cf.createConnection();<br>\t\t\tSession session =<br>\t\t\tconn.createSession(false, Session.AUTO_ACKNOWLEDGE);<br>\t\t\tMessageProducer producer = session.createProducer(destination);<br>\t\t\tMapMessage message = session.createMapMessage();<br>\t\t\tmessage.setString(\"mailId\", mail.getMailId());<br>\t\t\tmessage.setString(\"country\", mail.getCountry());<br>\t\t\tmessage.setDouble(\"weight\", mail.getWeight());<br>\t\t\tproducer.send(message);<br>\t\t\tsession.close();<br>\t\t\t} catch (JMSException e) {<br>\t\t\t\tthrow new RuntimeException(e);<br>\t\t\t} finally {<br>\t\t\t\tif (conn != null) {<br>\t\t\t\ttry {<br>\t\t\t\tconn.close();<br>\t\t\t\t} catch (JMSException e) {<br>\t\t\t\t}<br>\t\t\t}<br>\t\t}<br>\t}<br>}","opt":["True","False","topic","queue","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"The message broker URL is the default for ActiveMQ if you run it on localhost. In JMS, there are two types of destinations: queue and topic. As explained before, a queue is for the point-to-point communication model, while topic is for the publish-subscribe communication model."},{"q":"There are several types of messages defined in the JMS API, including:-","opt":["TextMessage","MapMessage","BytesMessage","All of the mentioned"],"ans":"d","explanation":"There are several types of messages defined in the JMS API, including TextMessage, MapMessage, BytesMessage, ObjectMessage, and StreamMessage."},{"q":"To send a JMS message with this template, you simply call:-","opt":["send","sendTo","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"To send a JMS message with this template, you simply call the send() method and provide a message destination, as well as a MessageCreator object, which creates the JMS message you are going to send."},{"q":"The MessageCreator interface declares method:-","opt":["createMessage()","create()","createMsg()","none of the mentioned"],"ans":"a","explanation":"The MessageCreator interface declares only a createMessage() method for you to implement."},{"q":"A JMS template helps you to obtain and release the JMS connection and session.","opt":["True","False"],"ans":"a","explanation":"A JMS template helps you to obtain and release the JMS connection and session, and it sends the JMS message created by your MessageCreator object."},{"q":"JMS sender and receiver classes can also extend to retrieve a JMS template:-","opt":["JmsGatewaySupport","JmsGateway","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"Just like your DAO class can extend JdbcDaoSupport to retrieve a JDBCtemplate, your JMS sender and receiver classes can also extend JmsGatewaySupport to retrieve a JMS template."},{"q":"When you need access to the JMS template.","opt":["setJmsTemplate","getJmsTemplate","getJms","none of the mentioned"],"ans":"b","explanation":"When you need access to the JMS template, you just make a call to getJmsTemplate()."},{"q":"Spring provides an implementation of SimpleMessageConvertor to handle the translation of a JMS message received.","opt":["True","False"],"ans":"a","explanation":"Spring provides an implementation of SimpleMessageConvertor to handle the translation of a JMS message received to a business object and the translation of a business object to a JMS message."},{"q":"By default, the JMS template uses SimpleMessageConverter for converting TextMessage to or from a string.","opt":["True","False"],"ans":"a","explanation":"By default, the JMS template uses SimpleMessageConverter for converting TextMessage to or from a string, BytesMessage to or from a byte array, MapMessage to or from a map, and ObjectMessage to or from a serializable object."},{"q":"For your front desk and back office classes, you can send and receive a map using the:-","opt":["convertAndSend()","receiveAndConvert()","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"For your front desk and back office classes, you can send and receive a map using the convertAndSend() and receiveAndConvert() methods, and the map will be converted to/from MapMessage."},{"q":"Which tag informs the spring container about the use of AspectJ annotation?","opt":["aop:aspectj-autowire","aop:aspectj-name","aop:aspectj-autoproxy","none of the mentioned"],"ans":"c","explanation":"To enable AspectJ annotation support in the Spring IoC container, you only have to define an empty XML element aop:aspectj-autoproxy in your bean configuration file."},{"q":"Which of the following is advice supported by Aspect Annotation?","opt":["@Before","@After","@AfterReturning","All of the mentioned"],"ans":"d","explanation":"AspectJ supports five types of advice annotations: @Before, @After, @AfterReturning, @AfterThrowing, and @Around."},{"q":"An advice is an action which comes into play at pointcuts.","opt":["True","False"],"ans":"b","explanation":"A pointcut is an expression to match a set of join points, while an advice is the action to take at a particular join point."},{"q":"Which advice is executed once a joint point finishes?","opt":["@Before","@After","@AfterReturning","@AfterThrowing"],"ans":"b","explanation":"An after advice is executed after a join point finishes, whenever it returns a result or throws an exception abnormally."},{"q":"Which advice is executed only when joint point returns or throws an exception?","opt":["@Before","@After","@AfterReturning","@AfterThrowing"],"ans":"c","explanation":"If you would like to perform logging only when a join point returns, you should replace the after advice with an after returning advice."},{"q":"Which advice combines all advices into one?","opt":["@Before","@After","@AfterThrowing","None of the mentioned"],"ans":"d","explanation":"It gains full control of a join point, so you can combine all the actions of the preceding advices into one single advice. You can even control when, and whether, to proceed with the original join point execution."},{"q":"An advice can access the current join point information by declaring an argument of type org.aspectj.lang.AdvicePoint in the advice method signature.","opt":["True","False"],"ans":"b","explanation":"An advice can access the current join point information by declaring an argument of type org.aspectj.lang.JoinPoint in the advice method signature."},{"q":"Which interface is implemented to specify precedence of aspects?","opt":["Ordered","ApplicationAspect","AspectPointcut","None of the mentioned"],"ans":"a","explanation":"The precedence of aspects can be specified either by implementing the Ordered interface."},{"q":"Alternative annotative way to specify precedence of aspects?","opt":["@Order","@Aspect","@PointCut","None of the mentioned"],"ans":"a","explanation":"The precedence of aspects can be specified either by implementing the Ordered interface or @Order Annotation."},{"q":"Method which returns the highest priority of aspect\u2019s join point?","opt":["getHighestPriority","getOrder","getHighOrder","getPriority"],"ans":"b","explanation":"The lower value returned by the getOrder() method represents higher priority."},{"q":"what will be the output of the code snippet<br>    import org.aspectj.lang.annotation.Aspect;<br>    import org.aspectj.lang.annotation.AfterThrowing;<br>Â <br>    @Aspect<br>    public class AfterThrowingExample <br>    {<br>Â <br>\t  @AfterThrowing(<br>\t    pointcut=\"com.xyz.myapp.SystemArchitecture.dataAccessOperation()\",<br>\t    throwing=\"ex\")<br>\t  public void doRecoveryActions(DataAccessException e)<br>          {<br>\t\tthrow new IllegalArgumentException();<br>\t    // ...[/expand]<br>\t  }<br>Â <br>    }","opt":["Runtime Error","IllegalArgumentException","BeanCreation Exception","None of the mentioned"],"ans":"c","explanation":"The throwing keyword in pointcut annotation doesn\u2019t matches with the method\u2019s parameter exception."},{"q":"Which instantiation model is supported by AspectJ?","opt":["perthis","pertarget","none of the mentioned","all of the mentioned"],"ans":"d","explanation":"Spring supports AspectJ perthis and pertarget instantiation models."},{"q":"Which instantiation model is supported by AspectJ?","opt":["perthis","pertarget","none of the mentioned","all of the mentioned"],"ans":"c","explanation":"percflow, percflowbelow, and pertypewithin are not currently supported."},{"q":"Which tag in XML is used to declare @Before advice\u2019s method?","opt":["aop:before","aop:after","aop:afterthrow","None of the mentioned"],"ans":"a","explanation":"Before advice runs before a matched method execution. It is declared inside an aop:aspect using the aop:before element."},{"q":"Which tag in XML is used to declare @Before advice\u2019s method?","opt":["aop:before","aop:after-returning","aop:afterthrow","None of the mentioned"],"ans":"b","explanation":"- After returning advice runs when a matched method execution completes normally. It is declared inside an aop:aspect in the same way as before advice."},{"q":"Integration of Spring which has each application produce files of shared data for others to consume.","opt":["File transfer","Shared Database","Remote Procedure Invocation","Messaging"],"ans":"a","explanation":"File transfer: Have each application produce files of shared data for others to consume and consume files that others have produced."},{"q":"Integration of Spring which has the applications store the data they want to share in a common database.","opt":["File transfer","Shared Database","Remote Procedure Invocation","Messaging"],"ans":"b","explanation":"This usually takes the form of a database to which different applications have access."},{"q":"Integration of Spring which has each application expose some of its procedures so that they can be invoked remotely and have applications invoke them to initiate behavior and exchange data.","opt":["File transfer","Shared Database","Remote Procedure Invocation","Messaging"],"ans":"c","explanation":"There is specific support for optimizing RPC (remote procedure calls such as SOAP, RMI, and HTTP Invoker) exchanges using Spring Integration."},{"q":"Integration of Spring which has each application connect to a common messaging system and exchange data and invoke behavior using messages.","opt":["File transfer","Shared Database","Remote Procedure Invocation","Messaging"],"ans":"d","explanation":"This style, most enabled by JMS in the JEE world, also describes other asynchronous or multicast publish/subscribe architectures."},{"q":"Using an ESB lets you hide the origin of the message from the code that\u2019s handling it.","opt":["True","False"],"ans":"a","explanation":"You\u2019ll use this solution as an easy way to see how a Spring Integration solution can be built."},{"q":"As with a standard MDP, a configuration for the ConnectionFactory exists.","opt":["True","False"],"ans":"a","explanation":"There\u2019s also a lot of other schem as required for using the configuration elements available in Spring Integration."},{"q":"The configuration starts with the inboundHelloJMSMessageChannel channel, which tells Spring Integration what to name the point-to-point connection from the message queue to the:-","opt":["service-activator","service","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"You typically define a new channel for every point-to-point connection."},{"q":"An adapter is a component that knows how to speak to a specific type of subsystem and translate messages on that subsystem into something that can be used in the Spring Integration bus only.","opt":["True","False"],"ans":"a","explanation":"Adapters also do the same in reverse, taking messages on the Spring Integration bus and translating them into something a specific subsystem will understand."},{"q":"A service-activator, however, only helps you invoke your application\u2019s business logic on receipt of a message.","opt":["True","False"],"ans":"a","explanation":"What you do in the business logic, connecting to another system or not, is up to you."},{"q":"The next component, a service-activator, listens for messages coming into that channel and invokes the bean referenced by the:-","opt":["ref","after","before","all of the mentioned"],"ans":"a","explanation":"The next component, a service-activator, listens for messages coming into that channel and invokes the bean referenced by the ref attribute, which in this case is the bean defined previously: inboundHelloWorldJMSPingServiceActivator."},{"q":"Headers Found in Spring Integration Messages:-","opt":["ID","TIMESTAMP","CORRELATION_ID","All of the mentioned"],"ans":"d","explanation":"Constant ID This is a unique value assigned to the message by the Spring Integration engine."},{"q":"Some header values are specific to the type of the source message payload.","opt":["True","False"],"ans":"a","explanation":"Some header values are specific to the type of the source message payload; for example, payloads sourced from a file on the file system are different from those coming in from a JMS queue, which is different from messages coming from an email system."},{"q":"Component-specific headers are the constants defined for files on:-","opt":["org.springframework.integration.file.FileHeaders: FILENAME","org.springframework.integration.file.FileHeaders: PREFIX","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"An example of component-specific headers are the constants defined for files on org.springframework.integration.file.FileHeaders: FILENAME and PREFIX."},{"q":"Annotation to get access to header metadata:-","opt":["@Ref","@service","@Header","None of the mentioned"],"ans":"c","explanation":"Another way to get access to header metadata is to simply have it passed as parameters to your component\u2019s method. You simply annotate the parameter with the @Header annotation, and Spring Integration will take care of the rest."},{"q":"The code for the service-activator has changed to reflect the fact that you\u2019re expecting a message containing a message of type:-","opt":["Message<java.io.File>","Message<java.io>","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"The code for the service-activator has changed to reflect the fact that you\u2019re expecting a message containing a message of type Message<java.io.File>"},{"q":"When you call the receive() method on a JMS message consumer to receive a message.","opt":["send","receive","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"When you call the receive() method on a JMS message consumer to receive a message, the calling thread is blocked until a message is available."},{"q":"EJB component which was introduced for asynchronous reception of JMS messages.","opt":["message-driven bean","message-driven","message bean","none of the mentioned"],"ans":"a","explanation":"Starting with EJB 2.0, a new kind of EJB component called a message-driven bean (MDB) was introduced for asynchronous reception of JMS messages."},{"q":"MDB must implements interfaces:-","opt":["javax.ejb.MessageDrivenBean","javax.jms.MessageListener","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"An MDB must implement both the javax.ejb.MessageDrivenBean and javax.jms.MessageListener interfaces and override all EJB life cycle methods (ejbCreate and ejbRemove)."},{"q":"In EJB 3.0, an MDB can be a POJO that implements the MessageListener interface and is annotated with the:-","opt":["@MessageDrive","@Message","all of the mentioned","@MessageDriven"],"ans":"d","explanation":"In EJB 3.0, an MDB can be a POJO that implements the MessageListener interface and is annotated with the @MessageDriven annotation."},{"q":"You create a message listener to listen for JMS messages. This negates the need for the approach taken in BackOfficeImpl in previous recipes.","opt":["True","False"],"ans":"a","explanation":"For example, the following MailListener listens for JMS messages that contain mail information:-"},{"q":"A message listener must implement the:-","opt":["javax.jms.MessageListener","javax.jms.Message","javax.jms","none of the mentioned"],"ans":"a","explanation":"A message listener must implement the javax.jms.MessageListener interface."},{"q":"When a JMS message arrives, the onMessage() method will be called with the message as the method argument.","opt":["True","False"],"ans":"a","explanation":"In this sample, you simply display the mail information to the console."},{"q":"Method to convert MapMessage Object into Spring runtime exception JmsException.","opt":["JmsUtils.convertJmsAccessException()","JmsUtils.convertJmsAccess()","JmsUtils.convertJms()","none of the mentioned"],"ans":"a","explanation":"When extracting message information from a MapMessage object, you need to handle the JMS API\u2019s JMSException. You can make a call to JmsUtils.convertJmsAccessException() to convert it into Spring runtime exception JmsException."},{"q":"Spring provides several types of message listener containers:-","opt":["SimpleMessageListenerContainer","DefaultMessageListenerContainer","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Spring provides several types of message listener containers for you to choose from in the org.springframework.jms.listener package, of which SimpleMessageListenerContainer and DefaultMessageListenerContainer are the most commonly used."},{"q":"If you have a transaction requirement in receiving messages, you have to use:-","opt":["SimpleMessageListenerContainer","DefaultMessageListenerContainer","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"If you have a transaction requirement in receiving messages, you have to use DefaultMessageListenerContainer."},{"q":"You have to set the delegate property of MessageListenerAdapter to your target bean.","opt":["True","False"],"ans":"a","explanation":"By default, this adapter will call the method whose name is handleMessage on that bean."},{"q":"Using Spring JMS support with a very simple instance of:-","opt":["org.apache.activemq.ActiveMQConnectionFactory","org.apache.activemq.ActiveMQConnection","org.apache.activemq.ActiveMQ","none of the mentioned"],"ans":"a","explanation":"We\u2019ve explored using Spring JMS support with a very simple instance of org.apache.activemq.ActiveMQConnectionFactory as our connection factory."},{"q":"ActiveMQ, provides only one pooled connection factory class alternative.","opt":["True","False"],"ans":"b","explanation":"ActiveMQ provides two, actually: one for use consuming messages with a JCA connector and another one for use outside of a JCA container."},{"q":"It caches consumers correctly, or use Spring ConnectionFactory implementations.","opt":["MessageListenerContainer","MessageListener","MessageContainer","None of the mentioned"],"ans":"a","explanation":"MessageListenerContainer implementations mechanism (MDPs), because it caches consumers correctly, or use Spring ConnectionFactory implementations."},{"q":"Implementation which returns the same underlying JMS connection each time (which is thread-safe according to the JMS API) and ignores calls to the close() method.","opt":["org.springframework.jms.connection.SingleConnectionFactory","org.springframework.jms.connection.Single","org.springframework.jms.connection.SingleConnection","none of the mentioned"],"ans":"a","explanation":"org.springframework.jms.connection.SingleConnectionFactory, returns the same underlying JMS connection each time (which is thread-safe according to the JMS API) and ignores calls to the close() method."},{"q":"To send a message into the bus and transform it before working with it further.","opt":["adding extra headers or augmenting the payload","transformer","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"You might also want to transform a message by enriching it\u2014adding extra headers or augmenting the payload so that components downstream in the processing pipeline can benefit from it. Use a transformer component to take a Message of a payload and send the Message out with a payload of a different type."},{"q":"Spring Integration provides a transformer message endpoint to permit the augmentation of the message headers.","opt":["True","False","randomlySelected","randomlySelectedForSurvey","randomly","none of the mentioned"],"ans":"b","explanation":"As before, this code is simply a method with an input and an output. The output is constructed dynamically using MessageBuilder to create a message that has the same payload as the input message as well as copy the existing headers and adds an extra header: randomlySelectedForSurvey."},{"q":"Spring Integration provides the ability to catch exceptions and send them to an error channel of your choosing. By default, it\u2019s a global channel called :-","opt":["error","exceptionChannel","exception","errorChannel"],"ans":"d","explanation":"You can have components subscribe to messages from this channel to override the exception handling behavior."},{"q":"The errorChannel doesn\u2019t need to be a service-activator.","opt":["True","False"],"ans":"a","explanation":"We just use it for convenience here. The code for the following service-activator depicts some of the machinations you might go through to build a handler for the errorChannel."},{"q":"All errors thrown from Spring Integration components will be a subclass of:-","opt":["Messaging","MessagingException","Exception","None of the mentioned"],"ans":"b","explanation":"MessagingException carries a pointer to the original Message that caused an error, which you can dissect for more context information."},{"q":"One way to discriminate by Exception type is to use:-","opt":["org.springframework.integration.router.ErrorMessageExceptionType","org.springframework.integration.router.ErrorMessageException","org.springframework.integration.router.ErrorMessageExceptionTypeRouter","none of the mentioned"],"ans":"c","explanation":"Sometimes, more specific error handling is required. One way to discriminate by Exception type is to use the org.springframework.integration.router.ErrorMessageExceptionTypeRouter class."},{"q":"Sending all the errors to the same channel can eventually lead to a large switch-laden class that\u2019s too complex to maintain.","opt":["True","False"],"ans":"a","explanation":"Instead, it\u2019s better to selectively route error messages to the error channel most appropriate to each integration."},{"q":"You can explicitly specify on what channel errors for a given integration should go.","opt":["True","False"],"ans":"a","explanation":"A component (service-activator) that upon receiving a message, adds a header indicating the name of the error channel."},{"q":"Spring Integration will use that header and forward errors encountered in the processing of this message to that channel.","opt":["True","False"],"ans":"a","explanation":"The following example shows a component (service-activator) that upon receiving a message, adds a header indicating the name of the error channel. Spring Integration will use that header and forward errors encountered in the processing of this message to that channel."},{"q":"All errors that come from the integration in which this component is used will be directed to:-<br>import org.apache.log4j.Logger;<br>import org.springframework.integration.annotation.ServiceActivator;<br>import org.springframework.integration.core.Message;<br>import org.springframework.integration.core.MessageHeaders;<br>import org.springframework.integration.message.MessageBuilder;<br>public class ServiceActivatorThatSpecifiesErrorChannel {<br>private static final Logger logger = Logger.getLogger(<br>\tServiceActivatorThatSpecifiesErrorChannel.class);<br>\t@ServiceActivator<br>\tpublic Message<?> startIntegrationFlow(Message<?> firstMessage)<br>\tthrows Throwable {<br>\treturn MessageBuilder.fromMessage(firstMessage).<br>\tsetHeaderIfAbsent( MessageHeaders.ERROR_CHANNEL,<br>\t\"errorChannelForMySolution\").build();<br>\t}<br>}","opt":["customErrorChannel","customError","errorChannel","none of the mentioned"],"ans":"a","explanation":"Thus, all errors that come from the integration in which this component is used will be directed to customErrorChannel, to which you can subscribe any component you like."},{"q":"You want to control how steps are executed, perhaps to eliminate a needless waste of time by:-","opt":["concurrent steps","decisions","sequential steps","all of the mentioned"],"ans":"d","explanation":"There are different ways to change the runtime profile of your jobs, mainly by exerting control over the way steps are executed: concurrent steps, decisions, and sequential steps."},{"q":"Typical jobs of almost any complexity will have multiple steps, however.","opt":["True","False"],"ans":"a","explanation":"A step provides a boundary (transactional or not) to the beans and logic it encloses."},{"q":"There\u2019s nothing to prevent you from having many steps within the flow elements.","opt":["True","False"],"ans":"a","explanation":"Nor was there anything preventing you from having more steps after the split element. The split element, like the step elements, takes a next attribute as well."},{"q":"Spring Batch provides a mechanism to offload processing to another process.","opt":["chunking","remote chunking","remote","none of the mentioned"],"ans":"b","explanation":"Spring Batch provides a mechanism to offload processing to another process. This feature, called remote chunking, is new in Spring Batch 2.x."},{"q":"Pattern which refers to the arrangement of multiple JMS clients all consuming the same queue messages.","opt":["aggressive-consumer","aggressive","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"If one client consumes a message and is busy processing, other idle queues will get the message instead."},{"q":"Spring Batch ships with only handler, which executes steps in multiple threads using a TaskExecutor strategy.","opt":["TaskExecutorPartition","TaskExecutorPartitionHandler","TaskExecutorPartitionHandle","TaskExecutor"],"ans":"b","explanation":"This simple improvement might be enough of a justification for this feature! If you\u2019re really hurting, however, you can extend it."},{"q":"To determine the next step is the simplest example of a conditional flow.","opt":["Exit","Status","ExitStatus","None of the mentioned"],"ans":"c","explanation":"Spring Batch facilitates this through the use of the stop, next, fail, and end elements."},{"q":"If you want to vary the execution flow based on some logic more complex than a job\u2019s ExitStatuses:-","opt":["ExitStatus","Exit","Decision","All of the mentioned"],"ans":"c","explanation":"If you want to vary the execution flow based on some logic more complex than a job\u2019s ExitStatuses, you may give Spring Batch a helping hand by using a decision element and providing it with an implementation of a JobExecutionDecider."},{"q":"Spring Batch work with a system scheduler:-","opt":["cron","autosys","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"Spring Batch work with a system scheduler such as cron or autosys, or from a web application."},{"q":"JobLauncher reference you configured previously is obtained and used to then launch an instance of a Job.","opt":["True","False"],"ans":"a","explanation":"The result is a JobExecution. You can interrogate the JobExecution for information on the state of the Job, including its exit status and runtime status."},{"q":"TaskExecutor that will spawn a thread of execution and manage that thread without blocking.","opt":["Async","Sync","Simple","SimpleAsyncTaskExecutor"],"ans":"d","explanation":"SimpleAsyncTaskExecutor will spawn a thread of execution and manage that thread without blocking."},{"q":"The CommandLineJobRunner for success will return system error codes:-","opt":["0","1","2","none of the mentioned"],"ans":"a","explanation":"The CommandLineJobRunner will even return system error codes (0 for success, 1 for failure, and 2 for an issue with loading the batch job) so that a shell (such as used by most system schedulers) can react or do something about the failure."},{"q":"More complicated return codes can be returned by creating and declaring a top-level bean that implements the interface:-","opt":["ExitCode","ExitCodeMapper","ExitMapper","All of the mentioned"],"ans":"b","explanation":"More complicated return codes can be returned by creating and declaring a top-level bean that implements the interface ExitCodeMapper, in which you can specify a more useful translation of exit status messages to integer-based error codes that the shell will see on process exit."},{"q":"The bean is recognized and becomes part of the application context because of the:-","opt":["@Component","@Attr","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"The bean is recognized and becomes part of the application context because of the @Component annotation, which we enabled with the context:component-scan element in our reworked batch.xml (which we\u2019re calling scheduled_batch.xml)."},{"q":"To parameterize a job, which is then available to your steps through Spring Batch expression language.","opt":["Job","Steps","JobParameters","None of the mentioned"],"ans":"c","explanation":"A job is a prototype of a JobInstance. JobParameters are used to provide a way of identifying a unique run of a job (a JobInstance). These JobParameters allow you to give input to your batch process, just as you would with a method definition in Java."},{"q":"Transaction capabilities are built on top of the first class support already provided by the core Spring framework.","opt":["True","False"],"ans":"a","explanation":"Where relevant, Spring Batch surfaces the configuration so that you can control it."},{"q":"Spring core framework provides first-class support for transactions.","opt":["Transaction","TransactionManager","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"You simply wire up a TransactionManager and give Spring Batch a reference, just as you would in any regular JdbcTemplate or HibernateTemplate solution."},{"q":"The batch.xml file establishes a:-","opt":["BasicDataSource","DataSourceTransactionManager","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"The TransactionManager and BasicDataSource were then wired to the JobRepository, which was in turn wired to the JobLauncher, which you used to launch all jobs thus far."},{"q":"Spring Batch will, by default, try to pluck the:-","opt":["PlatformTransactionManager","transactionManager","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"The transaction manager reference can be specified, but in your solutions, it wasn\u2019t required because Spring Batch will, by default, try to pluck the PlatformTransactionManager named transactionManager from the context and use it."},{"q":"Spring Batch excels in the robustness it surfaces as simple configuration options for the edge and failure cases.","opt":["True","False"],"ans":"a","explanation":"If a write fails on an ItemWriter, or some other exception occurs in processing, Spring Batch will rollback the transaction."},{"q":"Element to configure this for the step:-","opt":["no-rollback-exception-classes","no-rollback-exception","no-rollback","none of the mentioned"],"ans":"a","explanation":"You can use the no-rollback-exception-classes element to configure this for the step. The value is a list of Exception classes that should not cause the transaction to roll back."},{"q":"no-rollback-exception-classes element Exception classes that should not cause the transaction to roll back.<br><step id = \"step2\"><br>   <tasklet><br>           <chunk reader=\"reader\" writer=\"writer\" commit-interval=\"10\" /><br>           <no-rollback-exception-classes><br>           <include class=\"com.yourdomain.exceptions.YourBusinessException\"/><br>           <\/no-rollback-exception-classes><br>   <\/tasklet><br><\/step>","opt":["True","False"],"ans":"a","explanation":"You can use the no-rollback-exception-classes element to configure this for the step. The value is a list of Exception classes that should not cause the transaction to roll back."},{"q":"You want to work with a resource that may fail when you try to read from or write to it.","opt":["TransactionManager","Transaction","Spring batch retry","All of the mentioned"],"ans":"c","explanation":"Use Spring Batch retry capabilities to systematically retry the read or write."},{"q":"Some invocations will fail but may be retried with some likelihood of success in a transactional scenario.","opt":["True","False"],"ans":"b","explanation":"For example, an update to the database resulting in org.springframework.dao.DeadlockLoserDataAccessException might be usefully retried."},{"q":"You can specify exception classes on which to retry the operation.<br><step id = \"step23\"><br>       <tasklet transaction-manager=\"transactionManager\"><br>            <chunk reader=\"csvFileReader\" writer=\"jdbcItemWriter\" commit-interval=\"10\"ï retry-limit=\"3\" cache-capacity=\"10\"><br>           <retryable-exception-classes><br>           <include class=\"org.springframework.dao.DeadlockLoserDataAccessException\"/><br>           <\/retryable-exception-classes> <br>           <\/chunk><br>       <\/tasklet><br><\/step>","opt":["True","False"],"ans":"a","explanation":"As with the rollback exceptions, you can delimit this list of exceptions with newlines or commas."},{"q":"You can leverage Spring Batch support for retries and recovery in your own code.","opt":["True","False"],"ans":"a","explanation":"For example, you can have a custom ItemWriter in which retry functionality is desired or even an entire service interface for which retry support is desired."},{"q":"The template that (much like its various other Template cousins) isolates your logic from the nuances of retries and instead enables you to write the code as though you were only going to attempt it once.","opt":["Retry","RetryTemplate","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"Spring Batch supports these scenarios through the RetryTemplate that (much like its various other Template cousins) isolates your logic from the nuances of retries and instead enables you to write the code as though you were only going to attempt it once."},{"q":"The RetryTemplate supports many use cases, with convenient APIs to wrap.","opt":["True","false"],"ans":"a","explanation":"Otherwise tedious retry/fail/recover cycles in concise, single-method invocations."},{"q":"The RetryTemplate itself is configured in the Spring context, although it\u2019s trivial to create in code.","opt":["True","False"],"ans":"a","explanation":"I declare it in the Spring context only because there is some surface area for configuration when creating the object, and I try to let Spring handle the configuration."},{"q":"One of the more useful settings for the RetryTemplate is the :-","opt":["BackOff","Back","BackOffPolicy","All of the mentioned"],"ans":"c","explanation":"BackOffPolicy dictates how long the RetryTemplate should back off between retries."},{"q":"Spring Batch provides a lot of flexibility and guarantees to your application, but it cannot work in a vacuum. To do its work:-","opt":["Job","JobRepo","JobRepository","All of the mentioned"],"ans":"c","explanation":"To do its work, the JobRepository requires a database. Additionally, there are several collaborators required for Spring Batch to do its work. This configuration is mostly boilerplate."},{"q":"There\u2019s only one really useful implementation of the JobRepository interface, which stores information about the state of the batch processes in a database.","opt":["SimpleJobRepository","SimpleJob","SimpleRepo","All of the mentioned"],"ans":"a","explanation":"Creation is done through a JobRepositoryFactoryBean. Another standard factory, MapJobRepositoryFactoryBean is useful mainly for testing because its state is not durable \u2013 it\u2019s an in-memory implementation. Both factories create an instance of SimpleJobRepository."},{"q":"To load the contents of a properties file (batch.properties) whose values you use to configure the data source.","opt":["PropertyPlaceholder","PropertyPlaceholderConfigurer","Property","PropertyConfigurer"],"ans":"b","explanation":"You need to place values for your particular database in this file. This example uses Spring\u2019s property schema (\u201cp\u201d) to abbreviate the tedious configuration."},{"q":"MapJobRegistry instance. This is critical\u2014it is the central store for information regarding a given Job.","opt":["True","False"],"ans":"a","explanation":"It controls the \u201cbig picture\u201d about all Jobs in the system. Everything else works with this instance."},{"q":"SimpleJobLauncher, whose sole purpose is to give you a mechanism to launch batch jobs, where a \u201cjob\u201d in this case is our batch solution.","opt":["True","False"],"ans":"a","explanation":"The jobLauncher is used to specify the name of the batch solution to run as well as any parameters required."},{"q":"Spring Batch models solutions using XML schema.","opt":["True","False"],"ans":"a","explanation":"This schema is new to Spring Batch 2.1."},{"q":"However, it\u2019s important to wear another hat, that of a DBA, when writing applications.","opt":["True","False"],"ans":"a","explanation":"A common solution is to create a denormalized table whose contents can be coerced into valid data once inside the database, perhaps by a trigger on inserts."},{"q":"Indeed, a step could be considered the smallest unit of work for a job. Input (what\u2019s read) is passed to the Step and potentially processed; then output (what\u2019s written) is created from the step.","opt":["Steplet","Tasklet","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"This processing is spelled out using a Tasklet. You can provide your own Tasklet implementation or simply use some of the preconfigured configurations for different processing scenarios."},{"q":"Attribute to configure how many items will be processed before the transaction is committed all the input is sent to the writer.","opt":["interval","commit","commit-interval","none of the mentioned"],"ans":"c","explanation":"If there is a transaction manager in play, the transaction is also committed."},{"q":"Class which delegates the task of delimiting fields and records within a file to a LineMapper, which in turn delegates the task of identifying the fields within that record, to LineTokenizer.","opt":["org.springframework.batch.item.file.FlatFileItemReader","org.springframework.batch.item.file.FlatFile","org.springframework.batch.item.file.FlatFileItem","org.springframework.batch.item.file.FileItemReader"],"ans":"a","explanation":"The FlatFileItemReader also declares a fieldSetMapper attribute that requires an implementation of FieldSetMapper."},{"q":"The names and values for the named parameters are being created by the bean configured for the itemSqlParameterSourceProvider property, an instance of the interface","opt":["BeanPropertyItemSqlParameterSourceProvider","BeanPropertyItemSqlParameterSource","BeanPropertyItemSqlParameter","All of the mentioned"],"ans":"a","explanation":"BeanPropertyItemSqlParameterSourceProvider, whose sole job it is to take JavaBean properties and make them available as named parameters corresponding to the property name on the JavaBean."},{"q":"There\u2019s support for writing JMS:-","opt":["JmsItemWriter","JpaItemWriter","JdbcBatchItemWriter","All of the mentioned"],"ans":"d","explanation":"There\u2019s support for writing JMS (JmsItemWriter), JPA (JpaItemWriter), JDBC (JdbcBatchItemWriter), Files (FlatFileItemWriter), iBatis (IbatisBatchItemWriter), Hibernate (HibernateItemWriter), and more."},{"q":"The processor attribute on the chunk element expects a reference to a bean of the interface:-","opt":["org.springframework.batch.item.Item","org.springframework.batch.item","org.springframework.batch.item.ItemProcessor","none of the mentioned"],"ans":"c","explanation":"The processor attribute on the chunk element expects a reference to a bean of the interface org.springframework.batch.item.ItemProcessor."},{"q":"Spring Batch provides a convenience class, CompositeItemProcessor, which forwards the output of the filter to the input of the successive filter.","opt":["True","False"],"ans":"a","explanation":"In this way, you can write many, singly focused ItemProcessors and then reuse them and chain them as necessary."},{"q":"If the preceding job was run on a batch with a 100 rows, each item was read and passed through the processor, and it found 10 items invalid (it returned null 10 times), the value for the filter_count column would be:-","opt":["100","1","10","1000"],"ans":"c","explanation":"You could see that a 100 items were read from the read_count. The write_count column would reflect that 10 items didn\u2019t make it and would show 90."},{"q":"To take an input file or a payload and reliably, and systematically, decompose it into events that an ESB can work with:-","opt":["Splitter","Spring Batch","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"You have a file with a million records in it. This file\u2019s too big to handle as one event; it\u2019s far more natural to react to each row as an event. Spring Batch works very well with these types of solutions. It allows you to take an input file or a payload and reliably, and systematically, decompose it into events that an ESB can work with."},{"q":"Spring Integration does support reading files into the bus.","opt":["True","False"],"ans":"a","explanation":"Spring Batch does support providing custom, unique endpoints for data."},{"q":"No processing system (such as an ESB) can deal with a million records at once efficiently.","opt":["True","False"],"ans":"a","explanation":"Strive to decompose bigger events and messages into smaller ones."},{"q":"Spring Batch reads the file, transforms the records into:-","opt":["objects","outputs","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"Spring Batch reads the file, transforms the records into objects, and writes the output to a JMS topic with a key correlating the original batch to the JMS message."},{"q":"The BPM engine would thread together the different actors and work lists,","opt":["True","False"],"ans":"a","explanation":"The BPM engine would thread together the different actors and work lists, allow work to continue over the course of days instead of the small millisecond timeframes Spring Integration is more geared to."},{"q":"You want to expose an interface to clients of your service, without betraying the fact that your service is implemented in terms of messaging middleware.","opt":["Enterprise Integration Patterns","Gateway","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Use a gateway\u2014a pattern from the classic book Enterprise Integration Patterns by Gregor Hohpe and Bobby Woolf (Addison-Wesley, 2004) that enjoys rich support in Spring Integration."},{"q":"Serving to abstract away the functionality of other components in an abbreviated interface to provide courser functionality.","opt":["facade","faÃ§ade","gateway","none of the mentioned"],"ans":"b","explanation":"You might use a faÃ§ade to build an interface oriented around vacation planning that in turn abstracts away the minutiae of using a car rental, hotel reservation, and airline reservation system."},{"q":"The capability to hide messaging behind a POJO interface.","opt":["Lingo","JCA","JMS","All of the mentioned"],"ans":"d","explanation":"Lingo, a project from Codehaus.org that is no longer under active development, had such a feature that was specific to JMS and the Java EE Connector Architecture (JCA \u2013it was originally used to talk about the Java Cryptography Architecture, but is more commonly used for The Java EE Connector Architecture now)."},{"q":"The most fundamental support for gateways comes from the Spring Integration class:-","opt":["SimpleMessagingGateway","SimpleMessaging","SimpleGateway","None of the mentioned"],"ans":"a","explanation":"The class provides the ability to specify a channel on which requests should be sent and a channel on which responses are expected."},{"q":"The SimpleMessagingGateway needs a request and a response channel, and it coordinates the rest.","opt":["True","False"],"ans":"a","explanation":"You\u2019re doing nothing but forwarding the request to a service-activator, which in turn adds the operands and sends them out on the reply channel."},{"q":"The first thing that the client configuration does is import a shared application context (to save typing if nothing else) that declares a JMS connection factor.","opt":["True","False"],"ans":"a","explanation":"The first thing that the client configuration does is import a shared application context (to save typing if nothing else) that declares a JMS connection factory that you reference in the client and service application contexts."},{"q":"Messages sent on the requests channel are forwarded to the:-","opt":["jms:outbound-gateway","jms:outbound","jms-gateway","all of the mentioned"],"ans":"a","explanation":"The jms:outbound-gateway is the component that does most of the work. It takes the message you created and sends it to the request JMS destination, setting up the reply headers and so on."},{"q":"The gateway element simply exists to identify the component and the interface.","opt":["True","False"],"ans":"a","explanation":"The gateway element simply exists to identify the component and the interface, to which the proxy is cast and made available to clients."},{"q":"There is no coupling between the client facing interface exposed via the gateway component and the interface of the service that ultimately handles the messages.","opt":["True","False"],"ans":"a","explanation":"We use the interface for the service and the client to simplify the names needed to understand everything that\u2019s going on."},{"q":"The service-activator is what handles actual processing and there\u2019s no mention of a response channel, for either the service-activator, or for the inbound JMS gateway.","opt":["True","False"],"ans":"a","explanation":"The service-activator looks, and fails to find, a reply channel and so uses the reply channel created by the inbound JMS gateway component, which in turn has created the reply channel based on the header metadata in the inbound JMS message."},{"q":"To fork the process flow from one component to many, either all at once or to a single one based on a predicate condition.","opt":["splitter","fork","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"You can use a splitter component (and maybe its cohort, the aggregator component) to fork and join (respectively) control of processing."},{"q":"A splitter takes an input message and asks you, the user of the component, on what basis it should split the Message.","opt":["True","False"],"ans":"a","explanation":"You\u2019re responsible for providing the split functionality."},{"q":"Spring Integration ships with useful splitters that require no customization.","opt":["Splitter","XPathMessageSplitter","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"In a few cases, Spring Integration ships with useful splitters that require no customization. One example is the splitter provided to partition an XML payload along an XPath query, XPathMessageSplitter."},{"q":"Return type of the method annotated by the @Splitter annotation is of type:-","opt":["java.util.Collection","java.util.Date","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"The configuration for this is not terribly different from the previous solutions. The Java code is just about the same as well, except that the return type of the method annotated by the @Splitter annotation is of type java.util.Collection."},{"q":"Annotation which collects a series of messages (based on some correlation that you help Spring Integration make between the messages).","opt":["@After","@Splitter","@Aggregator","None of the mentioned"],"ans":"c","explanation":"An @Aggregator collects a series of messages (based on some correlation that you help Spring Integration make between the messages) and publishes a single message to the components downstream."},{"q":"To determine how many messages to read until it can stop:-","opt":["SequenceSizeCompletionStrategy","SequenceSizeCompletion","SequenceSize","None of the mentioned"],"ans":"a","explanation":"There are many ways for Spring Integration to correlate incoming messages. To determine how many messages to read until it can stop, it uses the class SequenceSizeCompletionStrategy, which reads a well known header value (aggregators are often used after a splitter."},{"q":"For correlation when you might not have a size but know that you\u2019re expecting messages that share a common header value within a known time, Spring Integration provides the HeaderAttributeCorrelationStrategy.","opt":["True","False"],"ans":"a","explanation":"In this way, it knows that all messages with that value are from the same group, in the same way that your last name identifies you as being part of a larger group."},{"q":"The only custom logic is a POJO with an @Aggregator annotation on a method expecting a collection of Message objects.","opt":["True","False"],"ans":"a","explanation":"It could, of course, be a collection of Customer objects, because they are what you\u2019re expecting as output from the previous splitter."},{"q":"You want to conditionally move a message through different processes based on some criteria.","opt":["router component","EAI","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"You can use a router component to alter the processing flow based on some predicate. You can also use a router to multicast a message to many subscribers (as you did with the splitter)."},{"q":"There are some convenient default routers available to fill common needs:-","opt":["PayloadTypeRouter","PayloadType","Payload","None of the mentioned"],"ans":"a","explanation":"There are some convenient default routers available to fill common needs, such as payload-type\u2013based routing (PayloadTypeRouter) and routing to a group or list of channels (RecipientListRouter)."},{"q":"To receive messages from an external system and process them using Spring Integration.","opt":["channel","channel adapter","EJP","none of the mentioned"],"ans":"b","explanation":"Spring Integration makes it trivially easy to build one."},{"q":"Adapters are opaque in nature.","opt":["True","False"],"ans":"a","explanation":"Your external system interfaces with the adapter."},{"q":"Sometimes, functionality is made available from within the application via:-","opt":["Stable API","Cohesive API","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Sometimes, functionality is made available from within the application via a cohesive, stable API but in a component model or form that isn\u2019t directly accessible to the bus."},{"q":"You use Spring Integration\u2019s inbound-channel-adapter element to wire the TwitterMessageSource and a poller element.","opt":["True","False"],"ans":"a","explanation":"The poller element is configured to run every 10 seconds and to consume as many as 100 messages each time it runs."},{"q":"The API surfaces a Paging object, which works something like Criteria in Hibernate.","opt":["True","False"],"ans":"a","explanation":"You can configure how many results to return using the count property. The most interesting option is called the sinceId, which lets you search for all records occurring after the Status having the ID equal to the value given as the sinceId."},{"q":"You want to share object state across multiple virtual machines.","opt":["Terracotta","Hibernate Transaction","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"You can use Terracotta to build such a solution. Terracotta (http://www.terracotta.org) is a free open source clustering solution."},{"q":"The company, Terracotta, has also recently become the corporate sponsor of:-","opt":["Ehcache","Quartz","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"The company, Terracotta, has also recently become the corporate sponsor of the Ehcache and Quartz projects."},{"q":"Terracotta works like many other clustered caches, except that, in addition to being a good Hibernate clustered cache.","opt":["True","False"],"ans":"a","explanation":"It also works as a mostly unnoticeable engine to enable API-free shared state across a cluster."},{"q":"Terracotta doesn\u2019t use serialization of objects.","opt":["True","False"],"ans":"a","explanation":"Terracotta doesn\u2019t use serialization of objects (not even highly compact serialization like Swift, Google\u2019s Protocol Buffers, Coherence Pofs, or Hazelcast DataSerializables), and instead ferries around deltas of VM memory across the cluster."},{"q":"Terracotta works as a JVM agent that monitors the object graph of a given JVM instance.","opt":["True","False"],"ans":"a","explanation":"It ensures replication of object state across a cluster."},{"q":"Terracotta is different than most clustered caches today because it has no visible API","opt":["True","False"],"ans":"a","explanation":"Terracotta is different than most clustered caches today because it has no visible API, and because it\u2019s far more efficient in conveying the changed state to nodes across the cluster."},{"q":"Terracotta has a client/server architecture.","opt":["True","False"],"ans":"a","explanation":"The server, in this case, is the one that contains the original working memory."},{"q":"To deploy a Terracotta application, you first download the distribution. The distribution provides :-","opt":["utility scripts","JAR files","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"The distribution provides utility scripts, as well as JARs. You may download Terracotta from http://www.terracotta.org."},{"q":"On Unix-like operating systems, you start Terracotta as :-","opt":["$TERRACOTTA HOME/bin/start-tc-server.sh \u2013f $PATH TO TERRACOTTA CONFIGURATION","$TERRACOTTA HOME/bin/start-tc-server.sh \u2013f $PATH TO TERRACOTTA","$TERRACOTTA HOME/bin/start-tc-server.sh \u2013f $PATH TO TERRACOTTA bin","None of the mentioned"],"ans":"a","explanation":"On Unix-like operating systems, you start Terracotta as follows:"},{"q":"For each virtual machine client that you want to \u201csee\u201d and share that state, start it with a customized bootclasspath parameter when starting Java.","opt":["True","False"],"ans":"a","explanation":"The arguments for this vary per operating system, so Terracotta provides a handy script for determining the correct arguments, dso-env.sh."},{"q":"To use the script on Unix-like operating systems:","opt":["$TERRACOTTA HOME/bin/dso-env.sh $HOST:3312","$TERRACOTTA HOME/bin/dso-env.sh $HOST:$PORT","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"To use the script on Unix-like operating systems:"},{"q":"To distribute processing over many nodes, perhaps to increase result speed through the use of concurrences, perhaps merely to provide load balance and fault tolerance.","opt":["Grid","GridGain","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"You can use something like GridGain, which was designed to transparently offload processing to a grid."},{"q":"GridGain is an implementation of a processing grid.","opt":["True","False"],"ans":"a","explanation":"GridGain differs from data grids like Terracotta or Coherence, although data grids and processing grids are often used together."},{"q":"There are many data grids, such as :-","opt":["Coherence","Terracotta","Hadoop\u2019s HFS","All of the mentioned"],"ans":"d","explanation":"These are designed to be fault-tolerant, memory-based RAM disks, essentially."},{"q":"Map/reduce is a pattern that was popularized by Google, and it comes from functional programming languages, which often have:-","opt":["map","reduce","none of the mentioned","all of the mentioned"],"ans":"d","explanation":"The idea is that you somehow partition a job and send those pieces to be processed. Finally, you take the results and join them, and those results are then sent back. Often, you won\u2019t have results per se; instead, you\u2019ll have sought only to distribute the processing asynchronously."},{"q":"To quickly grid-enable a method on a bean using GridGain.","opt":["@Gridify","@Grid","@GridGain","None of the mentioned"],"ans":"a","explanation":"You can use GridGain @Gridify annotation along with some Spring AOP configuration to let GridGain know that it can parallelize the execution of the method across the grid."},{"q":"GridGain provides:-","opt":["load balancing","fault tolerance","routing","all of the mentioned"],"ans":"d","explanation":"GridGain provides load balancing as well as fault tolerance and routing out of the box, which you get for free by adding this annotation."},{"q":"To build a parallelized solution for a problem that\u2019s intrinsically better-suited to parallelization or that, for want of resources, needs to be chunked.","opt":["map","reduce","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"Use map/reduce to approach the problem concurrently."},{"q":"GridGain works with a GridTask, which specifies how to handle the main unit of work of the interface type:-","opt":["Grid","GridGain","GridJob","All of the mentioned"],"ans":"c","explanation":"Underneath the hood, GridGain works with a GridTask, which specifies how to handle the main unit of work of the interface type GridJob."},{"q":"When you call the method on the service with the @Gridify annotation pointing to this GridTask implementation, it stops execution of method and loads an instance of this implementation.","opt":["True","False"],"ans":"a","explanation":"The parameters, as passed to the method with the annotation, are passed to: split(int i, final GridifyArgument gridifyArgument), which is used to dole out GridJob instances."},{"q":"When using GridGain stem mostly from the fact that what you develop on one node can\u2019t always automatically work on another node with no additional configuration.","opt":["True","False"],"ans":"a","explanation":"The parameters, as passed to the method with the annotation, are passed to: split(int i, final GridifyArgument gridifyArgument), which is used to dole out GridJob instances."},{"q":"GridGain lets you start up nodes using the startup script in the:-","opt":["etc","opt","bin","all of the mentioned"],"ans":"c","explanation":"GridGain lets you start up nodes using the startup script in the bin directory of the distribution."},{"q":"To hoist a grid node into existence.","opt":["GridLoader","GridLoad","Grid","GridGain"],"ans":"a","explanation":"The GridLoader\u2019s job is to hoist a grid node into existence."},{"q":"When you use the script that comes with the distribution is the class:-","opt":["GridCommandLine","GridCommandLineLoader","GridCommand","All of the mentioned"],"ans":"b","explanation":"The one that gets started when you use the script that comes with the distribution is the class GridCommandLineLoader."},{"q":"A GridLoader instance is responsible for many things such as:-","opt":["GridFactory.start","GridFactory.stop","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"A GridLoader instance is responsible for many things, not the least of which is correctly calling GridFactory.start and GridFactory.stop."},{"q":"GridFactory.start can take as its first parameter a:-","opt":["GridConfiguration object","Spring application context","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"This GridConfiguration object is what tells GridGain what is unique about a given node and the grid\u2019s topology. By default, it uses $GRIDGAIN HOME/config/default-spring.xml, which, in turn, does things such as load a Grid object and configure user parameters about a specific node."},{"q":"The file which enables you to tell GridGain about which GridTask classes are deployed:-","opt":["gridgain.xml","gridgain.html","grid.xml","gridify.xml"],"ans":"a","explanation":"gridgain.xml file, which is optional, enables you to tell GridGain about which GridTask classes are deployed."},{"q":"Instances of the ApplicationContext can be injected into the various GridGain class instances (GridTask, GridJob, and so forth) using GridGain:-","opt":["@Grid","@GridGain","@Gridify","None of the mentioned"],"ans":"d","explanation":"Instances of the ApplicationContext can be injected into the various GridGain class instances (GridTask, GridJob, and so forth) using GridGain @GridSpringApplicationContextResource annotation."},{"q":"This is the default implementation. It is used when you run gridgain.sh or gridgain.bat.","opt":["org.gridgain.grid.loaders.cmdline.GridCommandLineLoader","org.gridgain.grid.loaders.servlet.GridServletLoader","org.gridgain.grid.loaders.jboss.GridJbossLoader","org.gridgain.grid.loaders.weblogic.GridWeblogicStartup"],"ans":"a","explanation":"org.gridgain.grid.loaders.cmdline.GridCommandLineLoader This is the default implementation. It is used when you run gridgain.sh or gridgain.bat."},{"q":"This is likely the second most useful implementation. It provides a servlet that bootstraps the GridGain instance inside any web container as a servlet.","opt":["org.gridgain.grid.loaders.cmdline.GridCommandLineLoader","org.gridgain.grid.loaders.servlet.GridServletLoader","org.gridgain.grid.loaders.jboss.GridJbossLoader","org.gridgain.grid.loaders.weblogic.GridWeblogicStartup"],"ans":"b","explanation":"org.gridgain.grid.loaders.servlet.GridServletLoader This is likely the second most useful implementation. It provides a servlet that bootstraps the GridGain instance inside any web container as a servlet."},{"q":"PointCut definitions can\u2019t be reused again","opt":["True","False"],"ans":"b","explanation":"Like many other AOP implementations, AspectJ also allows you to define a pointcut independently to be reused in multiple advices."},{"q":"Annotation used to refer poincuts?","opt":["@Pointcut","@PointcutExecution","@PointcutBefore","None of the mentioned"],"ans":"a","explanation":"In an AspectJ aspect, a pointcut can be declared as a simple method with the @Pointcut annotation."},{"q":"what will be the output of the code snippet?<br>   package com.apress.springrecipes.calculator;<br>   import org.aspectj.lang.annotation.Aspect;<br>   import org.aspectj.lang.annotation.Pointcut;<br>   @Aspect<br>   public class CalculatorPointcuts <br>   {<br>\t@Pointcut(\"execution(* *.*(..))\")<br>\tpublic void loggingOperation() {}<br>   }<br>Â <br>   package com.apress.springrecipes.calculator;<br>   @Aspect<br>public class CalculatorLoggingAspect <br>{<br>   ...<br>   @Before(\"CalculatorPointcuts.loggingOperation()\")<br>   public void logBefore(JoinPoint joinPoint) <br>   {<br>   ...<br>   }<br>   @AfterReturning(<br>   pointcut = \"loggingOperation()\",<br>   returning = \"result\")<br>   public void logAfterReturning(JoinPoint joinPoint, Object result)<br>   {<br>   throw new IllegalArgumentException();<br>   }<br>   @AfterThrowing(<br>   pointcut = \"CalculatorPointcuts.loggingOperation()\",<br>   throwing = \"e\")<br>   public void logAfterThrowing(JoinPoint joinPoint, IllegalArgumentException e)<br>   {<br>   ...<br>   }<br>   @Around(\"CalculatorPointcuts.loggingOperation()\")<br>   public Object logAround(ProceedingJoinPoint joinPoint) throws Throwable <br>   {<br>   ...<br>   }<br>}","opt":["Runtime Error","IllegalArgument Exception","BeanCreation Exception","None of the mentioned"],"ans":"c","explanation":"When you refer to this pointcut, you have to include the class name as well. If the class is not located in the same package as the aspect, you have to include the package name also."},{"q":"Language used to set various kinds of join points","opt":["AspectJ pointcut language","Java pointcut language","XML pointcut language","None of the mentioned"],"ans":"a","explanation":"The AspectJ pointcut language is a powerful expression language that can match various kinds of join points."},{"q":"Spring AOP only supports method execution join points for the beans in its IoC container","opt":["True","False"],"ans":"a","explanation":"If you use a pointcut expression out of this scope, an IllegalArgumentException will be thrown."},{"q":"Is the following pointcut expression correct?<br>execution(* ArithmeticCalculator.*(..))","opt":["Yes","No","If every target class is in same package","Depends where target class is located"],"ans":"c","explanation":"You can omit the package name if the target class or interface is located in the same package as this aspect."},{"q":"The annotations must be added to the implementation class but not the interface","opt":["True","False"],"ans":"a","explanation":"Annotations must be added to the implementation class but not the interface, as they will not be inherited."},{"q":"Which of the following pattern is used to match bean name?","opt":["bean(*Calculator)","bean(Calculator)","bean(com.appress.spring.Calculator)","None of the mentioned"],"ans":"a","explanation":"The following pointcut expression matches beans whose name ends with Calculator."},{"q":"Bean name patterns are supported by all configurations(XML,Java,AspectJ)","opt":["True","False"],"ans":"b","explanation":"This pointcut type is supported only in XML-based Spring AOP configurations, not in AspectJ annotations."},{"q":"Expressions which returns Parameters of pointcuts?","opt":["target","args","none of the mentioned","all of the mentioned"],"ans":"d","explanation":"The expressions target() and args() capture the target object and argument values of the current join point and expose them as pointcut parameters."},{"q":"Are logical operators valid in pointcut expressions?","opt":["Yes","No"],"ans":"a","explanation":"In AspectJ, pointcut expressions can be combined with the operators && (and), || (or), and ! (not)."},{"q":"Method which checks if all target classes are matched","opt":["matches()","pair()","matchTargetClass()","none of the mentioned"],"ans":"a","explanation":"If the matches() method always returns true, all target classes will be matched."},{"q":"Spring supports operations on pointcuts:-","opt":["notably","union","intersection","all of the mentioned"],"ans":"d","explanation":"Union means the methods that either pointcut matches."},{"q":"Pointcuts can be composed using:-","opt":["org.springframework.aop.support.Pointcuts class","composablePointcut class","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"Using the static methods in the org.springframework.aop.support.Pointcuts class, or using the ComposablePointcut class in the same package."},{"q":"Pointcut used to parse an AspectJ pointcut expression string","opt":["org.springframework.aop.aspectj.AspectJExpressionPointcut","org.springframework.aop.aspectj.AspectJExpressionPointcutString","org.springframework.aop.aspectj.AspectJExpressionString","org.springframework.aop.aspectj.AspectJPointcuttoString"],"ans":"a","explanation":"Since 2.0, the most important type of pointcut used by Spring is org.springframework.aop.aspectj.AspectJExpressionPointcut. This is a pointcut that uses an AspectJ supplied library to parse an AspectJ pointcut expression string."},{"q":"A workflow system extricates that process state from the domain and into a separate layer, called a business process.","opt":["True","False"],"ans":"a","explanation":"A workflow system also typically models which agents in the system do what work, providing work lists for different agents in the system."},{"q":"A workflow engine lets you model the process in a higher-level form:-","opt":["XML","Use Case","UML","All of the mentioned"],"ans":"c","explanation":"A workflow engine lets you model the process in a higher-level form, roughly corresponding in code to what a UML activity diagram can describe."},{"q":"A language that, when deployed to a BPEL container, describes the execution of a process.","opt":["WS-BPEL (BPEL 2.0)","WS-BPEL (BPEL)","WS-BPEL for People (BPEL4People)","Business Process Modeling Notation (BPMN)"],"ans":"b","explanation":"It interfaces with the outside world via the invocation of external web services. This language describes the runtime behavior of a process."},{"q":"The main feature common to traditional workflow systems is the ability to support work lists for actors in a process.","opt":["WS-BPEL (BPEL 2.0)","WS-BPEL (BPEL)","WS-BPEL for People (BPEL4People)","Business Process Modeling Notation (BPMN)"],"ans":"a","explanation":"BPEL had no such support, as it didn\u2019t support human tasks (that is, wait states for people). This specification addresses that exact shortcoming."},{"q":"This provides a set of diagramming notations that describe a business process. This notation is akin to UML activity diagram.","opt":["WS-BPEL (BPEL 2.0)","WS-BPEL (BPEL)","WS-BPEL for People (BPEL4People)","Business Process Modeling Notation (BPMN)"],"ans":"d","explanation":"The notation is sometimes ambiguous, however, and one of the formidable challenges facing BPM vendors is creating a drawing tool that can take a round-trip to BPEL and back, providing seamless authoring."},{"q":"A way of letting your process rest in a known condition indefinitely.","opt":["State","Activity","Sequence","Subprocess"],"ans":"a","explanation":"\u201cState\u201d can mean many things, but simply, it\u2019s a pause or window in the action."},{"q":"A pause in the action that can only move forward when a known actor or agent in the system moves it forward.","opt":["State","Activity","Sequence","Subprocess"],"ans":"b","explanation":"An activity is a pause in the action that can only move forward when a known actor or agent in the system moves it forward."},{"q":"An aggregation of states, activities, and other types of constructs that serializes them.","opt":["State","Activity","Sequence","Subprocess"],"ans":"c","explanation":"A sequence is simply an aggregation of states, activities, and other types of constructs that serializes them."},{"q":"A concurrent execution of multiple threads of execution at the same time, originating from a common thread.","opt":["State","Activity","Sequence","Fork or concurrence or split"],"ans":"d","explanation":"Some parts of a business process are inherently sequential, and some are readily concurrent."},{"q":"Each department may have its own task list to complete in order to achieve the goals of the overarching process.","opt":["State","Activity","Subprocess","Fork or concurrence or split"],"ans":"c","explanation":"These subtasks (basically a separate process unto their own) may be modeled as a subprocess."},{"q":"A decision describes a node that is conditional, based on some logic that you inject.","opt":["True","False"],"ans":"a","explanation":"You might use this to vary the execution based on some fact that you provide the process as a parameter."},{"q":"To use PostgreSQL, you need to add a the driver library to the classpath.","opt":["True","False"],"ans":"a","explanation":"You might use this to vary the execution based on some fact that you provide the process as a parameter."},{"q":"To use PostgreSQL, you need to add a the driver library to the classpath.","opt":["True","False","True","False"],"ans":"a","explanation":"If you\u2019re looking to find out more, read the documentation, and get the downloadable binaries for exploration, check out http://jboss.org/jbossjbpm/."},{"q":"JBPM supports databases such as:-","opt":["Oracle","SQL Server","MySql","All of the mentioned"],"ans":"d","explanation":"It\u2019s hard to find an exhaustive or conclusive list of supported databases for jBPM, but because it\u2019s built on Hibernate, you can expect it\u2019s going to work on the big-name databases: Oracle, SQL Server, MySQL, PostgreSQL, and so forth."},{"q":"To make use of jBPM from within a Spring application context.","opt":["org.jbpm.pvm.internal.cfg.SpringConfiguration","org.jbpm.pvm.internal.cfg.Spring","org.jbpm.pvm.internal.cfg.*","All of the mentioned"],"ans":"a","explanation":"Earlier versions of Spring shipped with a custom bean for use with Spring (org.jbpm.pvm.internal.cfg.SpringConfiguration)."},{"q":"To use jBPM as a stand-alone process server:-","opt":["Javax","JBoss","None of the mentioned","All of the mentioned"],"ans":"b","explanation":"There are many ways to use jBPM. One approach is to use it as a stand-alone process server, perhaps deployed using JBoss."},{"q":"It\u2019s not too difficult to get jBPM working on JBoss EJB environment.","opt":["True","False"],"ans":"b","explanation":"As it\u2019s written using Hibernate, it\u2019s not too difficult to get it working on JBoss EJB environment."},{"q":"JBoss itself supports deploying processes to a directory and loading those, with some configuration.","opt":["True","False"],"ans":"a","explanation":"So, you might use jBPM as a service."},{"q":"jBPM is, fundamentally, a runtime that stores its state and jobs in a database. It uses:-","opt":["Hibernate","Spring","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"It uses Hibernate as its persistence mechanism (though it may eventually move to a strict JPA\u2013based model)."},{"q":"To have an annotated class be registered as a Hibernate entity, it needs to be registered with the:-","opt":["AnnotationSessionFactory","AnnotationSessionFactoryBean","AnnotationSession","None of the mentioned"],"ans":"b","explanation":"The annotatedClasses property expects a list of class names."},{"q":"Because our jBPM configuration uses Hibernate, we have to configure the :-","opt":["AnnotatedSessionFactory","AnnotatedSessionFactoryBean","None of the mentioned","All of the mentioned"],"ans":"b","explanation":"Because our jBPM configuration uses Hibernate, we have to configure the AnnotatedSessionFactoryBean on behalf of jBPM, which means that you can\u2019t create a separate one if you\u2019re using the jbpm4-context.xml and want only one Hibernate session in your application."},{"q":"The next bean\u2014the dataSource\u2014is configured entirely at your discretion. The properties are set using properties in the properties file :-","opt":["jbpm4.xml","jbpm.properties","jbpm4.properties","none of the mentioned"],"ans":"c","explanation":"The next bean\u2014the dataSource\u2014is configured entirely at your discretion. The properties are set using properties in the properties file jbpm4.properties."},{"q":"When we\u2019re integrating with Spring, we modify the transaction-context element and the command-service element.","opt":["True","False"],"ans":"a","explanation":"Because we\u2019re integrating with Spring, we modify the transaction-context element and the command-service element, as those are the touch points with Spring."},{"q":"The hibernate-session element tells jBPM to reuse an existing Hibernate session:-","opt":["True","False"],"ans":"a","explanation":"The hibernate-session element tells jBPM to reuse an existing Hibernate session the one we created with our Hibernate session factory) instead of creating its own."},{"q":"The spring-transaction-interceptor element is a special element to enable jBPM to defer to the TransactionManager defined in our application context.","opt":["True","False"],"ans":"a","explanation":"Here again, jBPM integrates by delegating to the Spring services, making for a very eloquent solution."},{"q":"jBPM will expose beans using the:-","opt":["jBPM expression language","jBoss","Spring expression language","None of the mentioned"],"ans":"a","explanation":"jBPM will expose beans using the jBPM expression language, and you can then just reference them by name."},{"q":"jBPM, and indeed most workflow engines, passivate state for you, allowing a process to wait on external events :-","opt":["True","False"],"ans":"a","explanation":"Indeed, because you\u2019ve decomposed your process into a series of isolated steps, each of which contributes to the larger goal while remaining independently useful, you get the best of both worlds:"},{"q":"We override the List bean (with id annotatedHibernateClasses) that we created for the last recipe (jbpm4 context.xml) to provide the session factory with a collection of annotated entities which is here as:-<br><?xml version=\"1.0\" encoding=\"UTF-8\"?><br>\t<beans xmlns=\"http://www.springframework.org/schema/beans\"<br>\txmlns:tx=\"http://www.springframework.org/schema/tx\" ï<br>\txmlns:p=\"http://www.springframework.org/schema/p\"<br>\txmlns:util=\"http://www.springframework.org/schema/util\" ï<br>\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"<br>\txmlns:aop=\"http://www.springframework.org/schema/aop\"<br>\txmlns:context=\"http://www.springframework.org/schema/context\"<br>\txsi:schemaLocation=\"<br>\thttp://www.springframework.org/schema/beans<br>\thttp://www.springframework.org/schema/beans/spring-beans-3.0.xsd<br>\thttp://www.springframework.org/schema/context<br>\thttp://www.springframework.org/schema/context/spring-context-3.0.xsd<br>\thttp://www.springframework.org/schema/util<br>\thttp://www.springframework.org/schema/util/spring-util-3.0.xsd<br>\thttp://www.springframework.org/schema/aop<br>\thttp://www.springframework.org/schema/aop/spring-aop-3.0.xsd<br>\thttp://www.springframework.org/schema/tx<br>\thttp://www.springframework.org/schema/tx/spring-tx-3.0.xsd<br>\t\"><br>\t<import resource=\"jbpm4-context.xml\"/><br>\t<context:annotation-config/><br>\t<tx:advice id=\"txAdvice\" transaction-manager=\"transactionManager\"><br>\t<tx:attributes><br>\t<tx:method propagation=\"REQUIRED\" name=\"*\"/><br>\t<\/tx:attributes><br>\t<\/tx:advice><br>\t<aop:config><br>\t<aop:advisor advice-ref=\"txAdvice\" pointcut=\"execution(* ï<br>\tcom.apress.springrecipes..jbpm4.*.*(..))\"/><br>\t<\/aop:config><br>\t<util:list id=\"annotatedHibernateClasses\"><br>\t<value>com.apress.springrecipes.jbpm.jbpm4.customers.Customer<\/value><br>\t<\/util:list><br>\t<bean id=\"customerService\" class=\"com.apress.springrecipes.jbpm.jbpm4.customers.ï<br>\tCustomerServiceImpl\"><br>\t<property name=\"processDefinitions\"><br>\t<list><br>\t<value>/process-definitions/RegisterCustomer.jpdl.xml<\/value><br>\t<\/list><br>\t<\/property><br>        <\/bean><br><\/beans>","opt":["HibernateCustom","Customer","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"This bean leverages Hibernate (through the HibernateTemplate instance) to handle persistence, and it leverages jBPM (through the SpringConfiguration instance) to handle BPM."},{"q":"The method annotated with @PostConstruct will be run after the bean\u2019s been configured to let the user inject custom initialization logic.","opt":["True","False"],"ans":"a","explanation":"The bean handles as part of its duties in its post-initialization phase."},{"q":"The business process file\u2019s name needs to end in :-","opt":["jpdl","xml","jpdl.xml","none of the mentioned"],"ans":"c","explanation":"The business process file\u2019s name needs to end in jpdl.xml; otherwise, jBPM won\u2019t deploy it."},{"q":"At the top, we\u2019ve injected some dependencies:","opt":["springConfiguration","repositoryService","executionService","all of the mentioned"],"ans":"d","explanation":"At the top, we\u2019ve injected three dependencies:"},{"q":"The class(CustomerServiceImpl) provides a few salient methods:-<br>package com.apress.springrecipes.jbpm.jbpm4.customers;<br>public interface CustomerService {<br>void sendWelcomeEmail(Long customerId);<br>void deauthorizeCustomer(Long customerId);<br>void authorizeCustomer(Long customerId);<br>Customer getCustomerById(Long customerId);<br>Customer createCustomer(String email, String password, String firstName, ï<br>String lastName);<br>void sendCustomerVerificationEmail(Long customerId);<br>}","opt":["void setupProcessDefinitions()","Customer createCustomer(String email, String passphrase, String firstName, String lastName)","void sendCustomerVerificationEmail(Long customerId)","all of the mentioned"],"ans":"d","explanation":"The class provides a few"},{"q":"In the bean, setupProcessDefinitions is run when the bean is created.","opt":["True","False"],"ans":"a","explanation":"It iterates through the processDefinitions collection and deploys the resource whose path it is given."},{"q":"Process definition will reference Spring beans using the JBoss expression language.","opt":["True","False"],"ans":"a","explanation":"We\u2019ll walk through how the business process uses our customerService bean and how the customerService bean uses the business process to handle the customer\u2019s sign-up."},{"q":"In jBPM, a business process is built using jPDL.","opt":["True","False","True","False","startProcessInstanceByKey","startProcessInstance","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"In the invocation, we give jBPM variables through a Map instance (acting as something of a context for the process variables)."},{"q":"Once in the java element named send-verification-email, jBPM will invoke the method:-","opt":["sendCustomerVerificationEmail","sendCustomerVerification","veifyCustomerVerificationEmail","all of the mentioned"],"ans":"a","explanation":"Once in the java element named send-verification-email, jBPM will invoke the method sendCustomerVerificationEmail on the customerService bean in Spring."},{"q":"Inside authorizeCustomer, the service queries the server for the any processes waiting at the:-","opt":["confirm-receipt-of-verification","confirm-receipt","confirm-receipt-of-verification-email","none of the mentioned"],"ans":"c","explanation":"Inside authorizeCustomer, the service queries the server for the any processes waiting at the confirm-receipt-of-verification-email state and having this customer\u2019s ID."},{"q":"The authorizeCustomer method also updates the Customer entity, marking it as authorized. From there, execution proceeds to the send-welcome-email java element.","opt":["True","False"],"ans":"a","explanation":"As before, the java element will be used to invoke a method on the customerService bean. This time, it will invoke sendWelcomeEmail to send the newly registered Customer a welcome email."},{"q":"To send an email using your Java Application:-","opt":["JavaMail API","Java Activation Framework (JAF)","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"You can download latest version of JavaMail (Version 1.2) from Java\u2019s standard website. You can download latest version of JAF (Version 1.1.1) from Java\u2019s standard website."},{"q":"If you want to send an email to multiple recipients:-","opt":["void addRecipients(Message.RecipientType type, Address[] addresses)","void addRecipients(Message.RecipientType type)","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"If you want to send an email to multiple recipients then the following methods would be used to specify multiple email IDs:"},{"q":"void addRecipients(Message.RecipientType type, Address[] addresses)<br>Parameter:-<br>type: This would be set to:-","opt":["TO","CC","BCC","All of the mentioned"],"ans":"d","explanation":"This would be set to TO, CC or BCC. Here CC represents Carbon Copy and BCC represents Black Carbon Copy. Example Message.RecipientType.TO."},{"q":"void addRecipients(Message.RecipientType type, Address[] addresses)<br>Parameter:-<br>addresses: This is the array of email ID, the method used while specifying email IDs","opt":["Internet","InternetAddress","BCC","All of the mentioned"],"ans":"b","explanation":"Addresses: This is the array of email ID. You would need to use the InternetAddress() method while specifying email IDs."},{"q":"To set content whose second argument is \u201ctext/html\u201d to specify that the HTML content is included in the message.","opt":["setContent","content","setMail","none of the mentioned"],"ans":"a","explanation":"setContent() method to set content whose second argument is \u201ctext/html\u201d to specify that the HTML content is included in the message."},{"q":"If it is required to provide user ID and Password to the email server for authentication purpose then you can set properties:","opt":["props.setProperty(\u201cmail.user\u201d, \u201cmyuser\u201d)","props.setProperty(\u201cmail.password\u201d, \u201cmypwd\u201d)","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"If it is required to provide user ID and Password to the email server for authentication purpose then you can set these properties as follows:"},{"q":"It is assumed that your localhost is connected to the internet and capable enough to send an email.","opt":["True","False"],"ans":"a","explanation":"To send an HTML email from your machine."},{"q":"The JavaMailSender interface is a subinterface of MailSender that includes specialized JavaMail features:-","opt":["Multipurpose Internet Mail Extensions","Multipurpose Internet Mail","Multipurpose Internet Extensions","None of the mentioned"],"ans":"a","explanation":"The JavaMailSender interface is a subinterface of MailSender that includes specialized JavaMail features such as Multipurpose Internet Mail Extensions (MIME) message support. To send an email message with HTML content, inline images, or attachments, you have to send it as a MIME message."},{"q":"You can implement the interface to send email notifications in case of errors.","opt":["Notify","Error","ErrorNotifier","None of the mentioned"],"ans":"c","explanation":"You can implement the ErrorNotifier interface to send email notifications in case of errors."},{"q":"You send the email by making a call to:-","opt":["Transport.send()","Transport.sendTo()","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"You send the email by making a call to Transport.send()."},{"q":"Java provides a mechanism, where an object can be represented as a sequence of bytes:-","opt":["Serialization","Compilation","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"Java provides a mechanism, called object serialization where an object can be represented as a sequence of bytes that includes the object\u2019s data as well as information about the object\u2019s type and the types of data stored in the object."},{"q":"After a serialized object has been written into a file, it can be read from the file and deserialized.","opt":["True","False"],"ans":"a","explanation":"The type information and bytes that represent the object and its data can be used to recreate the object in memory."},{"q":"Serialization is JVM independent.","opt":["True","False"],"ans":"a","explanation":"An object can be serialized on one platform and deserialized on an entirely different platform."},{"q":"Classes which are high-level streams that contain the methods for serializing and deserializing an object.","opt":["ObjectInputStream","ObjectOutputStream","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Classes ObjectInputStream and ObjectOutputStream are high-level streams that contain the methods for serializing and deserializing an object."},{"q":"The ObjectOutputStream class contains methods for writing various data types.","opt":["public final void writeObject(Object x)","public final void write(Object x)","public final void writeToObject(Object x)","all of the mentioned"],"ans":"a","explanation":"The ObjectOutputStream class contains many write methods for writing various data types, but one method in particular stands out:"},{"q":"The ObjectInputStream class contains methods for writing various data types.","opt":["public final Object readObject()","public final Object read(Object x)","public final Object readFromObject(Object x)","all of the mentioned"],"ans":"a","explanation":"This method retrieves the next Object out of the stream and deserializes it. The return value is Object, so you will need to cast it to its appropriate data type."},{"q":"For a class to be serialized successfully:","opt":["The class must implement the java.io.Serializable interface.","Every field in the class must be volatile.","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"The class must implement the java.io.Serializable interface."},{"q":"When serializing an object to a file, the standard convention in Java is to give the file a:","opt":[".war",".java",".ser","none of the mentioned"],"ans":"c","explanation":"When serializing an object to a file, the standard convention in Java is to give the file a .ser extension."},{"q":"What will be the value of transient field after deserialization:-","opt":["0","NULL","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"It depends on the data type of field, 0 if int and NULL if String or Object."},{"q":"If the class implements java.io.Serializable, then it is serializable; otherwise, it\u2019s not.","opt":["True","False"],"ans":"a","explanation":"The class must implement the java.io.Serializable interface."},{"q":"Support for deployment of traditional .war artifacts, enable use of some of the standard Java EE libraries, provide useful defaults for many de facto standard libraries, and provide fully integrated support for Spring Dynamic Modules.","opt":["Spring Dynamic Modules","Spring dm Server","Spring Tooling","All of the mentioned"],"ans":"b","explanation":"Use Spring dm Server, SpringSource\u2019s tried and true OSGi\u2013oriented server built on many technologies including Equinox and the Spring framework itself."},{"q":"OSGi doesn\u2019t solve framework concerns, instead focusing on infrastructure requirements for Java applications.","opt":["True","False","Spring Dynamic Modules","Spring dm Server","Spring Tooling","All of the mentioned"],"ans":"b","explanation":"SpringSource dm Server is a robust solution. There are several editions available."},{"q":"SpringSource dm Server many advances focus on delivering a solution, and not just a framework, for delivering:-","opt":["Spring Tooling","Spring dm","OSGi","None of the mentioned"],"ans":"c","explanation":"SpringSource dm Server many advances focus on delivering a solution, and not just a framework, for delivering OSGi\u2013based enterprise applications."},{"q":"SpringSource dm Server provides value above and beyond a regular OSGi solution.","opt":["True","False","True","False"],"ans":"a","explanation":"Spring dm Server provides the ability to wholesale import an entire library and all packages therein to expedite the process."},{"q":"SpringSource dm Server also allows you to bend the rules where necessary.","opt":["True","False"],"ans":"a","explanation":"For example, consider the application of an aspect using Spring\u2019s AOP. This might require weaving of classes, which in the case of a pointcut that matches classes deployed across multiple bundles, would prove cumbersome. SpringSource dm Server can intervene on Spring\u2019s behalf, propagating such changes across multiple bundles where necessary."},{"q":"SpringSource dm Server works with several types of deployment formats:-","opt":["bundle","Java EE .war","platform archive","all of the mentioned"],"ans":"d","explanation":"SpringSource dm Server works with four types of deployment formats."},{"q":"Application isolation is critical because it allows you to solve the issue of reconciliation of two services whose interfaces collide. You can use:-","opt":[".WAR",".XML",".PAR","All of the mentioned"],"ans":"c","explanation":"You can use a .PAR to isolate services within the deployment unit."},{"q":"SpringSource dm Server provides the robustness needed to commoditize enterprise application development in an OSGi environment.","opt":["True","False"],"ans":"a","explanation":"For a really good reference, specifically on SpringSource dm Server, I (Josh Long) would humbly recommend you investigate my co-author in-depth treatment of the subject, Pro SpringSource dm Server, by Gary Mak and Daniel Rubio (Apress, 2009)."},{"q":"To begin with SpringSource dm Server but need a way to rapidly turnaround development.","opt":["Spring Dynamic Module","Spring Dynamic Server","SpringSource dm Server","None of the mentioned"],"ans":"c","explanation":"Use the SpringSource dm Server tooling available as part of SpringSource Tool Suite (STS)."},{"q":"SpringSource has provided solid tooling for Eclipse, called :-","opt":["Spring Dynamic Module","dm Server Tools","SpringSource dm Server","None of the mentioned"],"ans":"b","explanation":"SpringSource has provided solid tooling for Eclipse, called dm Server Tools, which facilitate executing applications directly in a development environment."},{"q":"These tools\u2014part of the broader SpringSource Tool Suite\u2014are available as :-","opt":["plug-in","stand-alone environment","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"These tools\u2014part of the broader SpringSource Tool Suite\u2014are available as either a plug-in or as a stand-alone environment."},{"q":"To create services and have those automatically installed in the registry.","opt":["Spring Dynamic Modules","Spring DM Server","Spring Tooling","None of the mentioned"],"ans":"a","explanation":"You can use Spring Dynamic Modules configuration schema to export a service. The service will be made available to other beans as well as other OSGi components."},{"q":"Element to export the bean as an OSGi service, classified by the interface we specify.","opt":["osgix","osgi:service","all of the mentioned","none of the mentioned"],"ans":"b","explanation":"We\u2019ll use the osgi:service element to export the bean as an OSGi service, classified by the interface we specify."},{"q":"These beans are proxies, some may load asynchronously or take a longer time to register.<br><osgi:service<br>      interface=\"com.apress.springrecipes.<br>      osgi.helloworld.service.GreeterService\"><br>      <bean class=\"com.apress.springrecipes.osgi.helloworld.<br>      service.GreeterServiceImpl\"/><br><\/osgi:service>","opt":["True","False"],"ans":"a","explanation":"This implies that you may have timing issues to resolve in configuring your service. For this, Spring Dynamic Modules provides the depends-on attribute, which lets your bean wait for another bean."},{"q":"An anonymous bean specified inside of the osgi:service element allows you to avoid cluttering the namespace.","opt":["True","False"],"ans":"a","explanation":"You can abbreviate the syntax by using an anonymous bean."},{"q":"The first, most direct connection to OSGi is the bean that\u2019s created on your behalf when you export a service. This bean, an instance of:-","opt":["org.osgi.framework.ServiceRegistration","org.osgi.framework.Service","org.osgi.framework.ServiceRegister","none of the mentioned"],"ans":"a","explanation":"This bean, an instance of org.osgi.framework.ServiceRegistration, is in turn a delegate to the Spring bean you have defined."},{"q":"By default, beans created in a Spring application context are global to the entire OSGi runtime.","opt":["True","False"],"ans":"a","explanation":"By default, beans created in a Spring application context are global to the entire OSGi runtime, including all clients that use it."},{"q":"Sometimes, you may want to limit the visibility of a service so that multiple clients each get their own instance of the bean.","opt":["time","scope","attr","none of the mentioned"],"ans":"b","explanation":"Spring Dynamic Modules provides a clever use of the scope attribute here, allowing you to limit beans exported as services to the client, or service importer."},{"q":"Spring Dynamic Modules also supports injection and manipulation of bundles themselves. An injected bundle is of type:-","opt":["org.osgi.framework.savedBundle","org.osgi.framework.Bundle","org.osgi.framework.BundleInstance","none of the mentioned"],"ans":"b","explanation":"The simplest use case is that you want to obtain an instance of the org.osgi.framework.Bundle class from an already loaded bundle in the system."},{"q":"Once acquired, the Bundle can be interrogated to introspect information about the bundle itself, including any entries, its current state.","opt":["True","False"],"ans":"a","explanation":"Once acquired, the Bundle can be interrogated to introspect information about the bundle itself, including any entries, its current state (which can be any of: UNINSTALLED, INSTALLED, RESOLVED, STARTING, STOPPING, or ACTIVE), and any headers specified on the bundle."},{"q":"OSGi will let you maintain multiple versions of a service in your registry at the same time.","opt":["True","False"],"ans":"a","explanation":"OSGi, and Spring Dynamic Modules on top of it, provides many tools for discriminating services both in publishing and consuming services."},{"q":"Multiple services of the same interface may be registered inside of an OSGi environment, which necessitates a conflict-resolution process.","opt":["True","False"],"ans":"a","explanation":"To aid in that, Spring Dynamic Modules provides a few features to help."},{"q":"When specified on a service element, allows the ascription of a rank relative to other beans with the same interface.","opt":["Ranking","Service","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"Ranking is specified on the service element itself. When encountered, the OSGi runtime will return the service with the highest-ranking integer value."},{"q":"A more robust solution to service discrimination is service attributes.","opt":["True","False"],"ans":"a","explanation":"A service attribute is an arbitrary key and value pair that the service exports, and on which lookups for a service with multiple matches can be predicated."},{"q":"There are frequently situations where OSGi will return more than one instance of a service that satisfies the interface.","opt":["True","False"],"ans":"a","explanation":"Take, for example, a deployment where you have multiple GreeterServices deployed for various regions. Spring Dynamic Modules provides the set and list interfaces to retrieve multiple references and populate a java.util.Set and java.util.List, respectively."},{"q":"Attribute, which, is the symbolic name of another bundle.","opt":["Fragment","Fragment-Host","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"The Fragment-Host attribute, in turn, is the symbolic name of another bundle."},{"q":"OSGi\u2014which was formerly known as the:-","opt":["Open Services Gateway initiative","Open Source Gateway initiative","Open Services Gateway initialisation","None of the mentioned"],"ans":"a","explanation":"OSGi\u2014which was formerly known as the Open Services Gateway initiative, though the name\u2019s obsolete now\u2014has its roots in the embedded space, where dynamic service provisioning is far more important than it is in the gridiron world of enterprise applications."},{"q":"OSGi provides a layer on top of the JVM\u2019s default class loader.","opt":["True","False"],"ans":"a","explanation":"The deployment unit for OSGi is a bundle, which is essentially a JAR with an augmented MANIFEST.MF."},{"q":"On top of Spring Dynamic Modules, SpringSource built SpringSource dm Server, which is a server wired from top to bottom with OSGi and Spring.","opt":["True","False"],"ans":"a","explanation":"SpringSource dm Server supports dynamic deployment, enhanced tooling, HTTP, and native .war deployment."},{"q":"OSGi is a framework.","opt":["True","False"],"ans":"b","explanation":"OSGi is a specification, not a framework. There are many implementations of the specification, just as there are many implementations of the Java EE specification."},{"q":"User component models are:-","opt":["OSGi","Spring","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"OSGi is not a user component model, like Spring or EJB 3. Instead, it sits below your components, providing life-cycle management for Java classes."},{"q":"In OSGi, anything used by something else is a state.","opt":["True","False"],"ans":"b","explanation":"In OSGi, anything used by something else is a service. \u201cService\u201d doesn\u2019t imply any concrete inheritance."},{"q":"\u201cService\u201d doesn\u2019t imply any:-","opt":["RPC","inheritance","transactional qualities","all of the mentioned"],"ans":"d","explanation":"\u201cService\u201d doesn\u2019t imply any concrete inheritance; it doesn\u2019t imply transactional qualities, and it doesn\u2019t imply RPC. It\u2019s merely a class on whose concrete, black-box functionality and interface your class relies."},{"q":"OSGi bundles are simply standard .jar files with customized MANIFESTs that OSGi consumes at runtime.","opt":["True","False"],"ans":"a","explanation":"The plug-in wraps the bnd command line tool."},{"q":"Tool which dynamically interrogates classes for their imports and generates OSGi\u2013compliant entries.","opt":["pnd","jndi","bnd","none of the mentioned"],"ans":"c","explanation":"We repeat it here mainly for illustrative purposes."},{"q":"The plug-in produces OSGi\u2013compliant bundles that work in any container.","opt":["True","False"],"ans":"c","explanation":"To read more on the plug-in itself, see http://felix.apache.org/site/apache-felix-maven-bundle-plugin-bnd.html."},{"q":"The Bundle-Activator directive describes to the OSGi environment, which class implements :-","opt":["BundleActivator","BundleActivate","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"The Bundle-Activator directive describes to the OSGi environment, which class implements BundleActivator, and should be consulted when life cycle events occur."},{"q":"When the bundle begins to load and start, it calls the start method of the:-","opt":["BundleActivator","Activator","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"When the bundle begins to load and start, it calls the start method of the Activator."},{"q":"To start using Spring to smooth over some of the minutiae of resource acquisition and to help build more reliable systems in an OSGi environment.","opt":["Spring DM server","Spring Dynamic Modules","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"Use Spring Dynamic Modules to provide the integration. Spring Dynamic Modules is a framework on top of OSGi that works with any OSGi environment."},{"q":"Spring Dynamic Modules scans our deployed bundles and loads an ApplicationContext (actually, the specific type of the ApplicationContext is OsgiBundleXmlApplicationContext) into memory based on an event, or a trigger.","opt":["True","False"],"ans":"a","explanation":"There are two ways to trigger this behavior. The first is to explicitly specify in the META-INF/MANIFEST.MF file the attribute Spring-Context, which allows you to override the default location it consults. Otherwise, by default, Spring Dynamic Modules will look for the XML file in the META-INF/spring directory of a bundle."},{"q":"You\u2019ll split your OSGi\u2013specific Spring configuration and your plain-vanilla Spring configuration into:-","opt":["modulename-context.xml","modulename-osgi-context.xml","all of the mentioned","none of the mentioned"],"ans":"a","explanation":"Typically, you\u2019ll split your OSGi\u2013specific Spring configuration and your plain-vanilla Spring configuration into two different files, of the form: modulename-context.xml and modulename-osgi-context.xml."},{"q":"Which special type of advice is used to implement an interface?","opt":["Introduction","Before","After","AfterSpecial"],"ans":"a","explanation":"It allows your objects to implement an interface dynamically by providing an implementation class for that interface."},{"q":"Introduction advice helps in implementing multiple inheritance","opt":["True","False"],"ans":"a","explanation":"You are able to introduce multiple interfaces with multiple implementation classes to your objects at the same time."},{"q":"In introduction advice you have to modify class to introduce new methods","opt":["True","False"],"ans":"b","explanation":"You can introduce methods to your existing classes even without source code available."},{"q":"How does an Introduction advice do this in Spring?","opt":["dynamic proxy","web proxy","implements org.springframework.net.bundle interface","none of the mentioned"],"ans":"a","explanation":"Introduction works by adding an interface to the dynamic proxy."},{"q":"Annotation used to declare an introduction","opt":["Before","After","@DeclareParents","None of the mentioned"],"ans":"c","explanation":"In this aspect, you can declare an introduction by annotating an arbitrary field with the @DeclareParents annotation."},{"q":"Target Classes can be denoted by Introduction Annotation","opt":["True","False"],"ans":"a","explanation":"The value attribute of the @DeclareParents annotation type indicates which classes are the targets for this introduction."},{"q":"Attribute used to specify implementation class","opt":["no such attribute","defaultImpl","defaultInterface","defaultImplement"],"ans":"b","explanation":"The interface to introduce is determined by the type of the annotated field. Finally, the implementation class used for this new interface is specified in the defaultImpl attribute."},{"q":"How to keep track of the usage of your beans","opt":["Calling Count","Last modified date","New Interface to your object","All of the mentioned"],"ans":"d","explanation":"You can introduce a new interface to your objects with an implementation class that holds the state field."},{"q":"How to introduce counter field to original bean class?","opt":["Using Spring AOP","Implementing interface","AspectJ Pointcut","None of the mentioned"],"ans":"a","explanation":"Since there is no field for storing the counter value in the original classes, you need to introduce one with Spring AOP."},{"q":"Tag used to declare aspects","opt":["aop:config","aop:auto-proxy","aop:autowire","None of the mentioned"],"ans":"a","explanation":"In the bean configuration file, all the Spring AOP configurations must be defined inside the aop:config element."},{"q":"Tag used to enable AspectJ annotation?","opt":["Introduction","aop:aspectj-autowire","aop:aspectj-autoproxy","AfterSpecial"],"ans":"c","explanation":"To enable AspectJ annotation support in Spring, you have already defined an empty XML element, aop:aspectj-autoproxy."},{"q":"Tag which defined Spring AOP configurations","opt":["aop:config","aop:configregister","aop:configbeans","None of the mentioned"],"ans":"a","explanation":"In the bean configuration file, all the Spring AOP configurations must be defined inside the aop:config element."},{"q":"What are the ways to declare an advice?","opt":["pointcut-ref attribute","pointcut attribute","all of the mentioned","none of the mentioned"],"ans":"c","explanation":"An advice element requires either a pointcut-ref attribute to refer to a pointcut or a pointcut attribute to embed a pointcut expression directly."},{"q":"Applying aspects to your target objects","opt":["AspectJ Annotation","Weaving","All of the mentioned","None of the mentioned"],"ans":"b","explanation":"Weaving is the process of applying aspects to your target objects."},{"q":"Special compiler used during weaving","opt":["jvm","gcc","ajc","none of the mentioned"],"ans":"c","explanation":"AspectJ compile-time weaving is done through a special AspectJ compiler called ajc."},{"q":"Name of the process when targe classes are loaded into JVM","opt":["load-time weaving","process-time weaving","load-process weaving","process-delivery weaving"],"ans":"a","explanation":"AspectJ load-time weaving (also known as LTW) happens when the target classes are loaded into JVM by a class loader."},{"q":"How to weave your classes using argument while compiling?","opt":["-javaagent:CLASSPATH","-javaagent:PackgePath","-javaweave:CLASSPATH","-javaweave:PackagePath"],"ans":"a","explanation":"You need only to add a VM argument to the command that runs your application. Then your classes will get woven when they are loaded into the JVM."},{"q":"XML Element to include load-time weaver","opt":["aop:config","aop:auto-wire","context:load-time-weaver","aop:load-time-weaver"],"ans":"c","explanation":"To turn on a suitable load-time weaver for your Spring application, you need only to declare the empty XML element context:load-time-weaver."},{"q":"You also have to include suitable load-time weaver\u2019s configuration in XML","opt":["True","False"],"ans":"b","explanation":"Spring will be able to detect the most suitable load-time weaver for your runtime environment."},{"q":"Library to use AspectJ weaver","opt":["spring-instrument.jar","spring-introduction.jar","spring-aop.jar","spring-weave.jar"],"ans":"a","explanation":"To use the AspectJ weaver, you need to include the spring-instrument.jar"},{"q":"Objects created outside the container:-","opt":["Domain Objects","User Objects","SpringVisitor Objects","None of the mentioned"],"ans":"a","explanation":"Objects created outside the Spring IoC container are usually domain objects. They are often created using the new operator or from the results of database queries."},{"q":"How to inject Spring bean into domain objects","opt":["AOP","XML","AspectJ","Java Based"],"ans":"a","explanation":"To inject a Spring bean into domain objects created outside Spring, you need the help of AOP."},{"q":"We can directly use Spring AOP for injection of beans","opt":["True","False"],"ans":"b","explanation":"As the domain objects are not created by Spring, you cannot use Spring AOP for injection."},{"q":"Which scope does @Configurable instantiated class looks for?","opt":["Singleton","Prototype","None of the mentioned","All of the mentioned"],"ans":"b","explanation":"When a class with the @Configurable annotation is instantiated, the aspect will look for a prototype-scoped bean definition whose type is the same as this class."},{"q":"Spring includes AnnotationBeanConfigurerAspect in its aspect library for configuring the dependencies of any objects","opt":["True","False"],"ans":"a","explanation":"Spring includes AnnotationBeanConfigurerAspect in its aspect library for configuring the dependencies of any objects, even if they were not created by the Spring IoC container. First of all, you have to annotate your object type with the @Configurable annotation to declare that this type of object is configurable."},{"q":"Attribute used by Spring to refresh beans","opt":["refresh-check-interval","refresh-check-delay","refresh-delay","none of the mentioned"],"ans":"b","explanation":"Spring is able to refresh a scripted bean definition from its source once you have specified the checking interval in the refresh-check-delay attribute."},{"q":"Spring IoC container refreshes the script periodically according to the interval period specified","opt":["True","False"],"ans":"a","explanation":"When a method is called on that bean, Spring will check the script source if the specified checking interval has elapsed. The Spring will refresh the bean definition from the script source if it has been changed."},{"q":"Default value of refresh-check-delay attribute","opt":["Zero","Negative","Positive","None of the mentioned above"],"ans":"b","explanation":"By default, the refresh-check-delay attribute is negative, so the refresh checking feature is disabled. You can assign the milliseconds for refresh checking in this attribute to enable this feature."},{"q":"XML Element to define an inline script","opt":["lang:inlinescript","lang:inline_script","lang:inline@script","lang:inline-script"],"ans":"d","explanation":"You can define an inline script source in the lang:inline-script element of a scripted bean to replace a reference to an external script source file by the script-source attribute."},{"q":"Refresh checking feature is not applicable for an inline script","opt":["True","False"],"ans":"a","explanation":"Spring IoC container only loads the bean configuration once, at startup."},{"q":"To prevent the characters in your script from conflicting with the reserved XML characters","opt":["Use ![CDATA[\u2026]] tag","Use ![DATA[\u2026]] tag","Use ![CDATA(\u2026)] tag","None of the mentioned"],"ans":"a","explanation":"You no longer have to specify the reference to the external script source file in the script-source attribute."},{"q":"Dynamic-language-backed bean with some configurations","opt":["Refreshable bean","Beanshell","Scripting Beans","Inline Script"],"ans":"a","explanation":"A refreshable bean is a dynamic-language-backed bean that with a small amount of configuration, a dynamic-language-backed bean can monitor changes in its underlying source file resource, and then reload itself when the dynamic language source file is changed."},{"q":"To quickly add a Spring Validator implementation to a Spring MVC Controller","opt":["Use inline-script","lang:inline-script","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"If we put to one side the issues surrounding whether it is good practice to define dynamic language source inside a Spring configuration file, the lang:inline-script/ element can be useful in some scenarios."},{"q":"Spring can detect and refresh changes from the script source files","opt":["True","False"],"ans":"a"},{"q":"Script\u2019s location is specified by attribute","opt":["script-source","xml-source","script-annotation","none of the mentioned"],"ans":"a","explanation":"Specifying the script\u2019s location in the script-source attribute."},{"q":"Beans can be created by which of the following properties?","opt":["Scope","Property","Class","It\u2019s own constructor"],"ans":"d","explanation":"Class\u2019s constructor can create bean."},{"q":"Which attribute is used to specify class name of the bean?","opt":["name","id","class","constructor-args"],"ans":"c","explanation":"Class attribute is mandatory and denotes the class used to create bean."},{"q":"Which of the following method can be used to used to instantiate a method?","opt":["static factory method","default-init method","destroy method","lazy-init method"],"ans":"a","explanation":"Class attribute is used to specify the name of the class that contains the static factory method."},{"q":"Which attribute is used to specify static factory-method?","opt":["factory-method","default-init method","destroy method","lazy-init method"],"ans":"a","explanation":"factory-method attribute denotes the name of actual method of the class."},{"q":"Purpose of Static Factory Method?","opt":["Static method to create an object","Initialize bean","All of the mentioned","None of the mentioned"],"ans":"a","explanation":"Instantiate a bean using static method."},{"q":"Exception thrown by factory method?","opt":["IllegalArgumentException","IndexOutofBoundException","ClassPathNotFoundException","BeanCreationException"],"ans":"d","explanation":"Spring generates the above mentioned exception, in case something\u2019s wrong."},{"q":"What will be the output?<br>Snippet of Code:<br>public class CreatePro {<br>    String ProductId;<br>    public CreatePro(String ProductId)\t{<br>        this.ProductId = ProductId;<br>    }<br>Â <br>public static Product creation_Product(String productId) {\t<br>    System.out.println(\"Bean Created\");<br>    if (\"aaa\".equals(productId)) {<br>        return new Battery(\"AAA\", 2.5);<br>    } else if (\"cdrw\".equals(productId)) {<br>        return new Disc(\"CD-RW\", 1.5);<br>    }<br>}<br>}<br><beans ...><br><bean id=\"aaa\" class=\"CreatePro\"<br>    factory-method=\"createProduct\"><br>    <constructor-arg value=\"aaa\" /><br><\/bean><br><bean id=\"cdrw\" class=\"CreatePro\"<br>    factory-method=\"createProduct\"><br>    <constructor-arg value=\"cdrw\" /><br><\/bean><br><\/beans>","opt":["BeanCreationException","Bean Created","ClassPathException","None of the mentioned"],"ans":"a","explanation":"Since factory-method doesn\u2019t exists in the ProductCreator class, so exception thrown."},{"q":"A bean can have more than one name using multiple id attributes?","opt":["True","False"],"ans":"a","explanation":"Beans are allowed to have more than one ids."},{"q":"Bean\u2019s naming convention:-<br>starts with lowercase, camelcase from then on.?","opt":["True","False"],"ans":"a","explanation":"Beans follow naming conventions."},{"q":"Beans can be created by which of the following properties?","opt":["Static factory-method","Instance Factory-Method","All of the mentioned","None of the mentioned"],"ans":"c","explanation":"Instantiate a bean via static and instance Factory methods."},{"q":"The bean instance is mentioned by the factory-method attribute, while the factory method is signified by the factory-bean attribute?","opt":["True","False"],"ans":"b","explanation":"The bean instance is mentioned by factory-bean attr while factory method is for factory-method attr."},{"q":"One factory class can also hold more than one factory method True/False?","opt":["True","False"],"ans":"a","explanation":"A single instantiated bean can have more than one methods."},{"q":"Snippet of Code:<br>public class CreatePro <br>{<br>     String ProductId;<br>     public CreatePro(String ProductId)\t<br>     this.ProductId = ProductId;<br>}<br>Â <br>public static Product creation_Product(String productId) <br>{\t<br>     System.out.println(\"Bean Created\");<br>     if (\"aaa\".equals(productId)) <br>     {<br>        return new Battery(\"AAA\", 2.5);<br>     } <br>     else if (\"cdrw\".equals(productId)) <br>     {<br>\treturn new Disc(\"CD-RW\", 1.5);<br>     }<br>Â <br>}<br>Â <br>  <beans ...><br>\t<bean id=\"aaa\" class=\"CreatePro\"<br>\tfactory-method=\"createProduct\"><br>\t<constructor-arg value=\"aaa\" /><br>\t<\/bean><br>\t<bean id=\"cdrw\" class=\"CreatePro\"<br>\tfactory-method=\"createProduct\"><br>\t<constructor-arg value=\"cdrw\" /><br>\t<\/bean><br>  <\/beans><br>  slight change in XML file:-<br>Â <br><bean id=\"aaa\" factory-bean=\"productCreator\"<br>factory-method=\"createProduct\"><br><constructor-arg value=\"aaa\" /><br><\/bean><br><bean id=\"cdrw\" factory-bean=\"productCreator\"<br>factory-method=\"createProduct\"><br><constructor-arg value=\"cdrw\" /><br><\/bean><br>What will be the output:-","opt":["BeanCreationException","IllegalArgumentException","New Product will be created","None of the mentioned"],"ans":"c","explanation":"Factory-Bean is used instead of class."},{"q":"Instance Factory method main purpose is to encapsulate the object-creation process in a method of another object instance.","opt":["True","False"],"ans":"a","explanation":"The client who requests an object can simply make a call to this method without knowing about the creation detail."}]